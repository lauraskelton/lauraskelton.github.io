<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Swift | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/swift/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-06-24T12:11:29-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 9]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/"/>
    <updated>2014-06-20T23:54:01-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9</id>
    <content type="html"><![CDATA[<p>After chatting with some alums who were visiting, I decided it would be a good idea to spend some time studying Data Structures and Algorithms while I&rsquo;m at Hacker School. The great thing about being involved in a program with other people instead of learning on your own is that you become aware of some of your unknown unknowns. I can certainly teach myself things I know that I need to learn, but it&rsquo;s more challenging to know if there&rsquo;s something I need to learn that I&rsquo;ve never even heard of.</p>

<p>As I was getting ready to post a question about any books or online courses for Data Structures that folks recommended, a couple of friends walked over and started coincidentally talking about the exact same thing. We picked out <a href="http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693">The Algorithm Design Manual</a> as the book we&rsquo;d work through, and put together a study group to read through it and work on the exercises together.</p>

<p>We ended up working late into the evening reading through the Data Structures section and implementing our own versions of some data structures in Apple&rsquo;s new Swift programming language. This worked wonderfully, as Swift works with XCode&rsquo;s new Playgrounds, which auto-compile code to show you right away if your code is working the way you expect it to.</p>

<p>We implemented a Swift version of a Linked List, and had some great conversations about the advantages and drawbacks of structuring some of the necessary methods in different ways, ending up with a neat implementation that took advantage of recursion to keep the code simple.</p>

<p><img class="center" src="/images/posts/9linkedlist.gif" title="&lsquo;linked list&rsquo;" ></p>

<p>```objc
class LinkedList {</p>

<pre><code>var head : LinkedListNode?

func search(item: String) -&gt; LinkedListNode? {
    if head {
        return head!.search(item)
    } else {
        return nil
    }
}
func add(item: String) {
    if head {
        head!.add(item)
    } else {
        head = LinkedListNode(item)
    }
}
func size() -&gt; Int {
    if head {
        return head!.size()
    } else {
        return 0
    }
}
</code></pre>

<p>}</p>

<p>class LinkedListNode {</p>

<pre><code>var item: String
var next: LinkedListNode?

init(_ contents: String) {
    self.item = contents
}
func add(itemToAdd: String) {
    if let nextNode = self.next {
        nextNode.add(itemToAdd)
    } else {
        self.next = LinkedListNode(itemToAdd)
    }
}
func cons(itemToAdd: String) -&gt; LinkedListNode {
    var oldHead = LinkedListNode(self.item)
    self.item = itemToAdd
    self.next = oldHead
    return self
}
func search(itemToFind: String) -&gt; LinkedListNode? {
    if self.item == itemToFind {
        return self
    } else if let nextNode = self.next {
        return nextNode.search(itemToFind)
    } else {
        return nil
    }
}
func size() -&gt; Int {
    if let nextNode = self.next {
        return 1 + nextNode.size()
    } else {
        return 1
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>I learned a lot that I didn&rsquo;t know before about what an Array represents on a machine level (same-type items stored in consecutive memory locations), and how it differs from a Linked List or a Dictionary (same-type items stored in different memory locations with pointers to the next item), which explained some things about Objective-C that I hadn&rsquo;t known the reasoning behind before we started, like why empty Arrays are initialized with a capacity.</p>

<p><img class="center" src="/images/posts/9arraycapacity.jpg" title="&lsquo;array capacity&rsquo;" ></p>

<p>We also learned a much more generalized definition of a Dictionary which was interesting. It was also helpful to go through worst-case algorithm processing times, called Big O notation or Asymptotic notation. We figured out the Big O notation for various functions on an unsorted and a sorted array, and then learned that deletes on an unsorted array can be done more cleverly than we had originally thought.</p>

<p><img class="center" src="/images/posts/9bigo.png" title="&lsquo;big o notation&rsquo;" ></p>

<p>I learned about Binary Searches on sorted arrays, where instead of having to iterate through every item to find a specific value, you keep splitting the array down the middle and figuring out which half the value would be in, reducing the number of steps to find an item dramatically.</p>

<p><img class="center" src="/images/posts/9binarysearch.png" title="&lsquo;binary search&rsquo;" ></p>

<p>Later that evening, we learned about Binary Trees and the special Binary Search Trees. The Binary Search Trees work just like Binary Searches on sorted arrays, and the search is cleverly designed in the structure of the data itself. Each larger value is put into a branch node to the right, and each smaller value goes to the right. That way, to find a specific value, you have built in short-cuts as compared to an array.</p>

<p><img class="center" src="/images/posts/9binarysearchtree.png" title="&lsquo;binary search tree&rsquo;" ></p>

<p>Binary Trees might be unbalanced- if you added the values in numerical order, you would end up with just a line from the lowest value at the top to the highest value at the bottom right. The tree would be very tall, and thus it would take just as long to traverse as a regular array. The &ldquo;balancing&rdquo; of the tree, which is the distribution of values so that the right and left branches of the tree and its nodes are approximately equal, makes it possible to find values much more quickly, because each node is linked to not one but two different values, and you still know which of the links to follow simply by knowing if you are looking for a larger or smaller value. A cool trick is that if the values you are putting in can be expected to have a large degree of randomness, the tree has a high probability of being well-balanced (since subsequently-added values are equally likely to go to the left or the right of existing values, and not just all in one direction), and therefore not too tall, which will make it quickly searchable.</p>

<p>We implemented a Binary Tree structure in Swift, which was exciting because of its simplicity in code once we understood how the structure worked.</p>

<p>``` objc</p>

<p>class BinaryTree {</p>

<pre><code>var data: Int?

var left: BinaryTree?
var right: BinaryTree?

init() {
}

func insert(d: Int) {

    if !self.data {

    } else {

        if d &lt; self.data {
            if let l = self.left {
                l.insert(d)
            } else {
                var tree = BinaryTree()
                tree.data = d
                self.left = tree
            }
        } else {
            if let r = self.right {
                r.insert(d)
            } else {
                var tree = BinaryTree()
                tree.data = d
                self.right = tree
            }
        }
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Because we are simultaneously trying to learn the new tools available in Swift, we implemented a second version of the Binary Tree using a switch statement with a tuple and Swift&rsquo;s new pattern matching rules instead of if/else statements.</p>

<p>``` objc
class BinaryTree2 {</p>

<pre><code>var data: Int?
var left: BinaryTree2?
var right: BinaryTree2?

init (n: Int) {
    self.data = n
}

func insert (n: Int) {
    switch(self.data, self.left, self.right) {
    case let (.None, _, _):
        self.data = n
    case let (data, .Some(l), _) where data &lt; n:
        l.insert(n)
    case let (data, .None, _) where data &lt; n:
        self.left = BinaryTree2(n:n)
    case let (data, _, .Some(r)) where data &gt;= n:
        r.insert(n)
    case let (data, _, .None) where data &gt;= n:
        self.right = BinaryTree2(n:n)
    }
}
</code></pre>

<p>}
```
We kept getting an error with this version that we hadn&rsquo;t covered every possible case, and every time we added a default case or a universal pattern match, XCode would crash. After many attempts, we learned that this is actually due to a known bug in Swift that will hopefully be fixed soon.</p>

<p>I&rsquo;m looking forward to learning a lot more about data structures with this group. It&rsquo;s amazing how accelerated my gaining of knowledge is in a co-learning environment like this- it&rsquo;s like the worlds' best study group that I get to work with every day. We were getting excited about putting a group together to go through some <a href="https://archive.org/details/Non-euclideanGeometry">advanced math textbooks I found online</a>, and I feel sad that Hacker School is only 3 months and I won&rsquo;t be here learning all of these things for at least the next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 1]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/"/>
    <updated>2014-06-10T14:25:15-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1</id>
    <content type="html"><![CDATA[<p>Things got much more tricky when I started trying to implement <a href="https://github.com/lauraskelton/simple-share">SimpleShare</a>, my Bluetooth LE (CoreBluetooth) mesh network sharing app, in Swift, using the new Multipeer Connectivity framework instead of Bluetooth. There were much more complicated things I needed to do in Obj-C, and the app couldn&rsquo;t be &ldquo;translated&rdquo; in the same way as the simpler apps just by changing to the new syntax, since Swift actually works differently in key ways than Obj-C does.</p>

<p>Things I learned about Swift:</p>

<ul>
<li>Optional variables: You can no longer have variables that aren&rsquo;t set or that are nil like you could in Obj-C. If you don&rsquo;t know what a variable is when the class is created, you have to make it an optional variable by putting a <code>?</code> after the type declaration.</li>
</ul>


<p>```objc
class MyClass {</p>

<pre><code>var mystring: String?
</code></pre>

<p>}
```
* Global variables: It seems that any variables you set within a class but outside of a function act like public parameters for that class and are accessible to read or set from other classes</p>

<ul>
<li><p>Calling functions from another class: You call a function from another class by writing the class name followed by a dot then the function name with its arguments, eg: <code>MyClass.someFunction(arg1,arg2)</code></p></li>
<li><p>Init functions are a special case: Instead of calling <code>MyClass.init(arg1,arg2)</code> like you would for any other function, just calling <code>MyClass(arg1,arg2)</code>
is how you can init an instance of a class.</p></li>
<li><p>Convenience init: If your init function requires arguments to create a class instance, you can create a second init method for convenience that creates an instance with default values.
<code>objc
class SimpleMesh {
  init(simpleMeshAppID: String) {
      self.simpleMeshAppID = simpleMeshAppID
      self.myItemIDs = ["first", "second", "third", "fourth", "fifth"]
  }
  convenience init() {
      self.init(simpleMeshAppID: "[NO ID]")
  }
}
</code></p></li>
</ul>


<p>In the afternoon, I made a plan with Jorge and Kyle to work on a mesh networking inspector to figure out the limitations of Multipeer Connectivity so that we can build a stable mesh networking messaging app. We decided to move forward on the project in Objective-C while continuing to learn Swift on the side so we can finish more quickly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 0]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/09/hacker-school-day-0/"/>
    <updated>2014-06-09T13:37:53-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/09/hacker-school-day-0</id>
    <content type="html"><![CDATA[<p>First day of Hacker School! It was amazing to meet so many people who shared interests and had new ideas about programming.</p>

<p>I had planned to get to work on Machine Learning and getting comfortable with neural networks, but since the announcement of the new Swift language for iOS, there was a lot of interest in diving into learning that.</p>

<p>I learned about algebraic data structures from some other Hacker Schoolers over lunch, which was cool. I could see the recursive tree structure being a useful way to set up a decision tree in another language and will have to learn more about whether the data structures available in some other programming languages would make the machine learning algorithms possible to be coded in a more obvious, intuitive way than they are generally set up in Python.</p>

<p>I got together with a group in the afternoon to learn about Swift and the new Playgrounds Apple introduced in XCode 6. Playgrounds are cool because you can copy a snippet of code you&rsquo;re working on and see how the variables are being set and the values are changing over time as it runs through a loop.</p>

<p>I paired with Denise on getting some Swift code working. We figured out the brand-new syntax for hooking up variables to Storyboard outlets so we could generate a simple app with a button and some labels that changed text. We learned that every variable in Swift is public, as opposed to Obj-C which lets you set only certain parameters to be accessible from other classes. Once we got things going, the syntax seems much simpler and faster than all of the boilerplate code you have to write to do the same things in Obj-C.</p>

<p>Later in the afternoon I worked on copying some simple demo apps I&rsquo;d written previously in Obj-C into Swift so I could get more comfortable with the new syntax. Translating the very basic apps was relatively straightforward.</p>

<p>Coolest thing from Day 0:
Emoji as variable and function names in Swift! Cutest language ever?</p>

<p>```objc
import UIKit</p>

<p>class MyViewController: UIViewController {</p>

<pre><code>@IBOutlet var 🐶: UILabel
var 😻 = "🐶🐷🐹🐰🐱"

@IBOutlet var 🐹: UIButton

override func viewDidLoad() {
    super.viewDidLoad()

    🐶.text = 😻

}

@IBAction func 🐭() {
    🐶.text = "🐰🐯🐵🐮🐨"
}
</code></pre>

<p>}</p>

<p>```</p>
]]></content>
  </entry>
  
</feed>
