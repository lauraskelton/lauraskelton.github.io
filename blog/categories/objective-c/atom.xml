<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-07-03T12:32:02-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 17: Objective-C Particulars and Conceptual Limits]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/07/02/hacker-school-day-17/"/>
    <updated>2014-07-02T21:24:58-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/07/02/hacker-school-day-17</id>
    <content type="html"><![CDATA[<p>I learned a bunch of little things about Objective-C today in the course of trying to write good tests for my Secret Handshake app.</p>

<p>After running into a bunch of unhelpful compiler errors, like <code>Member reference type 'struct_objc_class *' is a pointer</code>, I finally figured out the difference between a <code>+</code> and a <code>-</code> in an Objective-C method.</p>

<p>A <code>+</code> at the front of an Objective-C method indicates that it is a Class Method. That means that you don&rsquo;t need to call that method on a particular instance of the class- you can call it without ever having instantiated the class. For example,</p>

<p>```objc
+ (NSDictionary <em>)parseQueryString:(NSString </em>)query
{</p>

<pre><code>NSMutableDictionary *dict = [[NSMutableDictionary alloc] initWithCapacity:6];
NSArray *pairs = [query componentsSeparatedByString:@"&amp;"];

for (NSString *pair in pairs) {
    NSArray *elements = [pair componentsSeparatedByString:@"="];
    if ([elements count] == 2) {
        NSString *key = [[elements objectAtIndex:0] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
        NSString *val = [[elements objectAtIndex:1] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
        [dict setObject:val forKey:key];
        key = nil;
        val = nil;
    }
    elements = nil;
}
pairs = nil;
return dict;
</code></pre>

<p>}
```</p>

<p>I don&rsquo;t have to instantiate my <code>QueryParser</code> class in order to call this <code>parseQueryString:</code> method to parse a query string into a dictionary. Because the class instance doesn&rsquo;t need to exist for this method to be called, I&rsquo;m not allowed to use a reference to <code>self</code> or <code>self.someproperty</code> within a class <code>+</code> method, and it will throw a confusing compiler error if I try to do this. Because I normally use methods that operate on a particular class instance, I rarely use <code>+</code> methods. The <code>parseQueryString:</code> method doesn&rsquo;t necessarily need a <code>+</code> if I throw it into another class that might need to parse query strings. It only needs the <code>+</code> if I want it to be more modular, and put it into a convenient file full of self-contained methods I might use in many other classes, where it wouldn&rsquo;t make sense to instantiate some unused object on which to call the method before parsing my string.</p>

<p>I do absolutely need to use the plus when I&rsquo;m creating a class that&rsquo;s a singleton. For example,</p>

<p>```objc
+ (OAuthHandler *)sharedHandler
{</p>

<pre><code>static OAuthHandler *_sharedHandler = nil;
static dispatch_once_t onceToken;
dispatch_once(&amp;onceToken, ^{
    _sharedHandler = [[OAuthHandler alloc] init];

});

return _sharedHandler;
</code></pre>

<p>}
<code>``
Outside of the OAuthHandler class, I refer to</code>[OAuthHandler sharedHandler]<code>, which will either create a single shared instance of the OAuthHandler class for my app, or will return the already-created instance of OAuthHandler. This is a convenient way for me to have one OAuthHandler referenced by several other classes without complicated dependencies. Because the</code>sharedHandler<code>method actually creates the OAuthHandler class instance, it can't be called on an instance I already have a reference to, so it needs to have a</code>+`.</p>

<p>For most other types of methods I&rsquo;d use in Objective-C, it makes sense to use a <code>-</code>. When I need to run a method that references the specific properties of that instance of the class, I need to use the <code>-</code> type of method. For example, I would use a <code>-</code> method if I needed to configure a view with a specific state.</p>

<p>```objc
&ndash; (void)configureView {</p>

<pre><code>// Update the user interface for the detail item.
if (self.event) {
    self.nameLabel.text = [NSString stringWithFormat:@"%@ %@",self.event.hackerSchooler.first_name, self.event.hackerSchooler.last_name];
    self.batchLabel.text = self.event.hackerSchooler.batch;
    self.profileImageView.image = [UIImage imageWithContentsOfFile:self.event.hackerSchooler.photoFilePath];

}
</code></pre>

<p>}
<code>``
Because I need to access this particular view controller instance's properties, such as</code>self.event.hackerSchooler<code>, in order to display this particular person's name and photo, I must use the</code>&ndash;` to indicate that this is an Instance Method, and not a Class Method that could be called without a class instance that has specific property settings.</p>

<p>I also learned the difference between a <code>*</code> and a <code>&amp;</code> in Objective-C, and a little bit about how pointers work. Whenever I name an object in Objective-C, I write something like <code>NSString *someString</code>. This <code>*</code> indicates that <code>someString</code> is a pointer to an <code>NSString</code> type object. If I create two strings and try to directly compare their pointers, it will only return true if the pointers are pointing to the exact same instance of the object at the same memory location.</p>

<p>```
NSString <em>firstStringPointer = @&ldquo;hello world&rdquo;;
NSString </em>secondStringPointer = @&ldquo;hello world&rdquo;;
if (firstStringPointer == secondStringPointer) {</p>

<pre><code>return YES;
</code></pre>

<p>}
```
This string pointer comparison will return false, even though the strings are identical, because they are two different string objects. It&rsquo;s like, we are checking if two people are the same person, and these two string pointers are the names of identical twins instead of nicknames for the same person, so it will answer that No, this is not the same person, even though the two people are identical.</p>

<p>```objc
if ([firstStringPointer isEqualToString:secondStringPointer]) {</p>

<pre><code>return YES;
</code></pre>

<p>}
```
That&rsquo;s why we have to use the above type of comparison method if we want to check if two objects have identical properties, instead of whether they are the exact same instance of the object, which is asking a fundamentally different question. Like asking about the identical twins, do these people look exactly the same, and have all of the same features? Yes, they do.</p>

<p>The <code>&amp;</code> I only use when I&rsquo;m declaring an error that I pass to a method which might or might not return an error. I don&rsquo;t instantiate the error, but I use the <code>&amp;</code> to create a reference to a location in memory where an <code>NSError</code> object might be put in the future, if the method needs to do so.</p>

<p>```objc
NSError *error;</p>

<pre><code>if (![self.fetchedResultsController performFetch:&amp;error]) {
    NSLog(@"Unresolved error: %@", error);
}
</code></pre>

<p><code>``
As I understand it, if the</code>performFetch<code>method fails, it will create an</code>NSError<code>object and place it at the memory location referenced by</code>&amp;error<code>. I can subsequently access the</code>NSError<code>object by using the</code>error<code>pointer. If it succeeds, then</code>error<code>is</code>nil`.</p>

<p>I also enjoyed reading <a href="http://www.rntz.net/post/2014-07-02-option-in-dynlangs.html">rntz&rsquo;s post about Option and Null in dynamic languages</a>. I had some trouble following the explanations in Haskell, as I&rsquo;m unfamiliar both with the syntax and with the concepts in Haskell that don&rsquo;t exist in Objective-C.</p>

<p>Ironically, this is part of the point rntz was trying to make (in Appendix A) about how <a href="http://en.wikipedia.org/wiki/Sapir-Whorf_Hypothesis">different programming languages can limit the way you conceive of the world</a>, similarly to how native speakers of a language that conflates the colors Blue and Green have trouble visually differentiating the two colors, since their language only creates one cognitive category for the two.</p>

<p>After <a href="https://github.com/aeyakovenko">Anatoly</a> explained a few things about Haskell syntax, as well as the <code>Maybe</code> datatype, which seems to work similarly to <code>?</code> Optionals in Swift, I followed the explanation a lot better, and it was interesting to recognize that because of the way Objective-C dictionaries are structured, I conceptually conflate a key being set to <code>nil</code> as being the same as a key not being in the dictionary at all, (actually, the way to check in an <code>NSDictionary</code> if a key exists is to see if <code>[dictionary objectForKey:@"someKey"]</code> is <code>nil</code>) and how this could be seen as actually two distinct ideas: One, that the key does exist, but it is <code>nil</code>, and two, that the key does not exist in the dictionary.</p>

<p>The congnitive limits that can come about through the limitations of whichever programming language in which you first reach fluency is something I&rsquo;ve been struggling with as I&rsquo;m learning Swift after working within the confines of Objective-C for so long. I can simply translate the way I&rsquo;ve implemented something in Objective-C into the new syntax that Swift introduces, but this severely limits my ability to take advantage of much more precise and efficient tools that Swift has with which I&rsquo;m completely unfamiliar. I&rsquo;m excited about getting better at native Swift tools as I can see this expanding the way I conceptualize code, which would give me tools to be a better programmer in the future in many other languages more powerful than Objective-C.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 16: ASCII Photo Booth and Unit Testing]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/07/01/hacker-school-day-16/"/>
    <updated>2014-07-01T20:55:33-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/07/01/hacker-school-day-16</id>
    <content type="html"><![CDATA[<p>I added a filter to my photo booth that turns each photo into an ASCII art image, then deployed the GIF Photo Booth mode I wrote to the live <a href="http://blockpartyapp.com">Block Party</a> server.</p>

<p>It was amazing how easy it was to extend the Photo Booth filter set to add this new filter. I&rsquo;m using the Mosaic filter from <a href="https://github.com/BradLarson/GPUImage">GPUImage</a>, an open-source Objective-C framework that runs filtering calculations in Open-GL for fast image processing. I used an image containing 64 tiles ranging from lightest to darkest, and the calculations in the Open-GL mosaic filter took a stepped luminosity and selected which tile to display.</p>

<p>```objc
(
 precision highp float;</p>

<p> varying vec2 textureCoordinate;</p>

<p> uniform sampler2D inputImageTexture;
 uniform sampler2D inputImageTexture2;</p>

<p> uniform vec2 inputTileSize;
 uniform vec2 displayTileSize;
 uniform float numTiles;
 uniform int colorOn;</p>

<p> void main()
 {</p>

<pre><code> vec2 xy = textureCoordinate;
 xy = xy - mod(xy, displayTileSize);

 vec4 lumcoeff = vec4(0.299,0.587,0.114,0.0);

 vec4 inputColor = texture2D(inputImageTexture2, xy);
 float lum = dot(inputColor,lumcoeff);
 lum = 1.0 - lum;

 float stepsize = 1.0 / numTiles;
 float lumStep = (lum - mod(lum, stepsize)) / stepsize; 

 float rowStep = 1.0 / inputTileSize.x;
 float x = mod(lumStep, rowStep);
 float y = floor(lumStep / rowStep);

 vec2 startCoord = vec2(float(x) *  inputTileSize.x, float(y) * inputTileSize.y);
 vec2 finalCoord = startCoord + ((textureCoordinate - xy) * (inputTileSize / displayTileSize));

 vec4 color = texture2D(inputImageTexture, finalCoord);   
 if (colorOn == 1) {
     color = color * inputColor;
 }
 gl_FragColor = color; 
</code></pre>

<p> }<br/>
);
```</p>

<p><img class="center" src="/images/posts/16hackercamtiles.png" title="&lsquo;ASCII Tiles&rsquo;" ></p>

<p>I grouped the ASCII filter with a filter I already had that tends to increase facial feature definition, and that seemed to make the ASCII images a bit clearer.</p>

<p>It was so fast to implement the ASCII filter that I had time to do both a light and a dark version, and I was happy to see that I had set up the Block Party app intelligently enough that the filtering menu extended automatically once the new filters were added, and everything just worked!</p>

<p><img class="center" src="/images/posts/16asciiboothgif.gif" title="&lsquo;ASCII Booth GIF&rsquo;" ></p>

<p>The GIF mode of the photo booth takes 4 photos in rapid succession, saves them to the camera roll, combines them into a GIF animation, and combines them into a movie file playable on the iPhone (as GIF animations are not supported outside of the browser), then it uploads everything to the server with metadata indicating to the app that it is an animated GIF instead of a JPG so it can be displayed accordingly.</p>

<p>In the process of working with GPUImage&rsquo;s Mosaic filter, I discovered a small bug in the project, and with <a href="https://github.com/akaptur">Allison</a>&rsquo;s help I submitted <a href="https://github.com/BradLarson/GPUImage/pulls">my first Pull request</a>! It was good to get some practice working with a large existing code base and working to improve a small part of it.</p>

<p>In the evening, I learned how to use <a href="https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/UnitTestYourApp/UnitTestYourApp.html">XCode&rsquo;s built-in Testing framework</a>.</p>

<p><img class="center" src="/images/posts/16xcodetesting.png" title="&lsquo;XCode Testing Framework&rsquo;" ></p>

<p>In the process of rewriting my code so that it was easier to test, everything was just better. The classes and methods naturally became more modular and reusable, it was easy and quickly repeatable to test all of the edge cases, and my code seemed much clearer. I learned that testing can be seen as a sort of specification set for the code and its features. If the class has some expected properties, or a function is expected to behave in a particular way, I can in a way &ldquo;define&rdquo; that class&rsquo;s features by the way that I write the expected outputs of the test functions, sort of like an outline for how I expect my program to behave. I actually think it would help me to be clearer and more organized in the way I develop my code if I start writing these feature-specification tests before I even write the methods and classes they are testing, and build the method code to match the spec, instead of the other way around. This may not always be feasible if something needs to be mocked up very quickly, but I think in general this is how I will try to work moving forward.</p>

<p>This work with testing feels like great progress towards the goal of becoming a better programmer. I&rsquo;m going to work on rewriting several of my existing projects in this way as it seems to add stability and clarity without having to spend so much time manually checking that everything works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 10: OAuth Challenges and Setting Goals]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10/"/>
    <updated>2014-06-23T20:56:24-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10</id>
    <content type="html"><![CDATA[<p>I put a ton of time in on the <a href="https://github.com/lauraskelton/secrethandshake">Secret Handshake iOS app</a> in perfecting the OAuth login procedure. Originally, I was using an OAuth library from Google to open the Hacker School login page in a webview within the app. The problem with this was that it couldn&rsquo;t take advantage of Safari&rsquo;s auto fill password functionality, or if you were already logged in on the browser.</p>

<p>I first tried to use the iOS library to post the authentication code request to the Hacker School website on Safari. Unfortunately, an iOS app is unable to do a <code>POST</code> request to another app. I ended up writing a simple PHP file on my server that I redirect the user to from the Secret Handshake app. The PHP file handles sending the user to the Hacker School login page and then sending a <code>POST</code> request to get an access token from Hacker School. It then sends the returned token back to the Secret Handshake app via a custom URL scheme <code>secrethandshake://oauth</code> and an attached query string containing the token.</p>

<p><img class="center" src="/images/posts/10oauthflow.png" title="&lsquo;OAuth 2.0 Process&rsquo;" ></p>

<p>In the end, after struggling to find any examples of what a successful OAuth request should look like, and to find a working library I could use to get things up and running, I am not using any 3rd party libraries at all with my OAuth implementation, the code handling the OAuth requests is relatively brief, and I even managed to get token refreshing up and running to avoid repeated logins.</p>

<p>This is the PHP OAuth manager file in its entirety.</p>

<p>```php</p>

<p>&lt;?php</p>

<pre><code>/**
 * Server OAuth Handler for iOS App
 *
 * iOS App launches Safari to this page on SecretHandshake server
 * This page sends the user to the Hacker School login page to get authorization code
 * It takes the auth code and sends it back to the server to get an access token
 * It redirects the user back to the app via a custom URL scheme
 * and sends the access and refresh tokens as query parameters to the app
 * which stores them for future use.
 */

function getAuthenticationUrl($auth_endpoint, $client_id, $redirect_uri)
{
    $parameters = array(
                                    'response_type' =&gt; 'code',
                                    'client_id'     =&gt; $client_id,
                                    'redirect_uri'  =&gt; $redirect_uri
                                    );
    return $auth_endpoint . '?' . http_build_query($parameters, null, '&amp;');
}

function getAccessToken($token_endpoint, $grant_type, array $parameters, $client_id, $client_secret)
{
    $parameters['grant_type'] = $grant_type;
    $parameters['client_id'] = $client_id;
    $parameters['client_secret'] = $client_secret;

    $http_headers = array();

    return executeRequest($token_endpoint, $parameters, 'POST', $http_headers, 0);
}

function executeRequest($url, $parameters = array(), $http_method = 'POST', array $http_headers = null, $form_content_type = 0)
{

    $postBody = http_build_query($parameters);
    $requestHttpContext["content"] = $postBody;
    $requestHttpContext["method"] = 'POST';

    $options = array( 'http' =&gt; $requestHttpContext );
    $context = stream_context_create( $options );

    $response = file_get_contents($url, false, $context);

    return $response;

}

$client_id = 'my-client-id';
$client_secret = 'my-client-secret';
$authorization_endpoint = 'my-authorization-endpoint';
$redirect_uri = 'my-redirect-uri';
$token_endpoint = 'my-token-endpoint';


if (!isset($_GET['code']))
{
    $auth_url = getAuthenticationUrl($authorization_endpoint, $client_id, $redirect_uri);
    header('Location: ' . $auth_url);
    die('Redirect');
} else {
    $params = array(
                    'code' =&gt; $_GET['code'],
                    'redirect_uri' =&gt; $redirect_uri
                    );

    $response = getAccessToken($token_endpoint, 'authorization_code', $params, $client_id, $client_secret);

    $info = json_decode($response, true);
    $querystring = http_build_query($info);
    $appurl = 'secrethandshake://oauth' . '?' . $querystring;
    header('Location: ' . $appurl);
    die('Redirect');

}
</code></pre>

<p>?></p>

<p>```</p>

<p>On the iPhone, I capture the custom URL query string in the App Delegate.</p>

<p>```objc
&ndash; (BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{</p>

<pre><code>// secrethandshake://oauth?access_token=324235253442

if ([[url host] isEqualToString:@"oauth"]) {
    // parse the authentication code query
    [self authorizeFromExternalURL:url];
}

return YES;
</code></pre>

<p>}</p>

<ul>
<li>(void)authorizeFromExternalURL:(NSURL *)url
{
  [[OAuthHandler sharedHandler] handleAuthTokenURL:url];
}
```</li>
</ul>


<p>Then I parse the query string in my OAuth Handler and store the access token and the refresh token in my user defaults.</p>

<p>``` objc
&ndash;(void)handleAuthTokenURL:(NSURL *)url
{</p>

<pre><code>// handle query here
NSDictionary *dict = [self parseQueryString:[url query]];

if ([dict objectForKey:@"error"] != nil) {
    [self.delegate oauthHandlerDidFailWithError:[dict objectForKey:@"error"]];
} else if ([dict objectForKey:@"access_token"] != nil &amp;&amp; [dict objectForKey:@"refresh_token"] != nil) {
    // Save the access token and refresh token
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];

    [self.delegate oauthHandlerDidAuthorize];
} else {
    [self.delegate oauthHandlerDidFailWithError:@"Access token not found. Failed to log in to Hacker School."];
}
</code></pre>

<p>}</p>

<ul>
<li><p>(NSDictionary <em>)parseQueryString:(NSString </em>)query
{
  NSMutableDictionary <em>dict = [[NSMutableDictionary alloc] initWithCapacity:6];
  NSArray </em>pairs = [query componentsSeparatedByString:@&ldquo;&amp;&rdquo;];</p>

<p>  for (NSString <em>pair in pairs) {
      NSArray </em>elements = [pair componentsSeparatedByString:@&ldquo;=&rdquo;];
      NSString <em>key = [[elements objectAtIndex:0] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
      NSString </em>val = [[elements objectAtIndex:1] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</p>

<pre><code>  [dict setObject:val forKey:key];
  elements = nil;
  key = nil;
  val = nil;
</code></pre>

<p>  }
  pairs = nil;
  return dict;
}</p></li>
</ul>


<p>```</p>

<p>To refresh the token, I just post to Hacker School&rsquo;s <code>/oauth/token</code> page with the query string <code>grant_type=refresh_token&amp;refresh_token=my_refresh_token</code> along with my client id and client secret, and store the new access token to sign my queries.</p>

<p>```objc
&ndash;(void)refreshToken:(id)sender
{</p>

<pre><code>NSURL *tokenURL = [NSURL URLWithString:@"https://www.hackerschool.com/oauth/token"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:tokenURL];

[request setHTTPMethod:@"POST"];
NSString *postString = [NSString stringWithFormat:@"grant_type=refresh_token&amp;client_id=%@&amp;client_secret=%@&amp;refresh_token=%@", kMyClientID, kMyClientSecret, [[NSUserDefaults standardUserDefaults] objectForKey:kSHRefreshTokenKey]];
[request setHTTPBody:[postString dataUsingEncoding:NSUTF8StringEncoding]];

[NSURLConnection sendAsynchronousRequest:request
                                   queue:[NSOperationQueue mainQueue]
                       completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {

                           NSString *responseBody = [ [NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

                           NSLog(@"response: %@", responseBody);

                           NSData *jsonData = [responseBody dataUsingEncoding:NSUTF8StringEncoding];
                           NSError *e;
                           NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&amp;e];

                           if (e != nil) {
                               NSLog(@"error: %@", e);
                               [self launchExternalSignIn:nil];
                           } else if ([jsonDict objectForKey:@"error"] != nil){
                               NSLog(@"error refreshing token: %@", [jsonDict objectForKey:@"error"]);
                               [self launchExternalSignIn:nil];
                           } else {
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];
                               [self.delegate oauthHandlerDidAuthorize];
                           }

                       }];
</code></pre>

<p>}
```</p>

<p>It took a lot of time to get this up and running due to the lack of clear documentation on OAuth 2.0 requests, but I&rsquo;m happy with how it turned out and very happy to have gotten rid of all of the external libraries. Rewriting the entire thing in a concise way let me fully understand everything that was happening, which makes the debugging process so much simpler. Hopefully this will help someone else struggling with OAuth login from an app. The source code is available <a href="https://github.com/lauraskelton/secrethandshake">on GitHub</a>.</p>

<p>Testing the app was exciting. Several people loaded the app onto their phones and logged in, and we were all getting alerts with each others' photos, which was pretty cool. The background notifications of nearby users were working perfectly. I&rsquo;m looking into setting up <a href="https://github.com/Instrument/Vicinity">a custom implementation of iBeacon using Bluetooth LE in background mode</a> that will allow the phones to broadcast periodically in the background as well, so that no one needs to have the app open to be notified that someone is nearby.</p>

<p><img class="center" src="/images/posts/10notifications.jpg" title="&lsquo;SecretHandshake Notifications&rsquo;" ></p>

<p>I had a great conversation with <a href="https://github.com/thomasballinger">Tom</a> in the morning about what I&rsquo;ve been working on at Hacker School and what I should focus on for the coming weeks to get the most out of it. I left feeling pretty good about the various directions I&rsquo;ve taken and how much/what/how fast I&rsquo;ve been learning. I&rsquo;m happy with the balance I&rsquo;ve had between <a href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/">iOS projects</a>, totally new projects (<a href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/">Arduino</a> and cool <a href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/">machine learning</a>/<a href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/">neural network</a> stuff), learning new languages (<a href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/">Swift!</a>), and programming basics (getting familiar with the <a href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/">data structures and algorithms</a> basics that would have been covered in CS courses had I taken that path).</p>

<p>I came away with some great new ideas for things that would be good and/or fun to focus on in the coming weeks and clearer goals for the rest of Hacker School. A side effect of being around so much creative energy and cool projects is that you can get overwhelmed with fear of missing out on what everyone else is doing, even if that&rsquo;s not what you came here to work on. Part of that is a fun and enriching distraction, like Arduino, and part of it just ends up being noise that confuses your focus. If a bunch of people are excited about writing compilers and learning Rust, should I be doing those things too?</p>

<p>I have a few ideas for some quick iOS apps that I&rsquo;d like to try to implement in Swift, that are more of a game/drawing style of app that use more math, graphics, and touch interface than the social utility apps I&rsquo;ve written in the past, which tended to take advantage of Apple&rsquo;s great built in user interface elements more than custom graphics and animations. Looking forward to the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 8: Secret Handshake App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T20:53:29-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>I finished a <a href="https://github.com/lauraskelton/secrethandshake">new iPhone app</a> today!! It was inspired by someone at the Swift meetup saying that Hacker School was like the new Freemasons &ndash; some kind of secret society that instantly connected you with other people. I had such a good time talking to some Hacker School alums I hadn&rsquo;t met before, that I thought it would be good to have an app that would let me know at future meetups whether there were any other Hacker Schoolers in the room.</p>

<p>In iOS 7, Apple introduce iBeacons, a proximity beacon built on top of Bluetooth LE. IPhones can scan for iBeacon signals, and display special hyperlocal information when they come within range of one, such as at a store display or at a particular museum exhibit. The iBeacon signal can even wake up an iPhone that is inactive with an alert and a notification banner.</p>

<p><img class="center" src="/images/posts/8ibeacon.jpg" title="&lsquo;ibeacon&rsquo;" ></p>

<p>The really exciting thing is that iPhones can also act as iBeacon emitters as well as receivers. You can send out an iBeacon signal from your phone while also scanning for similar signals from other people&rsquo;s phones.</p>

<p>```objc
&ndash; (void)initBeacon {</p>

<pre><code>self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:uuid
                                                            major:1
                                                            minor:userID
                                                       identifier:@"someregion"];
</code></pre>

<p>}</p>

<ul>
<li>(void)transmitBeacon
{
      self.beaconPeripheralData = [self.beaconRegion peripheralDataWithMeasuredPower:nil];
      self.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self
                                                                       queue:nil
                                                                     options:nil];
}
```</li>
</ul>


<p>I set up my app so that each user&rsquo;s phone emits an iBeacon signal that includes their userID. Each phone also scans for other signals, and if it finds that of another Hacker Schooler&rsquo;s phone, it sends an alert to the scanner&rsquo;s phone and downloads a profile photo, name, and batch of the nearby person. That way, you could make sure to stop by and chat with that person at a conference or meetup.</p>

<p>So far it seems to be working well, but I definitely need beta testing help from some other Hacker School folks who wouldn&rsquo;t mind giving some feedback. I have it up on TestFlight if you have an iPhone and time to test it out! <a href="http://tflig.ht/1stcVLG">http://tflig.ht/1stcVLG</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 7: Mesh Networking, Cryptocurrencies, and iBeacons]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T08:15:31-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I started off working on my beer neural network a bit more. I figured out part of the problem that was giving me data that didn&rsquo;t feel right, which had to do with changing the inputs to give an incomplete picture of the outputs to force the neural network to draw more meaningful connections between the missing beer ratings and the existing beer ratings. Basically, I erased half of the beer ratings from each user from the &ldquo;input&rdquo; dataset, and left the &ldquo;output&rdquo; dataset the same, so the network would have to actually predict and couldn&rsquo;t cheat by just figuring out how to compress the ratings down to 10 nodes and then decompress them back to 900 nodes using tricky math.</p>

<p><img class="center" src="/images/posts/7neuralnetwork.png" title="&lsquo;neural network&rsquo;" ></p>

<p>Now that the neural network is actually learning, I can&rsquo;t seem to get my error rate down to a level I&rsquo;m happy with. I&rsquo;m going to keep working on tweaking the parameters of the neural network to see if I can get it to output something cool that I can share.</p>

<p>While my computer was crunching away at reducing the neural network&rsquo;s error, I took a coffee break down the street with a few friends, which led to a fascinating conversation that lasted a couple of hours, mainly about Mesh Networking and Cryptocurrencies. I learned a lot about how different cryptocurrencies work, including Namecoin, which is linked to your domain name and can validate you, and another cryptocurrency that includes its own programming language that can have actually have contracts embedded in code within a transaction.</p>

<p><img class="center" src="/images/posts/7dogecoin.png" title="&lsquo;dogecoin&rsquo;" ></p>

<p>We went down a pretty complicated rabbit hole of trying to figure out if there was a way to solve some problems in Mesh Networking by linking it with a cryptocurrency, either to validate the identity of nodes to allow secure communication without a centralized server (replacing SSL), or to pay central nodes for traffic they routed in order to reward mesh network users to be good citizens and stay connected to the mesh routing messages between other nodes even when they weren&rsquo;t personally using it.</p>

<p><img class="center" src="/images/posts/7torcoin.jpg" title="&lsquo;torcoin&rsquo;" ></p>

<p>We ended up talking about an idea to combine a social network with mesh network routing or  secure direct connections by using an app with Bluetooth LE to confirm in person that each person in my inner circle is who they say they are. Each of those people could do the same thing for their trusted friends, and then we would have a network of nodes each with a certain degree of social separation and therefore degree of trustedness which we could use to priorities routing of messages.</p>

<p><img class="center" src="/images/posts/7weboftrust.png" title="&lsquo;web of trust&rsquo;" ></p>

<p>We left with some interesting ideas and a bunch of reading to do on Mesh Networking. It turns out that the idea of compensating for node bandwidth was discussed in <a href="http://dedis.cs.yale.edu/dissent/papers/hotpets14-torpath.pdf">a recent paper about TorCoin</a>, which would be &ldquo;mined&rdquo; by routing traffic over the Tor network, and then could be sold in altcoin exchanges, encouraging good behavior on the network. We also decided to read through <a href="https://en.wikipedia.org/wiki/Wireless_mesh_network#Routing_protocols">an overview of the many previously attempted mesh network routing protocols</a> to get a clearer picture of benefits and pitfalls of different approaches. There is also <a href="http://www.amazon.com/Linked-The-New-Science-Networks/dp/0738206679">a book that discusses the inherent properties of many types of networks</a> that sounds like an interesting read.</p>

<p><img class="center" src="/images/posts/7meshnetwork.jpg" title="&lsquo;mesh network&rsquo;" ></p>

<p>I was totally re-energized by this discussion, and decided to figure out iBeacons so I can make a fun Objective-C app for Hacker School. When I went to the Swift meetup at Etsy, almost everyone I met was excited about Hacker School, and I instantly had something to talk about with the new people I was meeting. On top of that, a few Hacker School alumni came out to the bar in Dumbo after the meetup, which was very cool. The app idea was inspired by a comment someone made that night that Hacker School was like the new Freemasons.</p>

<p><img class="center" src="/images/posts/7ibeacon.jpg" title="&lsquo;ibeacons&rsquo;" ></p>

<p>I finished up the nitty gritty late into the evening, and should have a fully working app ready for testing tomorrow!</p>
]]></content>
  </entry>
  
</feed>
