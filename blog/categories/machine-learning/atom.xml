<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Machine-Learning | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/machine-learning/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-06-16T09:51:49-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 4]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/"/>
    <updated>2014-06-13T18:18:21-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4</id>
    <content type="html"><![CDATA[<p>I continued on the Machine Learning path by starting work on <a href="http://neuralnetworksanddeeplearning.com">Neural Networks and Deep Learning</a> to deepen my understanding of Neural Nets.</p>

<p>I started working on Neural Networks in the <a href="http://shop.oreilly.com/product/9780596529321.do">Programming Collective Intelligence</a> book a few months ago as a way to train a search engine to learn to return better results for a query. The explanation of how Neural Networks were really operating, and why the algorithms were laid out the way they were, was an extremely brief page or two. I got the basic idea of a layer of inputs that fed through a network to return outputs, and then backpropagated based on training data to correct mistakes and improve over time. I didn&rsquo;t understand what was going on with the Hidden Layer, the nodes between the input and output layers, or what was really happening with the weights and where the complicated formula for calculating the new weight of each node was coming from.</p>

<p>The new Neural Networks and Deep Learning book fills in that deeper understanding so well! The pace is perfect, and the author takes the time to pause to explain each step and each formula used in detail. He starts by explaining the Perceptron, the simplest node component of a Neural Network which has been around for a while, and how it could be used to create a similar logical path as a NAND gate, which meant that it can be used for any type of logical calculation since any type of computation can be built up from NAND gates.</p>

<p><img class="center" src="/images/posts/4neuralnet_perceptron.png" title="&lsquo;perceptron acting as NAND gate&rsquo;" ></p>

<p>The trouble with Perceptrons is that the inputs and outputs are all binary, and so when it comes to training the network to improve results, the changes are sudden instead of gradual when the weights and biases of a node are adjusted (eg. the output suddenly flips from 1 to 0 instead of decreasing gradually). So, in order to learn, Neural Networks need to use a variation of the Perceptron called a Sigmoid Neuron, which is able to take inputs that range from 0 to 1, and outputs a number ranging from 0 to 1. Instead of a jump from 0 to 1 when the inputs * weights are greater than the bias, the sigmoid function takes the weights of all the inputs and the bias and outputs a number scaled smoothly between 0 and 1, so that incremental changes to the network&rsquo;s weights and biases will make small improvements to the results that can then be optimized.</p>

<p><img class="center" src="/images/posts/4neuralnet_sigmoid.png" title="&lsquo;sigmoid neuron reflects small changes&rsquo;" ></p>

<p>I was so excited by this section, because the sigmoid function that was unclearly derived in my earlier Neural Network explorations made perfect sense after this explanation. I got excited and actually graphed out the sigmoid function before I saw his graph a little further down because I saw that it would output larger values scaled to a max of 1 and smaller values scaled to a min of 0 for the inputs. The tone of this book is wonderful in the way that a good professor can explain conversationally a complicated topic and make everything suddenly make perfect sense.</p>

<p>I&rsquo;m embarrassed to admit that I got a bit lost with the math in the next section. I took Multivariable Calculus, Linear Algebra, and Partial Differential Equations when I was still in high school, and since I haven&rsquo;t used most of that math since then it&rsquo;s a bit rusty. (Though, side note, I was pleasantly surprised to make use of MV Calc for an architecture project that involved making calculations for projecting a flat print around a spherical globe.) I tracked down my high school textbooks to review some of the concepts I couldn&rsquo;t remember clearly, and learned that most of the textbooks are now available in full online! I&rsquo;m looking forward to reviewing my <a href="https://archive.org/stream/Calculus_643/Spivak-Calculus">Calculus book</a> and <a href="https://archive.org/stream/LinearAlgebra/Hadley-LinearAlgebra">Linear Algebra textbook</a> to quickly relearn a few things, as well as browsing through some other math topics that have always interested me, such as Non-Euclidean Geometry. It&rsquo;s a challenge to stay focused when there are so many amazing things to learn.</p>

<p>The book has a fantastic explanation of what is happening with the hidden layers of a Neural Network, and some overview of what features the hidden nodes might represent.</p>

<p><img class="center" src="/images/posts/4neuralnet_digits.png" title="&lsquo;neural network digit classifier&rsquo;" ></p>

<p>After setting up a certain number of layers and specifying the number of hidden nodes, you assign random weights and biases to each node in the network to begin. You then run the inputs through the network and check the outputs against the known correct answers. Using an optimization method similar to those used in other Machine Learning algorithms, you then attempt to find a local minimum of the error calculation for the output vs. the known answers. In order to avoid doing zillions of calculations for a large data set, you can use an optimization called Stochastic Gradient Descent to pick a random subset of inputs and optimize only on those, which with a large enough subset should approximate the values of the full dataset with a fraction of the processing time.</p>

<p>Super excited to continue working through this book and to learn to implement custom neural network classifiers in code!</p>

<p><img class="center" src="/images/posts/4neuralnet_decider.png" title="&lsquo;neural network decision maker&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 3]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/"/>
    <updated>2014-06-12T20:55:09-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3</id>
    <content type="html"><![CDATA[<p>I started working on fixing some of the bugginess of the Multipeer Connectivity framework in ObjC in the morning. I tried to hack it so that Multipeer would continue working when the app was in background mode (not currently possible due to Apple&rsquo;s imposed limitations), so that we could have a count of how many people were connected to the network.</p>

<p>I also spent some time working on a problem that seems to be coming from issues with lower-level Bluetooth LE frameworks, where there are errors when trying to reconnect to the same peer multiple times after disconnecting. The issues are linked, because there can be problems rejoining the network after the backgrounded app is opened again and tries to reconnect. I suspect it has to do with sessions not fully closing from the first session when the device attempts to start a new session.</p>

<p>I got a much deeper understanding of the capabilities of Multipeer while I was walking through the code handling the sessions and peers within the network, but in the end I concluded that Multipeer is still pretty buggy. I&rsquo;m reconsidering starting with our own implementation of a mesh network in Bluetooth LE instead of using Multipeer, since it seems like Multipeer doesn&rsquo;t really allow us to avoid some of the tricky issues we were handling in CoreBluetooth, and possibly the higher-level framework gives us less power to debug and work around some of the problems. CoreBluetooth also possibly avoids some of the issues with Multipeer not working in background mode, since we can set a Bluetooth LE message to broadcast in the background, and detecting a nearby iBeacon should be able to &ldquo;wake up&rdquo; an app even if it has been closed by the user. Plus I&rsquo;ve already played around with CoreBluetooth with my <a href="https://github.com/lauraskelton/simple-share">SimpleShare</a> Bluetooth LE Local Sharing project.</p>

<p>I switched tasks to continue working through <a href="http://shop.oreilly.com/product/9780596529321.do">Programming Collective Intelligence</a>, an amazing book on Machine Learning algorithms. It was wonderful to get into working on Machine Learning again, since it&rsquo;s what I had originally intended to focus on at Hacker School before I was swept up with Swift.</p>

<p><img class="center" src="/images/posts/pci.jpg" title="&lsquo;programming collective intelligence&rsquo; &lsquo;programming collective intelligence&rsquo;" ></p>

<p>I worked through the chapter on Non-Negative Matrix Factorization today, which was actually way more awesome than it sounds. You can scan through a bunch of articles and get word counts, just like in an earlier chapter on document classification using a naive Bayesian classifier. The Bayesian classifier used a weighted probability based on the word counts to predict which category a document belonged to out of a set of predetermined category options, and based on initial training data.</p>

<p>Non-Negative Matrix Factorization is WAY cooler! It starts with the same word-count information for each article set up in a matrix, then factors the matrix into two matrices that, multiplied together, would be approximately equal to the original matrix (articles vs. words). The two factor matrices give you some really neat information about the data set, and they actually extract what the features (categories/themes) are automatically given a set number of desired features. The features can be described by which words are most likely to appear in them. So the first factor matrix has a column for each word and a row for each feature/theme/category, with each number in the matrix being the likelihood that a particular word belongs to that theme, and the second factor matrix has a row for each article and a column for each feature, and the numbers in the matrix correspond to the weight of each theme in that article.</p>

<p><img class="center" src="/images/posts/nmf1.jpg" title="&lsquo;non-negative matrix factorization&rsquo;" ></p>

<p><img class="center" src="/images/posts/nmf2.jpg" title="&lsquo;non-negative matrix factorization&rsquo;" ></p>

<p><img class="center" src="/images/posts/nmf.jpg" title="&lsquo;non-negative matrix factorization&rsquo;" ></p>

<p>It&rsquo;s very cool to see how some clever math and optimization can actually allow the algorithm to come up with its own categories/classes of articles (or anything else you&rsquo;re studying), without having any training data or input from the user about what is expected.</p>

<p>I have one more chapter in the book I&rsquo;ve been working through that I&rsquo;m excited to get through tomorrow, on Genetic Programming, which is all about writing programs that can actually modify themselves and evolve the code itself. Super cool!</p>

<p>I&rsquo;m also looking forward to getting started on learning about Neural Networks more in-depth. I&rsquo;d really like to understand on a deep conceptual level what neural nets are really doing, and this online book looks like a great way to get started. <a href="http://neuralnetworksanddeeplearning.com">http://neuralnetworksanddeeplearning.com</a></p>

<p>I ended the day by doing a short presentation about a beer clustering project I did a couple of months ago in Python. My beer recommendations iOS app generated over 200,000 beer ratings, which has been a pretty cool data set to play around with. I started by scattering beers randomly in a 2 dimensional grid, then moved the points to try to get the distances between each beer to approximate the Pearson distance I calculated by comparing user ratings of all of the beers to find which were most similar (and so should be closer together on the beer map), and which beers were most different, and so should be far apart. I figured out some tricks to break out of the local minimums I kept running into, and ended up with a <a href="http://beerchooser.com/beermap/beergmap.html">pretty cool map</a> of many different beers and how they are related by user preference to each other. (The green color represents IBU &ndash; International Bittering Units, a measure of bitterness/hoppiness in beer, and the blue color represents ABV, or alcohol content, of each beer.)</p>

<p>It was my first time ever presenting a coding project I&rsquo;d done in front of a group of people, and it was a cool experience to share something I&rsquo;d been working on with a group that could follow what I&rsquo;d done and understand what was neat about it. It was great practice for me in talking about my coding work to a larger group, which I have done much more with my design work than with my programming projects.</p>
]]></content>
  </entry>
  
</feed>
