<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bluetooth-LE | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/bluetooth-le/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-07-01T11:18:58-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 15: Mesh Messaging and ASCII Photo Booths]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15/"/>
    <updated>2014-06-30T20:30:06-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15</id>
    <content type="html"><![CDATA[<p>I completely reworked my ad-hoc mobile networking app. It had been set up so that each time a phone had a message to send, it would advertise itself over Bluetooth LE, connect to other phones as a peripheral, send the message, then close the connection.</p>

<p>I reworked the entire process. Now, the phones are still listening most of the time for other devices, but each periodically broadcasts itself (and becomes discoverable) at random intervals every few minutes. When phones discover each other, they connect and subscribe to push notifications from each other. That way, when there is a message to send, it transmits to all connected devices in a split second.</p>

<p><img class="center" src="/images/posts/14adhocnetwork.gif" title="&lsquo;Split Ad-Hoc Network&rsquo;" ></p>

<p>There&rsquo;s still some debugging to do with connection stability and perfecting the advertising interval so that devices become connected quickly, but so far it is working quite well! I&rsquo;m excited to finish getting the base network established so that I can play around with different network setups that could be built with the technology. I was intrigued by some <a href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/">earlier conversations about secure communications and web-of-trust networks</a>, as well as <a href="http://ghost.lesiuk.org/AdHoc/network_simulator/">different optimizations for routing the packets beyond simple broadcasting</a>, and it would be cool to use Bluetooth LE to build this.</p>

<p><img class="center" src="/images/posts/14adhocrouting.gif" title="&lsquo;Ad-Hoc Specific Route&rsquo;" ></p>

<p>We were talking about what type of photo booth would be appropriate for a Hacker School party, and I had the idea for a fun modification to the booth that would take 4 photos, turn each into ASCII art (green on a black background), and then make an animated GIF image from them that could be projected continuously during a party, inspired by <a href="https://github.com/oxling/iphone-ascii">Amy&rsquo;s ASCII Cam project</a>.</p>

<p><img class="center" src="/images/posts/14asciiphoto.gif" title="&lsquo;ASCII Photo&rsquo;" ></p>

<p>Totally coincidentally, when checking out <a href="https://hackmanhattan.com/2014/06/facetron6000-at-figment-2014/">Hack Manhattan</a>, I came across their recent ASCII photo booth project, which takes a photo, converts it to ASCII art, then actually has an Arduino-controlled vintage typewriter type it out onto a sheet of paper for the user to take with them. So cool!</p>

<p><img class="center" src="/images/posts/14asciitypewriter.jpg" title="&lsquo;ASCII Typewriter Booth&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 14: URL Shortener]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14/"/>
    <updated>2014-06-28T20:58:14-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14</id>
    <content type="html"><![CDATA[<p>I went to the Jobs Practice session on Friday and worked on the assigned project of making a quick URL shortener in 2 hours, which is practice for interview projects. I&rsquo;d never done a URL shortener before, and hadn&rsquo;t worked on web/PHP type stuff in awhile since I switched to iOS apps, so I was excited for the change of pace and the well-defined project.</p>

<p>I was confident that I could write a PHP script very quickly to do the URL shortening and routing, but as I put this up under a subdomain of an existing server I had running for another site, I had to make some tricky changes to the <code>.htaccess</code> file so that Apache would reroute all of the URLs for my shortener to the <code>index.php</code> file with all of my routing scripts. This proved trickier than I expected, since I&rsquo;m not super familiar with the syntax of the <code>.htaccess</code> file and had some trouble getting it to route things properly.</p>

<p>Finally I got the <code>.htaccess</code> file to send things to my script so I could actually write the shortener, but I&rsquo;d like to revisit it this week and learn enough that I can write that part more confidently in the future, and so that I can implement this version better than it currently is written.</p>

<p>I catch short URLs by grabbing the URL with PHP, then look up the short link in the MySQL database, and then redirect the page to the long URL.</p>

<p>```php
if ((strlen($shorturl) > 0) &amp;&amp; $shorturl != &ldquo;shorten&rdquo;) {</p>

<pre><code>    # should redirect to this url

$query = "
    SELECT
    id,
    short,
    url
    FROM urllinks
    WHERE
    short = :shortlink
    ";
    $query_params = array(
                          ':shortlink' =&gt; $shorturl
                          );

    try{
        $stmt = $db-&gt;prepare($query);
        $result = $stmt-&gt;execute($query_params);
    }
    catch(PDOException $ex){ die("Failed to run query: " . $ex-&gt;getMessage()); }
    $goturl_ok = false;
    $row = $stmt-&gt;fetch();
    if($row){
        $goturl_ok = true;
    }

    if($goturl_ok){
        # redirect to the url
        header("Location: " . $row[url]);
        die("Redirecting to: " . $row[url]);
    } else{
        print("Redirect Failed. No such link.");
    }
</code></pre>

<p>}
```</p>

<p>If it&rsquo;s not a short URL, then I look for <code>POST</code> variables to see if the user is trying to shorten their own URL. If so, and if it&rsquo;s a valid URL, I generate a random string of 6 characters and store them in the database with the URL they should point to.</p>

<p>```php
if(!empty($_POST[&lsquo;urltoshorten&rsquo;])){</p>

<pre><code>if (filter_var($_POST['urltoshorten'], FILTER_VALIDATE_URL) === FALSE) {
    echo "&lt;p&gt;URL '" . $_POST['urltoshorten'] . "' is not valid.&lt;/p&gt;";
} else {

    function random_string($length = 6, $chars = '1234567890qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM')
    {
        $chars_length = (strlen($chars) - 1);
        $string = $chars{rand(0, $chars_length)};

        for ($i = 1; $i &lt; $length; $i = strlen($string))
        {
            $r = $chars{rand(0, $chars_length)};
            $string .=  $r;
        }
        return $string;
    }

    $shortstring = random_string();

    $query = "
    INSERT INTO urllinks (short, url)
    VALUES (:shortstring, :urltoshorten)
    ";
    $query_params = array(
                          ':shortstring' =&gt; $shortstring,
                          ':urltoshorten' =&gt; $_POST['urltoshorten']
                          );

    try{
        $stmt = $db-&gt;prepare($query);
        $result = $stmt-&gt;execute($query_params);
    }
    catch(PDOException $ex){ die("Failed to run query: " . $ex-&gt;getMessage()); }
    $goturl_ok = false;
    $row = $stmt-&gt;rowCount();
    # share the new short url
    echo '&lt;p&gt;Shortened URL to &lt;a href="http://prty.us/' . $shortstring . '"&gt;' . 'http://prty.us/' . $shortstring . '&lt;/a&gt;&lt;/p&gt;';
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Otherwise, I return a pretty form for URL shortening that posts to this same page.</p>

<p>```php
<form method="post" action="http://prty.us/shorten" id="shortenurlform"></p>

<pre><code>&lt;div&gt;
    &lt;label for="urltoshorten"&gt;Enter your URL to shorten:&lt;/label&gt;
    &lt;input type="text" class="input-field" id="urltoshorten" name="urltoshorten" value=""&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;input type="submit" class="btn btn-default"&gt;
&lt;/div&gt;
</code></pre>

<p></form>
```</p>

<p><a href="http://prty.us/shorten">Check it out!</a> It was cool how simple this was to implement (the PHP part at least). I used <a href="http://getbootstrap.com">Twitter Bootstrap</a> along with a template I&rsquo;ve used previously to get something nice-looking up very quickly. It&rsquo;s also responsive (everything rearranges nicely if the screen size is smaller, like on your phone) without putting really any extra work into it, since that&rsquo;s part of Bootstrap.</p>

<p>This made me miss doing web stuff and I&rsquo;m thinking of doing more web development while I&rsquo;m here. I find that every project I make needs a good website even just for marketing, and responsive mobile-friendly websites can be a great way to extend an iOS app&rsquo;s functionality to other device platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 13: Mesh Messaging App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13/"/>
    <updated>2014-06-26T20:26:50-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>I couldn&rsquo;t get my SecretHandshake app to work properly today after the OAuth changes I&rsquo;d made, so I got to go on a bug-finding detective mission. I couldn&rsquo;t find any code I changed that would make the app suddenly never have its bluetooth delegate methods called, and a lot of error-finding logs that were never called and indicated that nothing was wrong.</p>

<p>I used Git to create a branch of the project from the last version I know for sure works, which I have on TestFlight. I built that and ran it on the device, and it still didn&rsquo;t work! At first I was frustrated, but then I realized that it meant it wasn&rsquo;t anything in the code that was the problem after all. If I built it in the XCode6 beta, it wouldn&rsquo;t ever detect other iBeacons, but if I built it in XCode5, it worked perfectly. Because I can&rsquo;t build for iOS8 from XCode5, that means that I can&rsquo;t get it to run on my iPod anymore at all. Hoping it&rsquo;s a bug in the XCode beta and not some mysterious unannounced change in the OS that breaks iBeacons.</p>

<p>In the afternoon, I got to work laying out the framework for a Bluetooth LE based mobile ad-hoc mesh network using iPhones and CoreBluetooth (a lower level framework than iBeacons that allows me to send longer messages between phones). I built a simple app that lets you input a message and broadcast it to any other phones in range. It was very exciting that it works! I couldn&rsquo;t get out of range of the phones while in the Hacker School space, so I&rsquo;m looking forward to testing out whether the hopping is working (the phone that receives the message broadcasts it on to other phones).</p>

<p><img class="center" src="/images/posts/13mobileadhoc.jpg" title="&lsquo;Mobile Ad Hoc Network&rsquo;" ></p>

<p>I&rsquo;m interested in pairing with some friends to figure out a network protocol that would work for sending messages between phones and for building the network. To send directed messages instead of broadcast, should there be a &ldquo;message received&rdquo; response sent by the phone when it gets there? Perhaps the &ldquo;message&rdquo; is modified in some way by each phone with headers indicating the path it successfully took to get to the intended recipient the fastest, which we could store as a way to map the network. I&rsquo;m also interested in what we had discussed earlier in linking the mesh network to a trusted friend group to allow secure messages to be sent to the people they&rsquo;re intended for.</p>

<p><img class="center" src="/images/posts/13weboftrust.jpg" title="&lsquo;Web of Trust&rsquo;" ></p>

<p>The TorCoin model for route signing by each node is inspiring me with ideas for how each node in a mobile ad hoc mesh network might sign a message such that the network could perhaps get smarter about routing messages without having to broadcast everything to each node. Maybe we could incorporate a little bit of machine learning into the Mesh Messaging app (&hellip;meshaging?) to figure out the best routes to try for reaching particular nodes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 10: OAuth Challenges and Setting Goals]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10/"/>
    <updated>2014-06-23T20:56:24-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10</id>
    <content type="html"><![CDATA[<p>I put a ton of time in on the <a href="https://github.com/lauraskelton/secrethandshake">Secret Handshake iOS app</a> in perfecting the OAuth login procedure. Originally, I was using an OAuth library from Google to open the Hacker School login page in a webview within the app. The problem with this was that it couldn&rsquo;t take advantage of Safari&rsquo;s auto fill password functionality, or if you were already logged in on the browser.</p>

<p>I first tried to use the iOS library to post the authentication code request to the Hacker School website on Safari. Unfortunately, an iOS app is unable to do a <code>POST</code> request to another app. I ended up writing a simple PHP file on my server that I redirect the user to from the Secret Handshake app. The PHP file handles sending the user to the Hacker School login page and then sending a <code>POST</code> request to get an access token from Hacker School. It then sends the returned token back to the Secret Handshake app via a custom URL scheme <code>secrethandshake://oauth</code> and an attached query string containing the token.</p>

<p><img class="center" src="/images/posts/10oauthflow.png" title="&lsquo;OAuth 2.0 Process&rsquo;" ></p>

<p>In the end, after struggling to find any examples of what a successful OAuth request should look like, and to find a working library I could use to get things up and running, I am not using any 3rd party libraries at all with my OAuth implementation, the code handling the OAuth requests is relatively brief, and I even managed to get token refreshing up and running to avoid repeated logins.</p>

<p>This is the PHP OAuth manager file in its entirety.</p>

<p>```php</p>

<p>&lt;?php</p>

<pre><code>/**
 * Server OAuth Handler for iOS App
 *
 * iOS App launches Safari to this page on SecretHandshake server
 * This page sends the user to the Hacker School login page to get authorization code
 * It takes the auth code and sends it back to the server to get an access token
 * It redirects the user back to the app via a custom URL scheme
 * and sends the access and refresh tokens as query parameters to the app
 * which stores them for future use.
 */

function getAuthenticationUrl($auth_endpoint, $client_id, $redirect_uri)
{
    $parameters = array(
                                    'response_type' =&gt; 'code',
                                    'client_id'     =&gt; $client_id,
                                    'redirect_uri'  =&gt; $redirect_uri
                                    );
    return $auth_endpoint . '?' . http_build_query($parameters, null, '&amp;');
}

function getAccessToken($token_endpoint, $grant_type, array $parameters, $client_id, $client_secret)
{
    $parameters['grant_type'] = $grant_type;
    $parameters['client_id'] = $client_id;
    $parameters['client_secret'] = $client_secret;

    $http_headers = array();

    return executeRequest($token_endpoint, $parameters, 'POST', $http_headers, 0);
}

function executeRequest($url, $parameters = array(), $http_method = 'POST', array $http_headers = null, $form_content_type = 0)
{

    $postBody = http_build_query($parameters);
    $requestHttpContext["content"] = $postBody;
    $requestHttpContext["method"] = 'POST';

    $options = array( 'http' =&gt; $requestHttpContext );
    $context = stream_context_create( $options );

    $response = file_get_contents($url, false, $context);

    return $response;

}

$client_id = 'my-client-id';
$client_secret = 'my-client-secret';
$authorization_endpoint = 'my-authorization-endpoint';
$redirect_uri = 'my-redirect-uri';
$token_endpoint = 'my-token-endpoint';


if (!isset($_GET['code']))
{
    $auth_url = getAuthenticationUrl($authorization_endpoint, $client_id, $redirect_uri);
    header('Location: ' . $auth_url);
    die('Redirect');
} else {
    $params = array(
                    'code' =&gt; $_GET['code'],
                    'redirect_uri' =&gt; $redirect_uri
                    );

    $response = getAccessToken($token_endpoint, 'authorization_code', $params, $client_id, $client_secret);

    $info = json_decode($response, true);
    $querystring = http_build_query($info);
    $appurl = 'secrethandshake://oauth' . '?' . $querystring;
    header('Location: ' . $appurl);
    die('Redirect');

}
</code></pre>

<p>?></p>

<p>```</p>

<p>On the iPhone, I capture the custom URL query string in the App Delegate.</p>

<p>```objc
&ndash; (BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{</p>

<pre><code>// secrethandshake://oauth?access_token=324235253442

if ([[url host] isEqualToString:@"oauth"]) {
    // parse the authentication code query
    [self authorizeFromExternalURL:url];
}

return YES;
</code></pre>

<p>}</p>

<ul>
<li>(void)authorizeFromExternalURL:(NSURL *)url
{
  [[OAuthHandler sharedHandler] handleAuthTokenURL:url];
}
```</li>
</ul>


<p>Then I parse the query string in my OAuth Handler and store the access token and the refresh token in my user defaults.</p>

<p>``` objc
&ndash;(void)handleAuthTokenURL:(NSURL *)url
{</p>

<pre><code>// handle query here
NSDictionary *dict = [self parseQueryString:[url query]];

if ([dict objectForKey:@"error"] != nil) {
    [self.delegate oauthHandlerDidFailWithError:[dict objectForKey:@"error"]];
} else if ([dict objectForKey:@"access_token"] != nil &amp;&amp; [dict objectForKey:@"refresh_token"] != nil) {
    // Save the access token and refresh token
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];

    [self.delegate oauthHandlerDidAuthorize];
} else {
    [self.delegate oauthHandlerDidFailWithError:@"Access token not found. Failed to log in to Hacker School."];
}
</code></pre>

<p>}</p>

<ul>
<li><p>(NSDictionary <em>)parseQueryString:(NSString </em>)query
{
  NSMutableDictionary <em>dict = [[NSMutableDictionary alloc] initWithCapacity:6];
  NSArray </em>pairs = [query componentsSeparatedByString:@&ldquo;&amp;&rdquo;];</p>

<p>  for (NSString <em>pair in pairs) {
      NSArray </em>elements = [pair componentsSeparatedByString:@&ldquo;=&rdquo;];
      NSString <em>key = [[elements objectAtIndex:0] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
      NSString </em>val = [[elements objectAtIndex:1] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</p>

<pre><code>  [dict setObject:val forKey:key];
  elements = nil;
  key = nil;
  val = nil;
</code></pre>

<p>  }
  pairs = nil;
  return dict;
}</p></li>
</ul>


<p>```</p>

<p>To refresh the token, I just post to Hacker School&rsquo;s <code>/oauth/token</code> page with the query string <code>grant_type=refresh_token&amp;refresh_token=my_refresh_token</code> along with my client id and client secret, and store the new access token to sign my queries.</p>

<p>```objc
&ndash;(void)refreshToken:(id)sender
{</p>

<pre><code>NSURL *tokenURL = [NSURL URLWithString:@"https://www.hackerschool.com/oauth/token"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:tokenURL];

[request setHTTPMethod:@"POST"];
NSString *postString = [NSString stringWithFormat:@"grant_type=refresh_token&amp;client_id=%@&amp;client_secret=%@&amp;refresh_token=%@", kMyClientID, kMyClientSecret, [[NSUserDefaults standardUserDefaults] objectForKey:kSHRefreshTokenKey]];
[request setHTTPBody:[postString dataUsingEncoding:NSUTF8StringEncoding]];

[NSURLConnection sendAsynchronousRequest:request
                                   queue:[NSOperationQueue mainQueue]
                       completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {

                           NSString *responseBody = [ [NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

                           NSLog(@"response: %@", responseBody);

                           NSData *jsonData = [responseBody dataUsingEncoding:NSUTF8StringEncoding];
                           NSError *e;
                           NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&amp;e];

                           if (e != nil) {
                               NSLog(@"error: %@", e);
                               [self launchExternalSignIn:nil];
                           } else if ([jsonDict objectForKey:@"error"] != nil){
                               NSLog(@"error refreshing token: %@", [jsonDict objectForKey:@"error"]);
                               [self launchExternalSignIn:nil];
                           } else {
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];
                               [self.delegate oauthHandlerDidAuthorize];
                           }

                       }];
</code></pre>

<p>}
```</p>

<p>It took a lot of time to get this up and running due to the lack of clear documentation on OAuth 2.0 requests, but I&rsquo;m happy with how it turned out and very happy to have gotten rid of all of the external libraries. Rewriting the entire thing in a concise way let me fully understand everything that was happening, which makes the debugging process so much simpler. Hopefully this will help someone else struggling with OAuth login from an app. The source code is available <a href="https://github.com/lauraskelton/secrethandshake">on GitHub</a>.</p>

<p>Testing the app was exciting. Several people loaded the app onto their phones and logged in, and we were all getting alerts with each others' photos, which was pretty cool. The background notifications of nearby users were working perfectly. I&rsquo;m looking into setting up <a href="https://github.com/Instrument/Vicinity">a custom implementation of iBeacon using Bluetooth LE in background mode</a> that will allow the phones to broadcast periodically in the background as well, so that no one needs to have the app open to be notified that someone is nearby.</p>

<p><img class="center" src="/images/posts/10notifications.jpg" title="&lsquo;SecretHandshake Notifications&rsquo;" ></p>

<p>I had a great conversation with <a href="https://github.com/thomasballinger">Tom</a> in the morning about what I&rsquo;ve been working on at Hacker School and what I should focus on for the coming weeks to get the most out of it. I left feeling pretty good about the various directions I&rsquo;ve taken and how much/what/how fast I&rsquo;ve been learning. I&rsquo;m happy with the balance I&rsquo;ve had between <a href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/">iOS projects</a>, totally new projects (<a href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/">Arduino</a> and cool <a href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/">machine learning</a>/<a href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/">neural network</a> stuff), learning new languages (<a href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/">Swift!</a>), and programming basics (getting familiar with the <a href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/">data structures and algorithms</a> basics that would have been covered in CS courses had I taken that path).</p>

<p>I came away with some great new ideas for things that would be good and/or fun to focus on in the coming weeks and clearer goals for the rest of Hacker School. A side effect of being around so much creative energy and cool projects is that you can get overwhelmed with fear of missing out on what everyone else is doing, even if that&rsquo;s not what you came here to work on. Part of that is a fun and enriching distraction, like Arduino, and part of it just ends up being noise that confuses your focus. If a bunch of people are excited about writing compilers and learning Rust, should I be doing those things too?</p>

<p>I have a few ideas for some quick iOS apps that I&rsquo;d like to try to implement in Swift, that are more of a game/drawing style of app that use more math, graphics, and touch interface than the social utility apps I&rsquo;ve written in the past, which tended to take advantage of Apple&rsquo;s great built in user interface elements more than custom graphics and animations. Looking forward to the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 8: Secret Handshake App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T20:53:29-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>I finished a <a href="https://github.com/lauraskelton/secrethandshake">new iPhone app</a> today!! It was inspired by someone at the Swift meetup saying that Hacker School was like the new Freemasons &ndash; some kind of secret society that instantly connected you with other people. I had such a good time talking to some Hacker School alums I hadn&rsquo;t met before, that I thought it would be good to have an app that would let me know at future meetups whether there were any other Hacker Schoolers in the room.</p>

<p>In iOS 7, Apple introduce iBeacons, a proximity beacon built on top of Bluetooth LE. IPhones can scan for iBeacon signals, and display special hyperlocal information when they come within range of one, such as at a store display or at a particular museum exhibit. The iBeacon signal can even wake up an iPhone that is inactive with an alert and a notification banner.</p>

<p><img class="center" src="/images/posts/8ibeacon.jpg" title="&lsquo;ibeacon&rsquo;" ></p>

<p>The really exciting thing is that iPhones can also act as iBeacon emitters as well as receivers. You can send out an iBeacon signal from your phone while also scanning for similar signals from other people&rsquo;s phones.</p>

<p>```objc
&ndash; (void)initBeacon {</p>

<pre><code>self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:uuid
                                                            major:1
                                                            minor:userID
                                                       identifier:@"someregion"];
</code></pre>

<p>}</p>

<ul>
<li>(void)transmitBeacon
{
      self.beaconPeripheralData = [self.beaconRegion peripheralDataWithMeasuredPower:nil];
      self.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self
                                                                       queue:nil
                                                                     options:nil];
}
```</li>
</ul>


<p>I set up my app so that each user&rsquo;s phone emits an iBeacon signal that includes their userID. Each phone also scans for other signals, and if it finds that of another Hacker Schooler&rsquo;s phone, it sends an alert to the scanner&rsquo;s phone and downloads a profile photo, name, and batch of the nearby person. That way, you could make sure to stop by and chat with that person at a conference or meetup.</p>

<p>So far it seems to be working well, but I definitely need beta testing help from some other Hacker School folks who wouldn&rsquo;t mind giving some feedback. I have it up on TestFlight if you have an iPhone and time to test it out! <a href="http://tflig.ht/1stcVLG">http://tflig.ht/1stcVLG</a></p>
]]></content>
  </entry>
  
</feed>
