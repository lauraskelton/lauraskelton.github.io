<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bluetooth-LE | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/bluetooth-le/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-06-26T11:16:09-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 10: OAuth Challenges and Setting Goals]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10/"/>
    <updated>2014-06-23T20:56:24-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10</id>
    <content type="html"><![CDATA[<p>I put a ton of time in on the <a href="https://github.com/lauraskelton/secrethandshake">Secret Handshake iOS app</a> in perfecting the OAuth login procedure. Originally, I was using an OAuth library from Google to open the Hacker School login page in a webview within the app. The problem with this was that it couldn&rsquo;t take advantage of Safari&rsquo;s auto fill password functionality, or if you were already logged in on the browser.</p>

<p>I first tried to use the iOS library to post the authentication code request to the Hacker School website on Safari. Unfortunately, an iOS app is unable to do a <code>POST</code> request to another app. I ended up writing a simple PHP file on my server that I redirect the user to from the Secret Handshake app. The PHP file handles sending the user to the Hacker School login page and then sending a <code>POST</code> request to get an access token from Hacker School. It then sends the returned token back to the Secret Handshake app via a custom URL scheme <code>secrethandshake://oauth</code> and an attached query string containing the token.</p>

<p><img class="center" src="/images/posts/10oauthflow.png" title="&lsquo;OAuth 2.0 Process&rsquo;" ></p>

<p>In the end, after struggling to find any examples of what a successful OAuth request should look like, and to find a working library I could use to get things up and running, I am not using any 3rd party libraries at all with my OAuth implementation, the code handling the OAuth requests is relatively brief, and I even managed to get token refreshing up and running to avoid repeated logins.</p>

<p>This is the PHP OAuth manager file in its entirety.</p>

<p>```php</p>

<p>&lt;?php</p>

<pre><code>/**
 * Server OAuth Handler for iOS App
 *
 * iOS App launches Safari to this page on SecretHandshake server
 * This page sends the user to the Hacker School login page to get authorization code
 * It takes the auth code and sends it back to the server to get an access token
 * It redirects the user back to the app via a custom URL scheme
 * and sends the access and refresh tokens as query parameters to the app
 * which stores them for future use.
 */

function getAuthenticationUrl($auth_endpoint, $client_id, $redirect_uri)
{
    $parameters = array(
                                    'response_type' =&gt; 'code',
                                    'client_id'     =&gt; $client_id,
                                    'redirect_uri'  =&gt; $redirect_uri
                                    );
    return $auth_endpoint . '?' . http_build_query($parameters, null, '&amp;');
}

function getAccessToken($token_endpoint, $grant_type, array $parameters, $client_id, $client_secret)
{
    $parameters['grant_type'] = $grant_type;
    $parameters['client_id'] = $client_id;
    $parameters['client_secret'] = $client_secret;

    $http_headers = array();

    return executeRequest($token_endpoint, $parameters, 'POST', $http_headers, 0);
}

function executeRequest($url, $parameters = array(), $http_method = 'POST', array $http_headers = null, $form_content_type = 0)
{

    $postBody = http_build_query($parameters);
    $requestHttpContext["content"] = $postBody;
    $requestHttpContext["method"] = 'POST';

    $options = array( 'http' =&gt; $requestHttpContext );
    $context = stream_context_create( $options );

    $response = file_get_contents($url, false, $context);

    return $response;

}

$client_id = 'my-client-id';
$client_secret = 'my-client-secret';
$authorization_endpoint = 'my-authorization-endpoint';
$redirect_uri = 'my-redirect-uri';
$token_endpoint = 'my-token-endpoint';


if (!isset($_GET['code']))
{
    $auth_url = getAuthenticationUrl($authorization_endpoint, $client_id, $redirect_uri);
    header('Location: ' . $auth_url);
    die('Redirect');
} else {
    $params = array(
                    'code' =&gt; $_GET['code'],
                    'redirect_uri' =&gt; $redirect_uri
                    );

    $response = getAccessToken($token_endpoint, 'authorization_code', $params, $client_id, $client_secret);

    $info = json_decode($response, true);
    $querystring = http_build_query($info);
    $appurl = 'secrethandshake://oauth' . '?' . $querystring;
    header('Location: ' . $appurl);
    die('Redirect');

}
</code></pre>

<p>?></p>

<p>```</p>

<p>On the iPhone, I capture the custom URL query string in the App Delegate.</p>

<p>```objc
&ndash; (BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{</p>

<pre><code>// secrethandshake://oauth?access_token=324235253442

if ([[url host] isEqualToString:@"oauth"]) {
    // parse the authentication code query
    [self authorizeFromExternalURL:url];
}

return YES;
</code></pre>

<p>}</p>

<ul>
<li>(void)authorizeFromExternalURL:(NSURL *)url
{
  [[OAuthHandler sharedHandler] handleAuthTokenURL:url];
}
```</li>
</ul>


<p>Then I parse the query string in my OAuth Handler and store the access token and the refresh token in my user defaults.</p>

<p>``` objc
&ndash;(void)handleAuthTokenURL:(NSURL *)url
{</p>

<pre><code>// handle query here
NSDictionary *dict = [self parseQueryString:[url query]];

if ([dict objectForKey:@"error"] != nil) {
    [self.delegate oauthHandlerDidFailWithError:[dict objectForKey:@"error"]];
} else if ([dict objectForKey:@"access_token"] != nil &amp;&amp; [dict objectForKey:@"refresh_token"] != nil) {
    // Save the access token and refresh token
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];

    [self.delegate oauthHandlerDidAuthorize];
} else {
    [self.delegate oauthHandlerDidFailWithError:@"Access token not found. Failed to log in to Hacker School."];
}
</code></pre>

<p>}</p>

<ul>
<li><p>(NSDictionary <em>)parseQueryString:(NSString </em>)query
{
  NSMutableDictionary <em>dict = [[NSMutableDictionary alloc] initWithCapacity:6];
  NSArray </em>pairs = [query componentsSeparatedByString:@&ldquo;&amp;&rdquo;];</p>

<p>  for (NSString <em>pair in pairs) {
      NSArray </em>elements = [pair componentsSeparatedByString:@&ldquo;=&rdquo;];
      NSString <em>key = [[elements objectAtIndex:0] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
      NSString </em>val = [[elements objectAtIndex:1] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</p>

<pre><code>  [dict setObject:val forKey:key];
  elements = nil;
  key = nil;
  val = nil;
</code></pre>

<p>  }
  pairs = nil;
  return dict;
}</p></li>
</ul>


<p>```</p>

<p>To refresh the token, I just post to Hacker School&rsquo;s <code>/oauth/token</code> page with the query string <code>grant_type=refresh_token&amp;refresh_token=my_refresh_token</code> along with my client id and client secret, and store the new access token to sign my queries.</p>

<p>```objc
&ndash;(void)refreshToken:(id)sender
{</p>

<pre><code>NSURL *tokenURL = [NSURL URLWithString:@"https://www.hackerschool.com/oauth/token"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:tokenURL];

[request setHTTPMethod:@"POST"];
NSString *postString = [NSString stringWithFormat:@"grant_type=refresh_token&amp;client_id=%@&amp;client_secret=%@&amp;refresh_token=%@", kMyClientID, kMyClientSecret, [[NSUserDefaults standardUserDefaults] objectForKey:kSHRefreshTokenKey]];
[request setHTTPBody:[postString dataUsingEncoding:NSUTF8StringEncoding]];

[NSURLConnection sendAsynchronousRequest:request
                                   queue:[NSOperationQueue mainQueue]
                       completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {

                           NSString *responseBody = [ [NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

                           NSLog(@"response: %@", responseBody);

                           NSData *jsonData = [responseBody dataUsingEncoding:NSUTF8StringEncoding];
                           NSError *e;
                           NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&amp;e];

                           if (e != nil) {
                               NSLog(@"error: %@", e);
                               [self launchExternalSignIn:nil];
                           } else if ([jsonDict objectForKey:@"error"] != nil){
                               NSLog(@"error refreshing token: %@", [jsonDict objectForKey:@"error"]);
                               [self launchExternalSignIn:nil];
                           } else {
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];
                               [self.delegate oauthHandlerDidAuthorize];
                           }

                       }];
</code></pre>

<p>}
```</p>

<p>It took a lot of time to get this up and running due to the lack of clear documentation on OAuth 2.0 requests, but I&rsquo;m happy with how it turned out and very happy to have gotten rid of all of the external libraries. Rewriting the entire thing in a concise way let me fully understand everything that was happening, which makes the debugging process so much simpler. Hopefully this will help someone else struggling with OAuth login from an app. The source code is available <a href="https://github.com/lauraskelton/secrethandshake">on GitHub</a>.</p>

<p>Testing the app was exciting. Several people loaded the app onto their phones and logged in, and we were all getting alerts with each others' photos, which was pretty cool. The background notifications of nearby users were working perfectly. I&rsquo;m looking into setting up <a href="https://github.com/Instrument/Vicinity">a custom implementation of iBeacon using Bluetooth LE in background mode</a> that will allow the phones to broadcast periodically in the background as well, so that no one needs to have the app open to be notified that someone is nearby.</p>

<p><img class="center" src="/images/posts/10notifications.jpg" title="&lsquo;SecretHandshake Notifications&rsquo;" ></p>

<p>I had a great conversation with <a href="https://github.com/thomasballinger">Tom</a> in the morning about what I&rsquo;ve been working on at Hacker School and what I should focus on for the coming weeks to get the most out of it. I left feeling pretty good about the various directions I&rsquo;ve taken and how much/what/how fast I&rsquo;ve been learning. I&rsquo;m happy with the balance I&rsquo;ve had between <a href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/">iOS projects</a>, totally new projects (<a href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/">Arduino</a> and cool <a href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/">machine learning</a>/<a href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/">neural network</a> stuff), learning new languages (<a href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/">Swift!</a>), and programming basics (getting familiar with the <a href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/">data structures and algorithms</a> basics that would have been covered in CS courses had I taken that path).</p>

<p>I came away with some great new ideas for things that would be good and/or fun to focus on in the coming weeks and clearer goals for the rest of Hacker School. A side effect of being around so much creative energy and cool projects is that you can get overwhelmed with fear of missing out on what everyone else is doing, even if that&rsquo;s not what you came here to work on. Part of that is a fun and enriching distraction, like Arduino, and part of it just ends up being noise that confuses your focus. If a bunch of people are excited about writing compilers and learning Rust, should I be doing those things too?</p>

<p>I have a few ideas for some quick iOS apps that I&rsquo;d like to try to implement in Swift, that are more of a game/drawing style of app that use more math, graphics, and touch interface than the social utility apps I&rsquo;ve written in the past, which tended to take advantage of Apple&rsquo;s great built in user interface elements more than custom graphics and animations. Looking forward to the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 8: Secret Handshake App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T20:53:29-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>I finished a <a href="https://github.com/lauraskelton/secrethandshake">new iPhone app</a> today!! It was inspired by someone at the Swift meetup saying that Hacker School was like the new Freemasons &ndash; some kind of secret society that instantly connected you with other people. I had such a good time talking to some Hacker School alums I hadn&rsquo;t met before, that I thought it would be good to have an app that would let me know at future meetups whether there were any other Hacker Schoolers in the room.</p>

<p>In iOS 7, Apple introduce iBeacons, a proximity beacon built on top of Bluetooth LE. IPhones can scan for iBeacon signals, and display special hyperlocal information when they come within range of one, such as at a store display or at a particular museum exhibit. The iBeacon signal can even wake up an iPhone that is inactive with an alert and a notification banner.</p>

<p><img class="center" src="/images/posts/8ibeacon.jpg" title="&lsquo;ibeacon&rsquo;" ></p>

<p>The really exciting thing is that iPhones can also act as iBeacon emitters as well as receivers. You can send out an iBeacon signal from your phone while also scanning for similar signals from other people&rsquo;s phones.</p>

<p>```objc
&ndash; (void)initBeacon {</p>

<pre><code>self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:uuid
                                                            major:1
                                                            minor:userID
                                                       identifier:@"someregion"];
</code></pre>

<p>}</p>

<ul>
<li>(void)transmitBeacon
{
      self.beaconPeripheralData = [self.beaconRegion peripheralDataWithMeasuredPower:nil];
      self.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self
                                                                       queue:nil
                                                                     options:nil];
}
```</li>
</ul>


<p>I set up my app so that each user&rsquo;s phone emits an iBeacon signal that includes their userID. Each phone also scans for other signals, and if it finds that of another Hacker Schooler&rsquo;s phone, it sends an alert to the scanner&rsquo;s phone and downloads a profile photo, name, and batch of the nearby person. That way, you could make sure to stop by and chat with that person at a conference or meetup.</p>

<p>So far it seems to be working well, but I definitely need beta testing help from some other Hacker School folks who wouldn&rsquo;t mind giving some feedback. I have it up on TestFlight if you have an iPhone and time to test it out! <a href="http://tflig.ht/1stcVLG">http://tflig.ht/1stcVLG</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 7: Mesh Networking, Cryptocurrencies, and iBeacons]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T08:15:31-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I started off working on my beer neural network a bit more. I figured out part of the problem that was giving me data that didn&rsquo;t feel right, which had to do with changing the inputs to give an incomplete picture of the outputs to force the neural network to draw more meaningful connections between the missing beer ratings and the existing beer ratings. Basically, I erased half of the beer ratings from each user from the &ldquo;input&rdquo; dataset, and left the &ldquo;output&rdquo; dataset the same, so the network would have to actually predict and couldn&rsquo;t cheat by just figuring out how to compress the ratings down to 10 nodes and then decompress them back to 900 nodes using tricky math.</p>

<p><img class="center" src="/images/posts/7neuralnetwork.png" title="&lsquo;neural network&rsquo;" ></p>

<p>Now that the neural network is actually learning, I can&rsquo;t seem to get my error rate down to a level I&rsquo;m happy with. I&rsquo;m going to keep working on tweaking the parameters of the neural network to see if I can get it to output something cool that I can share.</p>

<p>While my computer was crunching away at reducing the neural network&rsquo;s error, I took a coffee break down the street with a few friends, which led to a fascinating conversation that lasted a couple of hours, mainly about Mesh Networking and Cryptocurrencies. I learned a lot about how different cryptocurrencies work, including Namecoin, which is linked to your domain name and can validate you, and another cryptocurrency that includes its own programming language that can have actually have contracts embedded in code within a transaction.</p>

<p><img class="center" src="/images/posts/7dogecoin.png" title="&lsquo;dogecoin&rsquo;" ></p>

<p>We went down a pretty complicated rabbit hole of trying to figure out if there was a way to solve some problems in Mesh Networking by linking it with a cryptocurrency, either to validate the identity of nodes to allow secure communication without a centralized server (replacing SSL), or to pay central nodes for traffic they routed in order to reward mesh network users to be good citizens and stay connected to the mesh routing messages between other nodes even when they weren&rsquo;t personally using it.</p>

<p><img class="center" src="/images/posts/7torcoin.jpg" title="&lsquo;torcoin&rsquo;" ></p>

<p>We ended up talking about an idea to combine a social network with mesh network routing or  secure direct connections by using an app with Bluetooth LE to confirm in person that each person in my inner circle is who they say they are. Each of those people could do the same thing for their trusted friends, and then we would have a network of nodes each with a certain degree of social separation and therefore degree of trustedness which we could use to priorities routing of messages.</p>

<p><img class="center" src="/images/posts/7weboftrust.png" title="&lsquo;web of trust&rsquo;" ></p>

<p>We left with some interesting ideas and a bunch of reading to do on Mesh Networking. It turns out that the idea of compensating for node bandwidth was discussed in <a href="http://dedis.cs.yale.edu/dissent/papers/hotpets14-torpath.pdf">a recent paper about TorCoin</a>, which would be &ldquo;mined&rdquo; by routing traffic over the Tor network, and then could be sold in altcoin exchanges, encouraging good behavior on the network. We also decided to read through <a href="https://en.wikipedia.org/wiki/Wireless_mesh_network#Routing_protocols">an overview of the many previously attempted mesh network routing protocols</a> to get a clearer picture of benefits and pitfalls of different approaches. There is also <a href="http://www.amazon.com/Linked-The-New-Science-Networks/dp/0738206679">a book that discusses the inherent properties of many types of networks</a> that sounds like an interesting read.</p>

<p><img class="center" src="/images/posts/7meshnetwork.jpg" title="&lsquo;mesh network&rsquo;" ></p>

<p>I was totally re-energized by this discussion, and decided to figure out iBeacons so I can make a fun Objective-C app for Hacker School. When I went to the Swift meetup at Etsy, almost everyone I met was excited about Hacker School, and I instantly had something to talk about with the new people I was meeting. On top of that, a few Hacker School alumni came out to the bar in Dumbo after the meetup, which was very cool. The app idea was inspired by a comment someone made that night that Hacker School was like the new Freemasons.</p>

<p><img class="center" src="/images/posts/7ibeacon.jpg" title="&lsquo;ibeacons&rsquo;" ></p>

<p>I finished up the nitty gritty late into the evening, and should have a fully working app ready for testing tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 2: Arduino and Mesh Networking]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/"/>
    <updated>2014-06-11T20:44:53-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2</id>
    <content type="html"><![CDATA[<p>I had such a fun day! In the morning I learned how to use Arduino to control Neopixel RGB LED lights from Adafruit. It was so fast to get going with this, and the code was easy to tweak to change the patterns the lights would display.</p>

<p><img class="center" src="/images/posts/adapixels.jpg" title="&lsquo;adafruit neopixels&rsquo; &lsquo;adafruit neopixels&rsquo;" ></p>

<p>We wrote some code a little later that cycled through a rainbow with alternating pixels flashing opposite colors off and on.</p>

<p>```java
void rainbow(uint8_t wait) {
  uint16_t i, j;</p>

<p>  for(j=0; j&lt;256; j++) {</p>

<pre><code>for(i=0; i&lt;strip.numPixels(); i++) {
  if (i%2==0) {
      if ((j/10) %2==0) {
        strip.setPixelColor(i, Wheel((255-i-j) &amp; 255));
      } else {
        strip.setPixelColor(i,0,0,0);
      }
  } else {
    if ((j/10) %2!=0) {
         strip.setPixelColor(i, Wheel((i+j) &amp; 255));
      } else {
        strip.setPixelColor(i,0,0,0);
      }
  }
}
strip.show();
delay(wait);
</code></pre>

<p>  }
}
```</p>

<p><code>Wheel</code> is a neat little function in the Adafruit Neopixel code that converts a value from 0 to 255 to an RGB color value.</p>

<p><code>java
// Input a value 0 to 255 to get a color value.
// The colours are a transition r - g - b - back to r.
uint32_t Wheel(byte WheelPos) {
  if(WheelPos &lt; 85) {
   return strip.Color(WheelPos * 3, 255 - WheelPos * 3, 0);
  } else if(WheelPos &lt; 170) {
   WheelPos -= 85;
   return strip.Color(255 - WheelPos * 3, 0, WheelPos * 3);
  } else {
   WheelPos -= 170;
   return strip.Color(0, WheelPos * 3, 255 - WheelPos * 3);
  }
}
</code></p>

<p>I&rsquo;m so excited to learn more about hardware and connecting apps to display patterns with the lights.</p>

<p>I spent some time brainstorming about Mesh Networking with a group. We want to create our own implementation of ICMP (Internet Control Message Protocol) over Bluetooth LE, using iBeacons as a sort of push notification to alert nearby devices that messages are available, and broadcasting messages through the nodes of the network to get to the intended user.</p>

<p>We&rsquo;re planning to link the mesh network up with a hardware project using the programmable RGB LED lights from Adafruit to represent the users of the network. I thought it would be cool to make a sort of giant firefly jar with light-dots flying around inside, with one dot representing each user-node of the mesh network. The ObjC iOS app would allow users to join the network and then set their dot&rsquo;s color, which would be reflected in the physical firefly jar.</p>

<p>We found a source for an affordable Bluetooth LE adapter for the Arduino and mapped out a plan for how to design the network on the whiteboard. Excited to give it a go tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 1: Swift Tricks]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/"/>
    <updated>2014-06-10T14:25:15-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1</id>
    <content type="html"><![CDATA[<p>Things got much more tricky when I started trying to implement <a href="https://github.com/lauraskelton/simple-share">SimpleShare</a>, my Bluetooth LE (CoreBluetooth) mesh network sharing app, in Swift, using the new Multipeer Connectivity framework instead of Bluetooth. There were much more complicated things I needed to do in Obj-C, and the app couldn&rsquo;t be &ldquo;translated&rdquo; in the same way as the simpler apps just by changing to the new syntax, since Swift actually works differently in key ways than Obj-C does.</p>

<p>Things I learned about Swift:</p>

<ul>
<li>Optional variables: You can no longer have variables that aren&rsquo;t set or that are nil like you could in Obj-C. If you don&rsquo;t know what a variable is when the class is created, you have to make it an optional variable by putting a <code>?</code> after the type declaration.</li>
</ul>


<p>```objc
class MyClass {</p>

<pre><code>var mystring: String?
</code></pre>

<p>}
```
* Global variables: It seems that any variables you set within a class but outside of a function act like public parameters for that class and are accessible to read or set from other classes</p>

<ul>
<li><p>Calling functions from another class: You call a function from another class by writing the class name followed by a dot then the function name with its arguments, eg: <code>MyClass.someFunction(arg1,arg2)</code></p></li>
<li><p>Init functions are a special case: Instead of calling <code>MyClass.init(arg1,arg2)</code> like you would for any other function, just calling <code>MyClass(arg1,arg2)</code>
is how you can init an instance of a class.</p></li>
<li><p>Convenience init: If your init function requires arguments to create a class instance, you can create a second init method for convenience that creates an instance with default values.
<code>objc
class SimpleMesh {
  init(simpleMeshAppID: String) {
      self.simpleMeshAppID = simpleMeshAppID
      self.myItemIDs = ["first", "second", "third", "fourth", "fifth"]
  }
  convenience init() {
      self.init(simpleMeshAppID: "[NO ID]")
  }
}
</code></p></li>
</ul>


<p>In the afternoon, I made a plan with Jorge and Kyle to work on a mesh networking inspector to figure out the limitations of Multipeer Connectivity so that we can build a stable mesh networking messaging app. We decided to move forward on the project in Objective-C while continuing to learn Swift on the side so we can finish more quickly.</p>
]]></content>
  </entry>
  
</feed>
