<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-06-26T10:42:14-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 12]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/25/hacker-school-day-12/"/>
    <updated>2014-06-25T19:37:54-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/25/hacker-school-day-12</id>
    <content type="html"><![CDATA[<p>I grabbed coffee in the morning with <a href="https://github.com/oxling">Amy</a> who does iOS development at Etsy, and she gave me some incredibly helpful advice on things to be sure to focus on while I&rsquo;m at Hacker School. I left feeling excited about an idea from earlier in the batch of setting up an ad-hoc mobile network using iPhones over Bluetooth LE, and am hoping to get to work on implementing version one of that project. She also recommended contributing to a larger open-source project as a good way for someone like me who&rsquo;s always worked independently on my own apps to get used to working within someone else&rsquo;s larger code framework, which would be very relevant to doing iOS at a company where many developers are contributing to one project.</p>

<p>After talking through my OAuth handling in the Secret Handshake app with a couple of other Hacker Schoolers, and walking through each step in the OAuth process, I realized that I could handle the entire OAuth verification from within my iOS app, without relying on the external PHP file to request an access token from the server. I rewrote the OAuth handling in the app to use a custom URL scheme that redirects to my app as the Hacker School API redirect, and successfully got everything working. I wrote up an overview of the OAuth process on <a href="https://github.com/lauraskelton/secrethandshake">the app&rsquo;s GitHub readme page</a>, along with the exact query parameters that are required by the API at each step.</p>

<p>Later I finished up with getting a handle on iOS&rsquo;s SpriteKit by implementing a Space Invaders game in Swift. I learned how to attach sound effects to actions in the game such as firing a bullet or a collision between two sprites on the screen (like an enemy and a bullet), how to keep score, and how to transition between different scenes in the game.</p>

<p><img class="center" src="/images/posts/12spaceinvadersprite.jpg" title="&lsquo;Space Invaders in Swift&rsquo;" ></p>

<p>Following the repeated advice of Hacker School alumni, I decided to move on from the Space Invaders game as soon as I felt like I was no longer learning from it. I got a general sense of setting up the game play, but I stopped before making a perfect implementation of every feature in the original game. This is a big change from how I usually work&mdash; I feel a huge push to finish and perfect the work that I start, and it feels very strange and pretty luxurious to stop a project when it&rsquo;s stopped being educational for me, but after refocusing on my goals a bit yesterday I&rsquo;m impatient to learn new things.</p>

<p>I&rsquo;ve been having trouble balancing two different ways of taking full advantage of my time at Hacker School. One is that I love being around so many smart, energetic peers who I can learn from and work with, and I have such a short period of time here to have access to that. I love the energy I get from talking to other Hacker Schoolers about code and projects, and there is so much that I&rsquo;ve learned so quickly from other people here both through casual conversation over coffee and in a more formal study-group setting. I feel a lot of pressure to break out of my slightly more comfortable/habitual zone of coding alone to pair with and talk with other people at Hacker School, and to be involved in group projects that are happening around me.</p>

<p>This, combined with an impulse to grab hold of any kind of formalized workshop-style learning that&rsquo;s happening around me due to the reassurance it gives that I&rsquo;m for sure learning/accomplishing something if I participate in those, keeps leading me to participate in more formal talks/workshops that are happening in the space. It seems to reinforce my fear of missing out on learning whenever I see a group of Hacker Schoolers working through something in Hopper (the large group-work room) and I&rsquo;m not participating. It feels like skipping class.</p>

<p><img class="center" src="/images/posts/12hopper.jpg" title="&lsquo;Hopper&rsquo;" ></p>

<p>Then I go to a bunch of workshops, and sometimes they&rsquo;re amazingly helpful and right in line with what my learning goals are here. And I think, I should go to more of these! But, other times, I realize a few minutes in that the workshop&rsquo;s focus is not furthering my goals, and I get frustrated at missing out on what could have been coding time, which feels so limited already as my time at Hacker School is flying by.</p>

<p>So, I think I need to just be more aware of the pitfalls of participating in something just because I feel like I &ldquo;should&rdquo;, and do a check with myself before I sign up for things during Hacker School hours to make sure they line up well with what I&rsquo;m already working on and interested in here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 11]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/24/hacker-school-day-11/"/>
    <updated>2014-06-24T20:54:18-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/24/hacker-school-day-11</id>
    <content type="html"><![CDATA[<p>I decided Hacker School would be a great opportunity to learn some iOS frameworks I&rsquo;ve never worked with before, since I have time for something with a bit of a steeper learning curve right now than I do when I need to finish a product quickly.</p>

<p>I had an idea for a game/drawing app that would be a simple way to learn some of the animations and custom touch controls that are possible in iOS, so after learning about the different game frameworks available in iOS 8, I decided to start working through <a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners">a SpriteKit tutorial</a> to get the hang of how to write games.</p>

<p><img class="center" src="/images/posts/11spritekittutorial.png" title="&lsquo;Sprite Kit Tutorial&rsquo;" ></p>

<p>Since I&rsquo;m working in Swift, it was much trickier to get the tutorial code up and running as everything needed to be shifted over to the Swift way of thinking before I could test it out. I got a basic app up and running, but was running into some nightmarish problems with a CGPoint init method when I was doing some vector math. The problem had to do with numerical types, and I finally realized that I was mixing CGFloats with Floats, which in Swift are completely different types.</p>

<p>This is what I finally got to compile:</p>

<p>```objc
func rwNormalize(a: CGPoint) &ndash;> CGPoint {</p>

<pre><code>    let length = CGFloat(rwLength(a))

    return CGPoint(x: a.x/length, y: a.y/length)
}
</code></pre>

<p>```</p>

<p>Because I was sending Floats to CGPoint&rsquo;s init instead of CGFloats, the following caused the compiler error &ldquo;Could not find an overload for &lsquo;init&rsquo; that accepts the supplied arguments&rdquo;.</p>

<p>```objc
func rwNormalize(a: CGPoint) &ndash;> CGPoint {</p>

<pre><code>    let length: Float = rwLength(a)

    return CGPoint(x: Float(a.x/length), y: Float(a.y/length))
}
</code></pre>

<p>```</p>

<p>The following function resulted in the compiler error &ldquo;Could not find an overload for &lsquo;/&rsquo; that accepts the supplied arguments&rdquo;, because I was dividing a CGFloat by a Float, which is not allowed in Swift without first converting one of the arguments to be the same type as the other, since otherwise Swift doesn&rsquo;t know what type the output should be.</p>

<p>```objc
func rwNormalize(a: CGPoint) &ndash;> CGPoint {</p>

<pre><code>    let length: Float = rwLength(a)

    return CGPoint(x: a.x/length, y: a.y/length)
}
</code></pre>

<p>```</p>

<p>The debugging process was pretty frustrating, but after finally figuring out what the problem was with the types I had learned a lot about how Swift works and had a stronger sense of being explicit about the types I was inputting and expecting for each function.</p>

<p>I learned about creating a game scene and adding &ldquo;nodes&rdquo; to the scene that can be anything from a label, a player, an enemy, or a projectile, and manipulating them with simple actions like move or rotate. Once I had a sense of the structure of the game, it was a lot clearer how to set up something simple. I&rsquo;m looking forward to learning more about physics and reacting to different events tomorrow.</p>

<p><img class="center" src="/images/posts/11spritekitorganization.png" title="&lsquo;Sprite Kit Organization&rsquo;" ></p>

<p>In the afternoon, Mary <a href="https://github.com/maryrosecook/spaceinvaders">live-coded a Space Invaders game in Javascript</a> in under an hour. That was pretty cool to watch, and it amazes me how simple she makes the code seem. Watching her quickly create a minimum functional mock-up of the game was very helpful for me as a reminder not to get bogged down in, for example, how the Space Invaders look in version one of a game where your focus is on the functionality of the game and getting that to work. She kept this version simple by using rectangles for the player, bullets, and invaders, and that meant that she could get a basic game laid out very quickly. I like her process of development because all of the functions were laid out in a simple way, and it would be straightforward to move forward and edit some of them to add more complex game play and graphics since the basic functionality is already there.</p>

<p><img class="center" src="/images/posts/11spaceinvaders.png" title="&lsquo;Simple Space Invaders&rsquo;" ></p>

<p>Moving forward, once I finish with the SpriteKit tutorial game, I&rsquo;m going to try making a similarly simple version of Space Invaders for iOS using SpriteKit and Swift.</p>

<p><img class="center" src="/images/posts/11spaceinvaderscomplex.png" title="&lsquo;Complex Space Invaders&rsquo;" ></p>

<p>In other news, this is the coolest thing about the Q train!</p>

<iframe src="//player.vimeo.com/video/99153550" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>It&rsquo;s a series of lit, painted panels on the wall of the subway tunnel between DeKalb and Canal, that&rsquo;s visible through a series of narrow slits in the tunnel wall. When the train is stopped, it just looks like bright slits, but as soon as the train starts moving, it starts animating flipbook-style. It&rsquo;s <a href="https://signalvnoise.com/posts/2508-bill-brands-masstransiscope-subway-art">an installation that was put there in the 80s called Masstransiscope</a>, inspired by the Zoetrope of the 1800s. Bill Brand, the artist, had the idea that &ldquo;Instead of having the film go through the projector, you could move the audience past the film.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 10]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10/"/>
    <updated>2014-06-23T20:56:24-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10</id>
    <content type="html"><![CDATA[<p>I put a ton of time in on the <a href="https://github.com/lauraskelton/secrethandshake">Secret Handshake iOS app</a> in perfecting the OAuth login procedure. Originally, I was using an OAuth library from Google to open the Hacker School login page in a webview within the app. The problem with this was that it couldn&rsquo;t take advantage of Safari&rsquo;s auto fill password functionality, or if you were already logged in on the browser.</p>

<p>I first tried to use the iOS library to post the authentication code request to the Hacker School website on Safari. Unfortunately, an iOS app is unable to do a <code>POST</code> request to another app. I ended up writing a simple PHP file on my server that I redirect the user to from the Secret Handshake app. The PHP file handles sending the user to the Hacker School login page and then sending a <code>POST</code> request to get an access token from Hacker School. It then sends the returned token back to the Secret Handshake app via a custom URL scheme <code>secrethandshake://oauth</code> and an attached query string containing the token.</p>

<p><img class="center" src="/images/posts/10oauthflow.png" title="&lsquo;OAuth 2.0 Process&rsquo;" ></p>

<p>In the end, after struggling to find any examples of what a successful OAuth request should look like, and to find a working library I could use to get things up and running, I am not using any 3rd party libraries at all with my OAuth implementation, the code handling the OAuth requests is relatively brief, and I even managed to get token refreshing up and running to avoid repeated logins.</p>

<p>This is the PHP OAuth manager file in its entirety.</p>

<p>```php</p>

<p>&lt;?php</p>

<pre><code>/**
 * Server OAuth Handler for iOS App
 *
 * iOS App launches Safari to this page on SecretHandshake server
 * This page sends the user to the Hacker School login page to get authorization code
 * It takes the auth code and sends it back to the server to get an access token
 * It redirects the user back to the app via a custom URL scheme
 * and sends the access and refresh tokens as query parameters to the app
 * which stores them for future use.
 */

function getAuthenticationUrl($auth_endpoint, $client_id, $redirect_uri)
{
    $parameters = array(
                                    'response_type' =&gt; 'code',
                                    'client_id'     =&gt; $client_id,
                                    'redirect_uri'  =&gt; $redirect_uri
                                    );
    return $auth_endpoint . '?' . http_build_query($parameters, null, '&amp;');
}

function getAccessToken($token_endpoint, $grant_type, array $parameters, $client_id, $client_secret)
{
    $parameters['grant_type'] = $grant_type;
    $parameters['client_id'] = $client_id;
    $parameters['client_secret'] = $client_secret;

    $http_headers = array();

    return executeRequest($token_endpoint, $parameters, 'POST', $http_headers, 0);
}

function executeRequest($url, $parameters = array(), $http_method = 'POST', array $http_headers = null, $form_content_type = 0)
{

    $postBody = http_build_query($parameters);
    $requestHttpContext["content"] = $postBody;
    $requestHttpContext["method"] = 'POST';

    $options = array( 'http' =&gt; $requestHttpContext );
    $context = stream_context_create( $options );

    $response = file_get_contents($url, false, $context);

    return $response;

}

$client_id = 'my-client-id';
$client_secret = 'my-client-secret';
$authorization_endpoint = 'my-authorization-endpoint';
$redirect_uri = 'my-redirect-uri';
$token_endpoint = 'my-token-endpoint';


if (!isset($_GET['code']))
{
    $auth_url = getAuthenticationUrl($authorization_endpoint, $client_id, $redirect_uri);
    header('Location: ' . $auth_url);
    die('Redirect');
} else {
    $params = array(
                    'code' =&gt; $_GET['code'],
                    'redirect_uri' =&gt; $redirect_uri
                    );

    $response = getAccessToken($token_endpoint, 'authorization_code', $params, $client_id, $client_secret);

    $info = json_decode($response, true);
    $querystring = http_build_query($info);
    $appurl = 'secrethandshake://oauth' . '?' . $querystring;
    header('Location: ' . $appurl);
    die('Redirect');

}
</code></pre>

<p>?></p>

<p>```</p>

<p>On the iPhone, I capture the custom URL query string in the App Delegate.</p>

<p>```objc
&ndash; (BOOL)application:(UIApplication <em>)application openURL:(NSURL </em>)url sourceApplication:(NSString *)sourceApplication annotation:(id)annotation
{</p>

<pre><code>// secrethandshake://oauth?access_token=324235253442

if ([[url host] isEqualToString:@"oauth"]) {
    // parse the authentication code query
    [self authorizeFromExternalURL:url];
}

return YES;
</code></pre>

<p>}</p>

<ul>
<li>(void)authorizeFromExternalURL:(NSURL *)url
{
  [[OAuthHandler sharedHandler] handleAuthTokenURL:url];
}
```</li>
</ul>


<p>Then I parse the query string in my OAuth Handler and store the access token and the refresh token in my user defaults.</p>

<p>``` objc
&ndash;(void)handleAuthTokenURL:(NSURL *)url
{</p>

<pre><code>// handle query here
NSDictionary *dict = [self parseQueryString:[url query]];

if ([dict objectForKey:@"error"] != nil) {
    [self.delegate oauthHandlerDidFailWithError:[dict objectForKey:@"error"]];
} else if ([dict objectForKey:@"access_token"] != nil &amp;&amp; [dict objectForKey:@"refresh_token"] != nil) {
    // Save the access token and refresh token
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
    [[NSUserDefaults standardUserDefaults] setObject:[dict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];

    [self.delegate oauthHandlerDidAuthorize];
} else {
    [self.delegate oauthHandlerDidFailWithError:@"Access token not found. Failed to log in to Hacker School."];
}
</code></pre>

<p>}</p>

<ul>
<li><p>(NSDictionary <em>)parseQueryString:(NSString </em>)query
{
  NSMutableDictionary <em>dict = [[NSMutableDictionary alloc] initWithCapacity:6];
  NSArray </em>pairs = [query componentsSeparatedByString:@&ldquo;&amp;&rdquo;];</p>

<p>  for (NSString <em>pair in pairs) {
      NSArray </em>elements = [pair componentsSeparatedByString:@&ldquo;=&rdquo;];
      NSString <em>key = [[elements objectAtIndex:0] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];
      NSString </em>val = [[elements objectAtIndex:1] stringByReplacingPercentEscapesUsingEncoding:NSUTF8StringEncoding];</p>

<pre><code>  [dict setObject:val forKey:key];
  elements = nil;
  key = nil;
  val = nil;
</code></pre>

<p>  }
  pairs = nil;
  return dict;
}</p></li>
</ul>


<p>```</p>

<p>To refresh the token, I just post to Hacker School&rsquo;s <code>/oauth/token</code> page with the query string <code>grant_type=refresh_token&amp;refresh_token=my_refresh_token</code> along with my client id and client secret, and store the new access token to sign my queries.</p>

<p>```objc
&ndash;(void)refreshToken:(id)sender
{</p>

<pre><code>NSURL *tokenURL = [NSURL URLWithString:@"https://www.hackerschool.com/oauth/token"];
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:tokenURL];

[request setHTTPMethod:@"POST"];
NSString *postString = [NSString stringWithFormat:@"grant_type=refresh_token&amp;client_id=%@&amp;client_secret=%@&amp;refresh_token=%@", kMyClientID, kMyClientSecret, [[NSUserDefaults standardUserDefaults] objectForKey:kSHRefreshTokenKey]];
[request setHTTPBody:[postString dataUsingEncoding:NSUTF8StringEncoding]];

[NSURLConnection sendAsynchronousRequest:request
                                   queue:[NSOperationQueue mainQueue]
                       completionHandler:^(NSURLResponse *response, NSData *data, NSError *error) {

                           NSString *responseBody = [ [NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

                           NSLog(@"response: %@", responseBody);

                           NSData *jsonData = [responseBody dataUsingEncoding:NSUTF8StringEncoding];
                           NSError *e;
                           NSDictionary *jsonDict = [NSJSONSerialization JSONObjectWithData:jsonData options:NSJSONReadingAllowFragments error:&amp;e];

                           if (e != nil) {
                               NSLog(@"error: %@", e);
                               [self launchExternalSignIn:nil];
                           } else if ([jsonDict objectForKey:@"error"] != nil){
                               NSLog(@"error refreshing token: %@", [jsonDict objectForKey:@"error"]);
                               [self launchExternalSignIn:nil];
                           } else {
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"access_token"] forKey:kSHAccessTokenKey];
                               [[NSUserDefaults standardUserDefaults] setObject:[jsonDict objectForKey:@"refresh_token"] forKey:kSHRefreshTokenKey];
                               [self.delegate oauthHandlerDidAuthorize];
                           }

                       }];
</code></pre>

<p>}
```</p>

<p>It took a lot of time to get this up and running due to the lack of clear documentation on OAuth 2.0 requests, but I&rsquo;m happy with how it turned out and very happy to have gotten rid of all of the external libraries. Rewriting the entire thing in a concise way let me fully understand everything that was happening, which makes the debugging process so much simpler. Hopefully this will help someone else struggling with OAuth login from an app. The source code is available <a href="https://github.com/lauraskelton/secrethandshake">on GitHub</a>.</p>

<p>Testing the app was exciting. Several people loaded the app onto their phones and logged in, and we were all getting alerts with each others' photos, which was pretty cool. The background notifications of nearby users were working perfectly. I&rsquo;m looking into setting up <a href="https://github.com/Instrument/Vicinity">a custom implementation of iBeacon using Bluetooth LE in background mode</a> that will allow the phones to broadcast periodically in the background as well, so that no one needs to have the app open to be notified that someone is nearby.</p>

<p><img class="center" src="/images/posts/10notifications.jpg" title="&lsquo;SecretHandshake Notifications&rsquo;" ></p>

<p>I had a great conversation with <a href="https://github.com/thomasballinger">Tom</a> in the morning about what I&rsquo;ve been working on at Hacker School and what I should focus on for the coming weeks to get the most out of it. I left feeling pretty good about the various directions I&rsquo;ve taken and how much/what/how fast I&rsquo;ve been learning. I&rsquo;m happy with the balance I&rsquo;ve had between <a href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/">iOS projects</a>, totally new projects (<a href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/">Arduino</a> and cool <a href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/">machine learning</a>/<a href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/">neural network</a> stuff), learning new languages (<a href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/">Swift!</a>), and programming basics (getting familiar with the <a href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/">data structures and algorithms</a> basics that would have been covered in CS courses had I taken that path).</p>

<p>I came away with some great new ideas for things that would be good and/or fun to focus on in the coming weeks and clearer goals for the rest of Hacker School. A side effect of being around so much creative energy and cool projects is that you can get overwhelmed with fear of missing out on what everyone else is doing, even if that&rsquo;s not what you came here to work on. Part of that is a fun and enriching distraction, like Arduino, and part of it just ends up being noise that confuses your focus. If a bunch of people are excited about writing compilers and learning Rust, should I be doing those things too?</p>

<p>I have a few ideas for some quick iOS apps that I&rsquo;d like to try to implement in Swift, that are more of a game/drawing style of app that use more math, graphics, and touch interface than the social utility apps I&rsquo;ve written in the past, which tended to take advantage of Apple&rsquo;s great built in user interface elements more than custom graphics and animations. Looking forward to the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 8]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T20:53:29-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>I finished a <a href="https://github.com/lauraskelton/secrethandshake">new iPhone app</a> today!! It was inspired by someone at the Swift meetup saying that Hacker School was like the new Freemasons &ndash; some kind of secret society that instantly connected you with other people. I had such a good time talking to some Hacker School alums I hadn&rsquo;t met before, that I thought it would be good to have an app that would let me know at future meetups whether there were any other Hacker Schoolers in the room.</p>

<p>In iOS 7, Apple introduce iBeacons, a proximity beacon built on top of Bluetooth LE. IPhones can scan for iBeacon signals, and display special hyperlocal information when they come within range of one, such as at a store display or at a particular museum exhibit. The iBeacon signal can even wake up an iPhone that is inactive with an alert and a notification banner.</p>

<p><img class="center" src="/images/posts/8ibeacon.jpg" title="&lsquo;ibeacon&rsquo;" ></p>

<p>The really exciting thing is that iPhones can also act as iBeacon emitters as well as receivers. You can send out an iBeacon signal from your phone while also scanning for similar signals from other people&rsquo;s phones.</p>

<p>```objc
&ndash; (void)initBeacon {</p>

<pre><code>self.beaconRegion = [[CLBeaconRegion alloc] initWithProximityUUID:uuid
                                                            major:1
                                                            minor:userID
                                                       identifier:@"someregion"];
</code></pre>

<p>}</p>

<ul>
<li>(void)transmitBeacon
{
      self.beaconPeripheralData = [self.beaconRegion peripheralDataWithMeasuredPower:nil];
      self.peripheralManager = [[CBPeripheralManager alloc] initWithDelegate:self
                                                                       queue:nil
                                                                     options:nil];
}
```</li>
</ul>


<p>I set up my app so that each user&rsquo;s phone emits an iBeacon signal that includes their userID. Each phone also scans for other signals, and if it finds that of another Hacker Schooler&rsquo;s phone, it sends an alert to the scanner&rsquo;s phone and downloads a profile photo, name, and batch of the nearby person. That way, you could make sure to stop by and chat with that person at a conference or meetup.</p>

<p>So far it seems to be working well, but I definitely need beta testing help from some other Hacker School folks who wouldn&rsquo;t mind giving some feedback. I have it up on TestFlight if you have an iPhone and time to test it out! <a href="http://tflig.ht/1stcVLG">http://tflig.ht/1stcVLG</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 7]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T08:15:31-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I started off working on my beer neural network a bit more. I figured out part of the problem that was giving me data that didn&rsquo;t feel right, which had to do with changing the inputs to give an incomplete picture of the outputs to force the neural network to draw more meaningful connections between the missing beer ratings and the existing beer ratings. Basically, I erased half of the beer ratings from each user from the &ldquo;input&rdquo; dataset, and left the &ldquo;output&rdquo; dataset the same, so the network would have to actually predict and couldn&rsquo;t cheat by just figuring out how to compress the ratings down to 10 nodes and then decompress them back to 900 nodes using tricky math.</p>

<p><img class="center" src="/images/posts/7neuralnetwork.png" title="&lsquo;neural network&rsquo;" ></p>

<p>Now that the neural network is actually learning, I can&rsquo;t seem to get my error rate down to a level I&rsquo;m happy with. I&rsquo;m going to keep working on tweaking the parameters of the neural network to see if I can get it to output something cool that I can share.</p>

<p>While my computer was crunching away at reducing the neural network&rsquo;s error, I took a coffee break down the street with a few friends, which led to a fascinating conversation that lasted a couple of hours, mainly about Mesh Networking and Cryptocurrencies. I learned a lot about how different cryptocurrencies work, including Namecoin, which is linked to your domain name and can validate you, and another cryptocurrency that includes its own programming language that can have actually have contracts embedded in code within a transaction.</p>

<p><img class="center" src="/images/posts/7dogecoin.png" title="&lsquo;dogecoin&rsquo;" ></p>

<p>We went down a pretty complicated rabbit hole of trying to figure out if there was a way to solve some problems in Mesh Networking by linking it with a cryptocurrency, either to validate the identity of nodes to allow secure communication without a centralized server (replacing SSL), or to pay central nodes for traffic they routed in order to reward mesh network users to be good citizens and stay connected to the mesh routing messages between other nodes even when they weren&rsquo;t personally using it.</p>

<p><img class="center" src="/images/posts/7torcoin.jpg" title="&lsquo;torcoin&rsquo;" ></p>

<p>We ended up talking about an idea to combine a social network with mesh network routing or  secure direct connections by using an app with Bluetooth LE to confirm in person that each person in my inner circle is who they say they are. Each of those people could do the same thing for their trusted friends, and then we would have a network of nodes each with a certain degree of social separation and therefore degree of trustedness which we could use to priorities routing of messages.</p>

<p><img class="center" src="/images/posts/7weboftrust.png" title="&lsquo;web of trust&rsquo;" ></p>

<p>We left with some interesting ideas and a bunch of reading to do on Mesh Networking. It turns out that the idea of compensating for node bandwidth was discussed in <a href="http://dedis.cs.yale.edu/dissent/papers/hotpets14-torpath.pdf">a recent paper about TorCoin</a>, which would be &ldquo;mined&rdquo; by routing traffic over the Tor network, and then could be sold in altcoin exchanges, encouraging good behavior on the network. We also decided to read through <a href="https://en.wikipedia.org/wiki/Wireless_mesh_network#Routing_protocols">an overview of the many previously attempted mesh network routing protocols</a> to get a clearer picture of benefits and pitfalls of different approaches. There is also <a href="http://www.amazon.com/Linked-The-New-Science-Networks/dp/0738206679">a book that discusses the inherent properties of many types of networks</a> that sounds like an interesting read.</p>

<p><img class="center" src="/images/posts/7meshnetwork.jpg" title="&lsquo;mesh network&rsquo;" ></p>

<p>I was totally re-energized by this discussion, and decided to figure out iBeacons so I can make a fun Objective-C app for Hacker School. When I went to the Swift meetup at Etsy, almost everyone I met was excited about Hacker School, and I instantly had something to talk about with the new people I was meeting. On top of that, a few Hacker School alumni came out to the bar in Dumbo after the meetup, which was very cool. The app idea was inspired by a comment someone made that night that Hacker School was like the new Freemasons.</p>

<p><img class="center" src="/images/posts/7ibeacon.jpg" title="&lsquo;ibeacons&rsquo;" ></p>

<p>I finished up the nitty gritty late into the evening, and should have a fully working app ready for testing tomorrow!</p>
]]></content>
  </entry>
  
</feed>
