<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-07-15T12:26:48-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Week 5: VIPER iOS Architecture and Recursion]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/07/12/hacker-school-week-5/"/>
    <updated>2014-07-12T11:01:47-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/07/12/hacker-school-week-5</id>
    <content type="html"><![CDATA[<p>I decided that for the rest of my time at Hacker School, I&rsquo;m going to work on rewriting from scratch my very first iPhone app, <a href="https://github.com/lauraskelton/beerchooser">BeerChooser</a>, including the entire iOS app, the server-side API, and a simple responsive web app.</p>

<p><img class="center" src="/images/posts/17bcscreengrab.jpg" title="&lsquo;BeerChooser 2.0&rsquo;" ></p>

<p>I wrote the BeerChooser website as my first major development project back in 2009. It took existing user ratings of different beers to predict what someone would think of a beer they hadn&rsquo;t tried yet. I taught myself Objective-C in 2010 and released it as an iPhone app that fall. It was featured in the App Store and several thousand users signed up, recording over 200,000 beer ratings.</p>

<p>I&rsquo;m in the process of rewriting BeerChooser using all of the things I&rsquo;ve learned in the intervening years. It has unit tests using the <a href="https://github.com/specta/specta">Specta framework</a>, continuous integration through GitHub and <a href="https://travis-ci.org">Travis CI</a>, and a highly modular, testable architecture inspired by the new <a href="http://www.objc.io/issue-13/viper.html">VIPER model</a>.</p>

<p>This week, I learned how to use a bunch of new iOS development tools, and finished writing the main module of the app using a <a href="http://www.objc.io/issue-13/viper.html">VIPER-inspired architecture</a>, which is a list of beers with their predicted ratings connected to the server API.</p>

<p><a href="http://www.objc.io/issue-13/viper.html">VIPER</a> is an application of <a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> to iOS apps. It attempts to solve the common issue of the way the software architectural pattern MVC (Model-View-Controller) works out in iOS to result in <a href="https://twitter.com/Colin_Campbell/status/293167951132098560">Massive View Controllers</a>.</p>

<p>This results in code that is very difficult to reuse and even to maintain. The data is mixed up in the view controller, which may be a delegate for many other things that are happening in the app other than just displaying the view. The User Interface code tends to get mixed up within the same file that is controlling much of the application&rsquo;s behavior, making it a huge undertaking to make changes to the user interface, and forcing you to rewrite tests to ensure that your application&rsquo;s basic behavior is still working after you change the look of the app.</p>

<p><img class="center" src="/images/posts/17viper.jpg" title="&lsquo;VIPER Architecture&rsquo;" ></p>

<p>VIPER separates out each basic function of the app into its own module, and within the module it separates out methods pertaining to the view/user interface (the View) from methods which react to user inputs and prepares content for display (the Presenter), from methods which contain the main business logic of the app (the Interactor), from Entities (the data objects used by the Interactor), from Routing (the wireframes that present and dismiss views at appropriate times), from the Data Managers that talk to the Data Store.</p>

<p><img class="center" src="/images/posts/17vipergraph.png" title="&lsquo;VIPER Diagram&rsquo;" ></p>

<p>This makes it MUCH easier to change out one of these pieces entirely (such as changing the UI from a list of items to a grid of thumbnails, or changing the data store from Core Data to simple SQLite, without affecting the other pieces at all. It also means that, when starting a new app project, you can reuse much of your well-tested code from an older project, and only change out the pieces related to different types of data or a different interface look in the new app.</p>

<p>Moving forward, I&rsquo;m going to work on re-creating the multiple tabs of the original app, which had different beer lists including suggested beers you&rsquo;d like, your previous ratings, nearby beers, search, and a list of widely available beers to get started with rating. It&rsquo;s been intersting thinking about the best way to structure the data to account for the separate lists, figuring out when and how the data should refresh, and how to integrate the network calls to the API with the app&rsquo;s data managers to follow the spirit of the VIPER model.</p>

<p>On Friday, I worked on <a href="https://github.com/lauraskelton/recursion">some Recursion exercises</a>. I decided to implement these in Swift, to get a chance to practice with the new language, and also because Swift playgrounds are perfect for implementing new algorithms and data structures and getting immediate feedback on how they are working. I found that the trickier problems were a lot easier if I first broke them down into a few simple cases, such as for 2 or 3 items. I wrote functions for those cases, then could visualize much more easily what the general recursive function would look like for <code>n</code> items, and was able to write that.</p>

<p>```objc
// function for returning all reordering variations of an array of characters</p>

<p>// for string of n, there are n times swap(n-1) variations</p>

<p>// swap n items
func swapn(letters: [Character]) &ndash;> [[Character]] {</p>

<pre><code>var returnArray : [[Character]] = []

if letters.count &lt; 2 {
    // return letters, because it is only variation
    return [letters]
}

// special case to swap 2 characters
if letters.count == 2 {
    var thisArray = letters
    returnArray += thisArray
    let second = thisArray[1]
    thisArray[1] = thisArray[0]
    thisArray[0] = second
    returnArray += thisArray
    return returnArray
}

for index in 0..&lt;letters.count {
    var thisArray = letters
    let removed = thisArray.removeAtIndex(index)
    let nArr = swapn(thisArray)
    for anArray in nArr {
        var newArr = anArray
        newArr.insert(removed, atIndex: index)
        returnArray += newArr
    }
}
return returnArray
</code></pre>

<p>}
```</p>

<p>I also learned about memoizing from working on a Fibonacci function (where each number is the sum of the previous two numbers). My original simple implementation was easy, but since it calculated every number from scratch, it got extremely slow with numbers that were slightly larger.</p>

<p>```objc
// Fibonacci</p>

<pre><code>func fibSimple(n:Int) -&gt; Int {
    if n == 0 {
        return 0
    } else if n == 1 {
        return 1
    }
    return fibSimple(n-1) + fibSimple(n-2)
}
</code></pre>

<p>```</p>

<p>&ldquo;Memoizing&rdquo; just meant implementing the function the same way I would do the calculations by hand. I wouldn&rsquo;t look all the way back to <code>fib[0]</code> to calculate <code>fib[12]</code> &ndash; I would save the first time I calculated <code>fib[10]</code> and <code>fib[11]</code> and use those stored values to quickly calculate <code>fib[12]</code>. I wrote a new function that used an array to store previously calculated values of <code>fib</code>, and because Swift automatically compiles, I could see right away how dramatically faster this was than the original implementation.</p>

<p>```objc</p>

<p>class fib {</p>

<pre><code>var arrayCache: [Int]

init () {
    self.arrayCache = [0,1]
}

// Fibonacci
// Memoized Array
func fibArr(n:Int) -&gt; Int {
    if arrayCache.count &lt;= n {
        arrayCache += fibArr(n-1) + fibArr(n-2)
    }
    return arrayCache[n]
}
</code></pre>

<p>}</p>

<p>```</p>

<p>I also learned how to take advantage of <a href="http://en.wikipedia.org/wiki/Tail_call">Tail Calls</a> in recursive functions. Here&rsquo;s one way to set up a simple function that returns the sum of numbers in an array.</p>

<p>```objc
func listSum (numbers: [Int]) &ndash;> Int {</p>

<pre><code>if numbers.count == 0 {
    return 0
}
var nextNumbers = numbers
var thisNum = nextNumbers.removeAtIndex(0)
return thisNum + listSum(nextNumbers)
</code></pre>

<p>}</p>

<p>```</p>

<p>This works, but the problem is that the function ends up stacking up a whole bunch of function calls until it finally gets a value for the last listSum (when <code>numbers.count</code> finally is zero), then it has to go back up through each level and add in <code>thisNum</code> until it gets back to the top. This is fine if you have, say, 10 numbers to add up, but if you had a very large array, remembering all of those nested functions would overwhelm the computer.</p>

<p><img class="center" src="/images/posts/17nontailrecursion.gif" title="&lsquo;Recursion&rsquo;" ></p>

<p>Instead, there&rsquo;s a tricky way to rewrite this so that the entire calculation is passed along to the next call of the recursive function. Then, the entire sum calculation happens when the recursion gets to the bottom (when <code>numbers.count</code> is zero), and it doesn&rsquo;t ever need to come back up to the highest-level function call, it just needs to return that final calculation. The trick is that the computer realizes it can forget about all of those nested functions, and just move the return along to the new recursive function call each time the entire calculation is passed along. Here&rsquo;s an example of how to rewrite the above sum function to take advantage of a tail call.</p>

<p>```objc
func listSum (numbers:[Int], sum_so_far:Int) &ndash;> Int {</p>

<pre><code>if numbers.count == 0 {
    return sum_so_far
}
var newSum = sum_so_far + numbers[0]
var nextNumbers = numbers
nextNumbers.removeAtIndex(0)
return listSum(nextNumbers, newSum)
</code></pre>

<p>}
```</p>

<p>This way, it skips all of those nested calculations and just returns the value calculated at the end.</p>

<p><img class="center" src="/images/posts/17tailrecursion.gif" title="&lsquo;Tail Recursion&rsquo;" ></p>

<p>In other news, <a href="https://github.com/aeyakovenko/">Anatoly</a> visited, and we got a chance to explore the city a bit outside of Hacker School. We checked out an amazing experimental theater project called <a href="http://www.nytimes.com/2013/08/11/theater/then-she-fell-is-inspired-by-lewis-carrolls-life-and-work.html">Then She Fell</a>, which might have been the best theatrical performance I&rsquo;ve ever been to. It is a totally immersive, participatory experience based on the writings of Lewis Carroll, with only 15 audience members per show. You are frequently alone with the performers, there are delicious &ldquo;elixers&rdquo; served throughout the 2-hour performance, and everyone&rsquo;s experience is different. I&rsquo;d highly recommend checking it out!</p>

<p><img class="center" src="/images/posts/17thenshefell.jpg" title="&lsquo;Then She Fell&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 15: Mesh Messaging and ASCII Photo Booths]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15/"/>
    <updated>2014-06-30T20:30:06-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15</id>
    <content type="html"><![CDATA[<p>I completely reworked my <a href="https://github.com/lauraskelton/imesh">ad-hoc mobile networking app</a>. It had been set up so that each time a phone had a message to send, it would advertise itself over Bluetooth LE, connect to other phones as a peripheral, send the message, then close the connection.</p>

<p>I reworked the entire process. Now, the phones are still listening most of the time for other devices, but each periodically broadcasts itself (and becomes discoverable) at random intervals every few minutes. When phones discover each other, they connect and subscribe to push notifications from each other. That way, when there is a message to send, it transmits to all connected devices in a split second.</p>

<p><img class="center" src="/images/posts/14adhocnetwork.gif" title="&lsquo;Split Ad-Hoc Network&rsquo;" ></p>

<p>There&rsquo;s still some debugging to do with connection stability and perfecting the advertising interval so that devices become connected quickly, but so far it is working quite well! I&rsquo;m excited to finish getting the base network established so that I can play around with different network setups that could be built with the technology. I was intrigued by some <a href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/">earlier conversations about secure communications and web-of-trust networks</a>, as well as <a href="http://ghost.lesiuk.org/AdHoc/network_simulator/">different optimizations for routing the packets beyond simple broadcasting</a>, and it would be cool to use Bluetooth LE to build this.</p>

<p><img class="center" src="/images/posts/14adhocrouting.gif" title="&lsquo;Ad-Hoc Specific Route&rsquo;" ></p>

<p>We were talking about what type of photo booth would be appropriate for a Hacker School party, and I had the idea for a fun modification to the booth that would take 4 photos, turn each into ASCII art (green on a black background), and then make an animated GIF image from them that could be projected continuously during a party, inspired by <a href="https://github.com/oxling/iphone-ascii">Amy&rsquo;s ASCII Cam project</a>.</p>

<p><img class="center" src="/images/posts/14asciiphoto.gif" title="&lsquo;ASCII Photo&rsquo;" ></p>

<p>Totally coincidentally, when checking out <a href="https://hackmanhattan.com/2014/06/facetron6000-at-figment-2014/">Hack Manhattan</a>, I came across their recent ASCII photo booth project, which takes a photo, converts it to ASCII art, then actually has an Arduino-controlled vintage typewriter type it out onto a sheet of paper for the user to take with them. So cool!</p>

<p><img class="center" src="/images/posts/14asciitypewriter.jpg" title="&lsquo;ASCII Typewriter Booth&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 14: URL Shortener]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14/"/>
    <updated>2014-06-28T20:58:14-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14</id>
    <content type="html"><![CDATA[<p>I went to the Jobs Practice session on Friday and worked on the assigned project of making a quick URL shortener in 2 hours, which is practice for interview projects. I&rsquo;d never done a URL shortener before, and hadn&rsquo;t worked on web/PHP type stuff in awhile since I switched to iOS apps, so I was excited for the change of pace and the well-defined project.</p>

<p>I was confident that I could write a PHP script very quickly to do the URL shortening and routing, but as I put this up under a subdomain of an existing server I had running for another site, I had to make some tricky changes to the <code>.htaccess</code> file so that Apache would reroute all of the URLs for my shortener to the <code>index.php</code> file with all of my routing scripts. This proved trickier than I expected, since I&rsquo;m not super familiar with the syntax of the <code>.htaccess</code> file and had some trouble getting it to route things properly.</p>

<p>Finally I got the <code>.htaccess</code> file to send things to my script so I could actually write the shortener, but I&rsquo;d like to revisit it this week and learn enough that I can write that part more confidently in the future, and so that I can implement this version better than it currently is written.</p>

<p>I catch short URLs by grabbing the URL with PHP, then look up the short link in the MySQL database, and then redirect the page to the long URL.</p>

<p>```php
if ((strlen($shorturl) > 0) &amp;&amp; $shorturl != &ldquo;shorten&rdquo;) {</p>

<pre><code>    # should redirect to this url

$query = "
    SELECT
    id,
    short,
    url
    FROM urllinks
    WHERE
    short = :shortlink
    ";
    $query_params = array(
                          ':shortlink' =&gt; $shorturl
                          );

    try{
        $stmt = $db-&gt;prepare($query);
        $result = $stmt-&gt;execute($query_params);
    }
    catch(PDOException $ex){ die("Failed to run query: " . $ex-&gt;getMessage()); }
    $goturl_ok = false;
    $row = $stmt-&gt;fetch();
    if($row){
        $goturl_ok = true;
    }

    if($goturl_ok){
        # redirect to the url
        header("Location: " . $row[url]);
        die("Redirecting to: " . $row[url]);
    } else{
        print("Redirect Failed. No such link.");
    }
</code></pre>

<p>}
```</p>

<p>If it&rsquo;s not a short URL, then I look for <code>POST</code> variables to see if the user is trying to shorten their own URL. If so, and if it&rsquo;s a valid URL, I generate a random string of 6 characters and store them in the database with the URL they should point to.</p>

<p>```php
if(!empty($_POST[&lsquo;urltoshorten&rsquo;])){</p>

<pre><code>if (filter_var($_POST['urltoshorten'], FILTER_VALIDATE_URL) === FALSE) {
    echo "&lt;p&gt;URL '" . $_POST['urltoshorten'] . "' is not valid.&lt;/p&gt;";
} else {

    function random_string($length = 6, $chars = '1234567890qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM')
    {
        $chars_length = (strlen($chars) - 1);
        $string = $chars{rand(0, $chars_length)};

        for ($i = 1; $i &lt; $length; $i = strlen($string))
        {
            $r = $chars{rand(0, $chars_length)};
            $string .=  $r;
        }
        return $string;
    }

    $shortstring = random_string();

    $query = "
    INSERT INTO urllinks (short, url)
    VALUES (:shortstring, :urltoshorten)
    ";
    $query_params = array(
                          ':shortstring' =&gt; $shortstring,
                          ':urltoshorten' =&gt; $_POST['urltoshorten']
                          );

    try{
        $stmt = $db-&gt;prepare($query);
        $result = $stmt-&gt;execute($query_params);
    }
    catch(PDOException $ex){ die("Failed to run query: " . $ex-&gt;getMessage()); }
    $goturl_ok = false;
    $row = $stmt-&gt;rowCount();
    # share the new short url
    echo '&lt;p&gt;Shortened URL to &lt;a href="http://prty.us/' . $shortstring . '"&gt;' . 'http://prty.us/' . $shortstring . '&lt;/a&gt;&lt;/p&gt;';
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Otherwise, I return a pretty form for URL shortening that posts to this same page.</p>

<p>```php
<form method="post" action="http://prty.us/shorten" id="shortenurlform"></p>

<pre><code>&lt;div&gt;
    &lt;label for="urltoshorten"&gt;Enter your URL to shorten:&lt;/label&gt;
    &lt;input type="text" class="input-field" id="urltoshorten" name="urltoshorten" value=""&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;input type="submit" class="btn btn-default"&gt;
&lt;/div&gt;
</code></pre>

<p></form>
```</p>

<p><a href="http://prty.us/shorten">Check it out!</a> It was cool how simple this was to implement (the PHP part at least). I used <a href="http://getbootstrap.com">Twitter Bootstrap</a> along with a template I&rsquo;ve used previously to get something nice-looking up very quickly. It&rsquo;s also responsive (everything rearranges nicely if the screen size is smaller, like on your phone) without putting really any extra work into it, since that&rsquo;s part of Bootstrap.</p>

<p>This made me miss doing web stuff and I&rsquo;m thinking of doing more web development while I&rsquo;m here. I find that every project I make needs a good website even just for marketing, and responsive mobile-friendly websites can be a great way to extend an iOS app&rsquo;s functionality to other device platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 13: Mesh Messaging App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13/"/>
    <updated>2014-06-26T20:26:50-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>I couldn&rsquo;t get my SecretHandshake app to work properly today after the OAuth changes I&rsquo;d made, so I got to go on a bug-finding detective mission. I couldn&rsquo;t find any code I changed that would make the app suddenly never have its bluetooth delegate methods called, and a lot of error-finding logs that were never called and indicated that nothing was wrong.</p>

<p>I used Git to create a branch of the project from the last version I know for sure works, which I have on TestFlight. I built that and ran it on the device, and it still didn&rsquo;t work! At first I was frustrated, but then I realized that it meant it wasn&rsquo;t anything in the code that was the problem after all. If I built it in the XCode6 beta, it wouldn&rsquo;t ever detect other iBeacons, but if I built it in XCode5, it worked perfectly. Because I can&rsquo;t build for iOS8 from XCode5, that means that I can&rsquo;t get it to run on my iPod anymore at all. Hoping it&rsquo;s a bug in the XCode beta and not some mysterious unannounced change in the OS that breaks iBeacons.</p>

<p>In the afternoon, I got to work laying out the framework for a Bluetooth LE based mobile ad-hoc mesh network using iPhones and CoreBluetooth (a lower level framework than iBeacons that allows me to send longer messages between phones). I built a simple app that lets you input a message and broadcast it to any other phones in range. It was very exciting that it works! I couldn&rsquo;t get out of range of the phones while in the Hacker School space, so I&rsquo;m looking forward to testing out whether the hopping is working (the phone that receives the message broadcasts it on to other phones).</p>

<p><img class="center" src="/images/posts/13mobileadhoc.jpg" title="&lsquo;Mobile Ad Hoc Network&rsquo;" ></p>

<p>I&rsquo;m interested in pairing with some friends to figure out a network protocol that would work for sending messages between phones and for building the network. To send directed messages instead of broadcast, should there be a &ldquo;message received&rdquo; response sent by the phone when it gets there? Perhaps the &ldquo;message&rdquo; is modified in some way by each phone with headers indicating the path it successfully took to get to the intended recipient the fastest, which we could store as a way to map the network. I&rsquo;m also interested in what we had discussed earlier in linking the mesh network to a trusted friend group to allow secure messages to be sent to the people they&rsquo;re intended for.</p>

<p><img class="center" src="/images/posts/13weboftrust.jpg" title="&lsquo;Web of Trust&rsquo;" ></p>

<p>The TorCoin model for route signing by each node is inspiring me with ideas for how each node in a mobile ad hoc mesh network might sign a message such that the network could perhaps get smarter about routing messages without having to broadcast everything to each node. Maybe we could incorporate a little bit of machine learning into the Mesh Messaging app (&hellip;meshaging?) to figure out the best routes to try for reaching particular nodes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 12: OAuth Success and Focusing on Goals]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/25/hacker-school-day-12/"/>
    <updated>2014-06-25T19:37:54-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/25/hacker-school-day-12</id>
    <content type="html"><![CDATA[<p>I grabbed coffee in the morning with <a href="https://github.com/oxling">Amy</a> who does iOS development at Etsy, and she gave me some incredibly helpful advice on things to be sure to focus on while I&rsquo;m at Hacker School. I left feeling excited about an idea from earlier in the batch of setting up an ad-hoc mobile network using iPhones over Bluetooth LE, and am hoping to get to work on implementing version one of that project. She also recommended contributing to a larger open-source project as a good way for someone like me who&rsquo;s always worked independently on my own apps to get used to working within someone else&rsquo;s larger code framework, which would be very relevant to doing iOS at a company where many developers are contributing to one project.</p>

<p>After talking through my OAuth handling in the Secret Handshake app with a couple of other Hacker Schoolers, and walking through each step in the OAuth process, I realized that I could handle the entire OAuth verification from within my iOS app, without relying on the external PHP file to request an access token from the server. I rewrote the OAuth handling in the app to use a custom URL scheme that redirects to my app as the Hacker School API redirect, and successfully got everything working. I wrote up an overview of the OAuth process on <a href="https://github.com/lauraskelton/secrethandshake">the app&rsquo;s GitHub readme page</a>, along with the exact query parameters that are required by the API at each step.</p>

<p>Later I finished up with getting a handle on iOS&rsquo;s SpriteKit by implementing a Space Invaders game in Swift. I learned how to attach sound effects to actions in the game such as firing a bullet or a collision between two sprites on the screen (like an enemy and a bullet), how to keep score, and how to transition between different scenes in the game.</p>

<p><img class="center" src="/images/posts/12spaceinvadersprite.jpg" title="&lsquo;Space Invaders in Swift&rsquo;" ></p>

<p>Following the repeated advice of Hacker School alumni, I decided to move on from the Space Invaders game as soon as I felt like I was no longer learning from it. I got a general sense of setting up the game play, but I stopped before making a perfect implementation of every feature in the original game. This is a big change from how I usually work&mdash; I feel a huge push to finish and perfect the work that I start, and it feels very strange and pretty luxurious to stop a project when it&rsquo;s stopped being educational for me, but after refocusing on my goals a bit yesterday I&rsquo;m impatient to learn new things.</p>

<p>I&rsquo;ve been having trouble balancing two different ways of taking full advantage of my time at Hacker School. One is that I love being around so many smart, energetic peers who I can learn from and work with, and I have such a short period of time here to have access to that. I love the energy I get from talking to other Hacker Schoolers about code and projects, and there is so much that I&rsquo;ve learned so quickly from other people here both through casual conversation over coffee and in a more formal study-group setting. I feel a lot of pressure to break out of my slightly more comfortable/habitual zone of coding alone to pair with and talk with other people at Hacker School, and to be involved in group projects that are happening around me.</p>

<p>This, combined with an impulse to grab hold of any kind of formalized workshop-style learning that&rsquo;s happening around me due to the reassurance it gives that I&rsquo;m for sure learning/accomplishing something if I participate in those, keeps leading me to participate in more formal talks/workshops that are happening in the space. It seems to reinforce my fear of missing out on learning whenever I see a group of Hacker Schoolers working through something in Hopper (the large group-work room) and I&rsquo;m not participating. It feels like skipping class.</p>

<p><img class="center" src="/images/posts/12hopper.jpg" title="&lsquo;Hopper&rsquo;" ></p>

<p>Then I go to a bunch of workshops, and sometimes they&rsquo;re amazingly helpful and right in line with what my learning goals are here. And I think, I should go to more of these! But, other times, I realize a few minutes in that the workshop&rsquo;s focus is not furthering my goals, and I get frustrated at missing out on what could have been coding time, which feels so limited already as my time at Hacker School is flying by.</p>

<p>So, I think I need to just be more aware of the pitfalls of participating in something just because I feel like I &ldquo;should&rdquo;, and do a check with myself before I sign up for things during Hacker School hours to make sure they line up well with what I&rsquo;m already working on and interested in here.</p>
]]></content>
  </entry>
  
</feed>
