<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Hacker School Log]]></title>
  <link href="http://lauraskelton.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-07-30T16:28:16-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Week 6: Modular Application Design and Swift in the Terminal]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/07/19/hacker-school-week-6/"/>
    <updated>2014-07-19T12:34:20-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/07/19/hacker-school-week-6</id>
    <content type="html"><![CDATA[<p>This week I worked on fleshing out my rewrite of BeerChooser, my first iPhone app from 2010. I had written a Beer List module last week, and I realized that I could use several instances of this same module for each of the tabs in my beer app, instead of the similar-but-separate view controllers of my original app. This fits well with my goal of making bug-discouraging, maintainable code using a more modular architecture than is usually used in iOS development.</p>

<p>I realized that the only things that were different in each tab in my beer app were the title, the tab image, and the data source for the list of beers, and that I could create something that would allow me to change only these settings for each instance of the beer list module.</p>

<p>At first, I used an enum for the different tab settings.</p>

<p>```objc
//  PageTypeDef.h</p>

<p>typedef NS_ENUM(NSInteger, PageType) {</p>

<pre><code>firstPage = 0,
PAGE_NEARBY = firstPage,
PAGE_RATINGS,
PAGE_POPULAR,
PAGE_SUGGESTIONS,
lastPage = PAGE_SUGGESTIONS
</code></pre>

<p>};
```</p>

<p>This worked, and took advantage of reusing the module code like I wanted (which eliminates the bugs you can get from having to copy a change over to nearly-identical code in another class), but it was not a very object-oriented programming way of doing things, and it created work and bug-possibilities due to all of the switch statements it needed for managing the different property settings for each enum type.</p>

<p>```objc
+ (NSString *)sectionTitleForType:(PageType)pageType
{</p>

<pre><code>switch (pageType) {
    case PAGE_NEARBY:
        return @"Nearby Beers";
        break;
    case PAGE_POPULAR:
        return @"Popular Beers";
        break;
    case PAGE_RATINGS:
        return @"Your Ratings";
        break;
    case PAGE_SUGGESTIONS:
        return @"Beers to Try";
        break;

    default:
        break;
}
</code></pre>

<p>}
```</p>

<p>After talking through some of the problems with this solution, I had the idea of using a Property List to define the particulars of each tab, and the loading the .plist into a class and pulling out the dictionary keys of each tab to define the settings for that Beer List module instance.</p>

<p><img class="center" src="/images/posts/wk6-pagetypes.jpg" title="&lsquo;Page Types Plist&rsquo;" ></p>

<p>This greatly simplified the code for defining the properties of a Beer List instance, and makes it incredibly easy to update and maintain, with a low likelihood of introducing bugs through editing page titles. To reorder the tabs, I just drag that tab&rsquo;s dictionary to a different position in the Property List array, and the tabs reorder themselves to match.</p>

<p>```objc
&ndash; (NSString *)pageTitle
{</p>

<pre><code>return self.plist[PageTitleKey];
</code></pre>

<p>}</p>

<ul>
<li><p>(NSString *)tabTitle
{
  return self.plist[TabTitleKey];
}</p></li>
<li><p>(NSString *)tabImageName
{
  return self.plist[TabImageKey];
}</p></li>
<li><p>(NSString *)apiLink
{
  return self.plist[APILinkKey];
}</p></li>
<li><p>(NSString *)indexKey
{
  return self.plist[IndexNameKey];
}</p></li>
</ul>


<p>```</p>

<p>I figured out a sensible way to add a network API manager within the framework of the VIPER software architecture model. In order to keep network separated from the rest of my application code, I created a network API manager in a similar way to the local data store manager.</p>

<p>There&rsquo;s a base API manager class for the entire application, which is the only class that actually talks to the server and knows that I&rsquo;m using the <a href="http://afnetworking.com">AFNetworking</a> framework to manage server requests. This is awesome because if I decide to use another framework, I only have to worry about updating one file. This same file loads in my secret Configuration variables (like my OAuth Client ID and Client Secret, which are cleverly hidden from my public GitHub repository using <a href="http://blog.lazerwalker.com/blog/2014/05/14/handling-private-api-keys-in-open-source-ios-apps/">this technique Mike Walker shared with me</a>), and remembers the base URL of my server. It knows how to send a general <code>POST</code> request to the server, and adds the authentication parameters to the request it&rsquo;s told to send.</p>

<p>Then, each module has its own API manager that&rsquo;s in charge of talking to the base API manager, which calls the API link for the instance, and manages saving the beers with the proper index for that instance.</p>

<p>I&rsquo;ve found that using a more robust, maintainable architecture in my application has slowed down my development a bit, as for each feature I add (such as communicating with an API), I have to stop and think about the smartest way to implement that feature to keep to the goal of modular code with different aspects kept separated. The plus side is that it seems to just work in a way that Massive View Controller-style programming often does not, so some of the initial design time is saved in much less debugging time. Plus, as soon as you need to make a change (to the view layout, to the data store, etc), the time saved by having those aspects of the code in their own isolated files more than makes up for the initial time invested in separating these functions intelligently.</p>

<p>On Friday, I worked with <a href="https://github.com/thomasballinger">Tom</a> on <a href="https://code.google.com/codejam/contest/351101/dashboard">Google&rsquo;s Store Credit challenge</a> in Swift.</p>

<p>The problem:</p>

<blockquote><p>You receive a credit C at a local store and would like to buy two items. You first walk through the store and create a list L of all available items. From this list you would like to buy two items that add up to the entire value of the credit. The solution you provide will consist of the two integers indicating the positions of the items in your list (smaller number first).</p></blockquote>

<p>We spent a good amount of time figuring out how to use Swift to run in the terminal instead of how it would typically be used in Xcode as a file within an app project target. We were successful with this, and figured out not only how to read in text from a file on the local filesystem and output our answer to another local text file, but were successful in calling a Swift file to run in the terminal.</p>

<p>Running in the terminal:
```
/Applications/Xcode6-Beta3.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/swift -i StoreCredit.swift</p>

<p>```</p>

<p>Reading and writing text:
```objc
//reading
var text : String! = String.stringWithContentsOfFile(path, encoding: NSUTF8StringEncoding, error: nil)</p>

<p>//writing
outputString.writeToFile(pathAnswer, atomically: false, encoding: NSUTF8StringEncoding, error: nil)</p>

<p>```</p>

<p>This is great, because for larger computations like this, Swift Playgrounds will crash, or run so slowly that they never find an answer.</p>

<p>The <a href="https://github.com/lauraskelton/friday-exercises/blob/master/StoreCredit.swift">coding challenge itself</a> was a lot of fun. We created a dictionary that, for each item we found, stored its cost as a key in a dictionary, with the value being an array of each position in the original list of items where the item was found.</p>

<p>```objc
func findMatches(items:[NSInteger], keysDictionary:[NSInteger: [Int]], credit: NSInteger) &ndash;> (Int, Int)? {</p>

<pre><code>for anItem in items {

    let pairMatch : NSInteger = credit - anItem
    if let pairMatchPositions = keysDictionary[pairMatch] {
        // found a match
        if pairMatch == anItem {
            if pairMatchPositions.count &lt; 2 {
                continue
            }
            return (pairMatchPositions[0], pairMatchPositions[1])
        }
        return (keysDictionary[anItem]![0], pairMatchPositions[0])
    }
}
return nil
</code></pre>

<p>}
```</p>

<p>This solved the problem we initially ran into with repeated items being the answer, when we were using a dictionary with the keys being items, and the values being the (single) position where we found that item.</p>

<p>Every time we added a new item to the dictionary, we looked to see if the difference between that item and the store credit had been previously stored in the dictionary. If it was there, then we had our pair of items that we could buy with the store credit.</p>

<p>This was a TON of fun. I especially enjoyed starting off whiteboarding the problem, and discussing how various solutions would change if the constraints of the problem changed slightly, and then moving on to more individual coding solutions to the problem. I&rsquo;m hoping to spend a lot more time doing fun challenges like this in the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Week 5: VIPER iOS Architecture and Recursion]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/07/12/hacker-school-week-5/"/>
    <updated>2014-07-12T11:01:47-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/07/12/hacker-school-week-5</id>
    <content type="html"><![CDATA[<p>I decided that for the rest of my time at Hacker School, I&rsquo;m going to work on rewriting from scratch my very first iPhone app, <a href="https://github.com/lauraskelton/beerchooser">BeerChooser</a>, including the entire iOS app, the server-side API, and a simple responsive web app.</p>

<p><img class="center" src="/images/posts/17bcscreengrab.jpg" title="&lsquo;BeerChooser 2.0&rsquo;" ></p>

<p>I wrote the BeerChooser website as my first major development project back in 2009. It took existing user ratings of different beers to predict what someone would think of a beer they hadn&rsquo;t tried yet. I taught myself Objective-C in 2010 and released it as an iPhone app that fall. It was featured in the App Store and several thousand users signed up, recording over 200,000 beer ratings.</p>

<p>I&rsquo;m in the process of rewriting BeerChooser using all of the things I&rsquo;ve learned in the intervening years. It has unit tests using the <a href="https://github.com/specta/specta">Specta framework</a>, continuous integration through GitHub and <a href="https://travis-ci.org">Travis CI</a>, and a highly modular, testable architecture inspired by the new <a href="http://www.objc.io/issue-13/viper.html">VIPER model</a>.</p>

<p>This week, I learned how to use a bunch of new iOS development tools, and finished writing the main module of the app using a <a href="http://www.objc.io/issue-13/viper.html">VIPER-inspired architecture</a>, which is a list of beers with their predicted ratings connected to the server API.</p>

<p><a href="http://www.objc.io/issue-13/viper.html">VIPER</a> is an application of <a href="http://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html">Clean Architecture</a> to iOS apps. It attempts to solve the common issue of the way the software architectural pattern MVC (Model-View-Controller) works out in iOS to result in <a href="https://twitter.com/Colin_Campbell/status/293167951132098560">Massive View Controllers</a>.</p>

<p>This results in code that is very difficult to reuse and even to maintain. The data is mixed up in the view controller, which may be a delegate for many other things that are happening in the app other than just displaying the view. The User Interface code tends to get mixed up within the same file that is controlling much of the application&rsquo;s behavior, making it a huge undertaking to make changes to the user interface, and forcing you to rewrite tests to ensure that your application&rsquo;s basic behavior is still working after you change the look of the app.</p>

<p><img class="center" src="/images/posts/17viper.jpg" title="&lsquo;VIPER Architecture&rsquo;" ></p>

<p>VIPER separates out each basic function of the app into its own module, and within the module it separates out methods pertaining to the view/user interface (the View) from methods which react to user inputs and prepares content for display (the Presenter), from methods which contain the main business logic of the app (the Interactor), from Entities (the data objects used by the Interactor), from Routing (the wireframes that present and dismiss views at appropriate times), from the Data Managers that talk to the Data Store.</p>

<p><img class="center" src="/images/posts/17vipergraph.png" title="&lsquo;VIPER Diagram&rsquo;" ></p>

<p>This makes it MUCH easier to change out one of these pieces entirely (such as changing the UI from a list of items to a grid of thumbnails, or changing the data store from Core Data to simple SQLite, without affecting the other pieces at all. It also means that, when starting a new app project, you can reuse much of your well-tested code from an older project, and only change out the pieces related to different types of data or a different interface look in the new app.</p>

<p>Moving forward, I&rsquo;m going to work on re-creating the multiple tabs of the original app, which had different beer lists including suggested beers you&rsquo;d like, your previous ratings, nearby beers, search, and a list of widely available beers to get started with rating. It&rsquo;s been intersting thinking about the best way to structure the data to account for the separate lists, figuring out when and how the data should refresh, and how to integrate the network calls to the API with the app&rsquo;s data managers to follow the spirit of the VIPER model.</p>

<p>On Friday, I worked on <a href="https://github.com/lauraskelton/recursion">some Recursion exercises</a>. I decided to implement these in Swift, to get a chance to practice with the new language, and also because Swift playgrounds are perfect for implementing new algorithms and data structures and getting immediate feedback on how they are working. I found that the trickier problems were a lot easier if I first broke them down into a few simple cases, such as for 2 or 3 items. I wrote functions for those cases, then could visualize much more easily what the general recursive function would look like for <code>n</code> items, and was able to write that.</p>

<p>```objc
// function for returning all reordering variations of an array of characters</p>

<p>// for string of n, there are n times swap(n-1) variations</p>

<p>// swap n items
func swapn(letters: [Character]) &ndash;> [[Character]] {</p>

<pre><code>var returnArray : [[Character]] = []

if letters.count &lt; 2 {
    // return letters, because it is only variation
    return [letters]
}

// special case to swap 2 characters
if letters.count == 2 {
    var thisArray = letters
    returnArray += thisArray
    let second = thisArray[1]
    thisArray[1] = thisArray[0]
    thisArray[0] = second
    returnArray += thisArray
    return returnArray
}

for index in 0..&lt;letters.count {
    var thisArray = letters
    let removed = thisArray.removeAtIndex(index)
    let nArr = swapn(thisArray)
    for anArray in nArr {
        var newArr = anArray
        newArr.insert(removed, atIndex: index)
        returnArray += newArr
    }
}
return returnArray
</code></pre>

<p>}
```</p>

<p>I also learned about memoizing from working on a Fibonacci function (where each number is the sum of the previous two numbers). My original simple implementation was easy, but since it calculated every number from scratch, it got extremely slow with numbers that were slightly larger.</p>

<p>```objc
// Fibonacci</p>

<pre><code>func fibSimple(n:Int) -&gt; Int {
    if n == 0 {
        return 0
    } else if n == 1 {
        return 1
    }
    return fibSimple(n-1) + fibSimple(n-2)
}
</code></pre>

<p>```</p>

<p>&ldquo;Memoizing&rdquo; just meant implementing the function the same way I would do the calculations by hand. I wouldn&rsquo;t look all the way back to <code>fib[0]</code> to calculate <code>fib[12]</code> &ndash; I would save the first time I calculated <code>fib[10]</code> and <code>fib[11]</code> and use those stored values to quickly calculate <code>fib[12]</code>. I wrote a new function that used an array to store previously calculated values of <code>fib</code>, and because Swift automatically compiles, I could see right away how dramatically faster this was than the original implementation.</p>

<p>```objc</p>

<p>class fib {</p>

<pre><code>var arrayCache: [Int]

init () {
    self.arrayCache = [0,1]
}

// Fibonacci
// Memoized Array
func fibArr(n:Int) -&gt; Int {
    if arrayCache.count &lt;= n {
        arrayCache += fibArr(n-1) + fibArr(n-2)
    }
    return arrayCache[n]
}
</code></pre>

<p>}</p>

<p>```</p>

<p>I also learned how to take advantage of <a href="http://en.wikipedia.org/wiki/Tail_call">Tail Calls</a> in recursive functions. Here&rsquo;s one way to set up a simple function that returns the sum of numbers in an array.</p>

<p>```objc
func listSum (numbers: [Int]) &ndash;> Int {</p>

<pre><code>if numbers.count == 0 {
    return 0
}
var nextNumbers = numbers
var thisNum = nextNumbers.removeAtIndex(0)
return thisNum + listSum(nextNumbers)
</code></pre>

<p>}</p>

<p>```</p>

<p>This works, but the problem is that the function ends up stacking up a whole bunch of function calls until it finally gets a value for the last listSum (when <code>numbers.count</code> finally is zero), then it has to go back up through each level and add in <code>thisNum</code> until it gets back to the top. This is fine if you have, say, 10 numbers to add up, but if you had a very large array, remembering all of those nested functions would overwhelm the computer.</p>

<p><img class="center" src="/images/posts/17nontailrecursion.gif" title="&lsquo;Recursion&rsquo;" ></p>

<p>Instead, there&rsquo;s a tricky way to rewrite this so that the entire calculation is passed along to the next call of the recursive function. Then, the entire sum calculation happens when the recursion gets to the bottom (when <code>numbers.count</code> is zero), and it doesn&rsquo;t ever need to come back up to the highest-level function call, it just needs to return that final calculation. The trick is that the computer realizes it can forget about all of those nested functions, and just move the return along to the new recursive function call each time the entire calculation is passed along. Here&rsquo;s an example of how to rewrite the above sum function to take advantage of a tail call.</p>

<p>```objc
func listSum (numbers:[Int], sum_so_far:Int) &ndash;> Int {</p>

<pre><code>if numbers.count == 0 {
    return sum_so_far
}
var newSum = sum_so_far + numbers[0]
var nextNumbers = numbers
nextNumbers.removeAtIndex(0)
return listSum(nextNumbers, newSum)
</code></pre>

<p>}
```</p>

<p>This way, it skips all of those nested calculations and just returns the value calculated at the end.</p>

<p><img class="center" src="/images/posts/17tailrecursion.gif" title="&lsquo;Tail Recursion&rsquo;" ></p>

<p>In other news, <a href="https://github.com/aeyakovenko/">Anatoly</a> visited, and we got a chance to explore the city a bit outside of Hacker School. We checked out an amazing experimental theater project called <a href="http://www.nytimes.com/2013/08/11/theater/then-she-fell-is-inspired-by-lewis-carrolls-life-and-work.html">Then She Fell</a>, which might have been the best theatrical performance I&rsquo;ve ever been to. It is a totally immersive, participatory experience based on the writings of Lewis Carroll, with only 15 audience members per show. You are frequently alone with the performers, there are delicious &ldquo;elixers&rdquo; served throughout the 2-hour performance, and everyone&rsquo;s experience is different. I&rsquo;d highly recommend checking it out!</p>

<p><img class="center" src="/images/posts/17thenshefell.jpg" title="&lsquo;Then She Fell&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 15: Mesh Messaging and ASCII Photo Booths]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15/"/>
    <updated>2014-06-30T20:30:06-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15</id>
    <content type="html"><![CDATA[<p>I completely reworked my <a href="https://github.com/lauraskelton/imesh">ad-hoc mobile networking app</a>. It had been set up so that each time a phone had a message to send, it would advertise itself over Bluetooth LE, connect to other phones as a peripheral, send the message, then close the connection.</p>

<p>I reworked the entire process. Now, the phones are still listening most of the time for other devices, but each periodically broadcasts itself (and becomes discoverable) at random intervals every few minutes. When phones discover each other, they connect and subscribe to push notifications from each other. That way, when there is a message to send, it transmits to all connected devices in a split second.</p>

<p><img class="center" src="/images/posts/14adhocnetwork.gif" title="&lsquo;Split Ad-Hoc Network&rsquo;" ></p>

<p>There&rsquo;s still some debugging to do with connection stability and perfecting the advertising interval so that devices become connected quickly, but so far it is working quite well! I&rsquo;m excited to finish getting the base network established so that I can play around with different network setups that could be built with the technology. I was intrigued by some <a href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/">earlier conversations about secure communications and web-of-trust networks</a>, as well as <a href="http://ghost.lesiuk.org/AdHoc/network_simulator/">different optimizations for routing the packets beyond simple broadcasting</a>, and it would be cool to use Bluetooth LE to build this.</p>

<p><img class="center" src="/images/posts/14adhocrouting.gif" title="&lsquo;Ad-Hoc Specific Route&rsquo;" ></p>

<p>We were talking about what type of photo booth would be appropriate for a Hacker School party, and I had the idea for a fun modification to the booth that would take 4 photos, turn each into ASCII art (green on a black background), and then make an animated GIF image from them that could be projected continuously during a party, inspired by <a href="https://github.com/oxling/iphone-ascii">Amy&rsquo;s ASCII Cam project</a>.</p>

<p><img class="center" src="/images/posts/14asciiphoto.gif" title="&lsquo;ASCII Photo&rsquo;" ></p>

<p>Totally coincidentally, when checking out <a href="https://hackmanhattan.com/2014/06/facetron6000-at-figment-2014/">Hack Manhattan</a>, I came across their recent ASCII photo booth project, which takes a photo, converts it to ASCII art, then actually has an Arduino-controlled vintage typewriter type it out onto a sheet of paper for the user to take with them. So cool!</p>

<p><img class="center" src="/images/posts/14asciitypewriter.jpg" title="&lsquo;ASCII Typewriter Booth&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 14: URL Shortener]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14/"/>
    <updated>2014-06-28T20:58:14-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14</id>
    <content type="html"><![CDATA[<p>I went to the Jobs Practice session on Friday and worked on the assigned project of making a quick URL shortener in 2 hours, which is practice for interview projects. I&rsquo;d never done a URL shortener before, and hadn&rsquo;t worked on web/PHP type stuff in awhile since I switched to iOS apps, so I was excited for the change of pace and the well-defined project.</p>

<p>I was confident that I could write a PHP script very quickly to do the URL shortening and routing, but as I put this up under a subdomain of an existing server I had running for another site, I had to make some tricky changes to the <code>.htaccess</code> file so that Apache would reroute all of the URLs for my shortener to the <code>index.php</code> file with all of my routing scripts. This proved trickier than I expected, since I&rsquo;m not super familiar with the syntax of the <code>.htaccess</code> file and had some trouble getting it to route things properly.</p>

<p>Finally I got the <code>.htaccess</code> file to send things to my script so I could actually write the shortener, but I&rsquo;d like to revisit it this week and learn enough that I can write that part more confidently in the future, and so that I can implement this version better than it currently is written.</p>

<p>I catch short URLs by grabbing the URL with PHP, then look up the short link in the MySQL database, and then redirect the page to the long URL.</p>

<p>```php
if ((strlen($shorturl) > 0) &amp;&amp; $shorturl != &ldquo;shorten&rdquo;) {</p>

<pre><code>    # should redirect to this url

$query = "
    SELECT
    id,
    short,
    url
    FROM urllinks
    WHERE
    short = :shortlink
    ";
    $query_params = array(
                          ':shortlink' =&gt; $shorturl
                          );

    try{
        $stmt = $db-&gt;prepare($query);
        $result = $stmt-&gt;execute($query_params);
    }
    catch(PDOException $ex){ die("Failed to run query: " . $ex-&gt;getMessage()); }
    $goturl_ok = false;
    $row = $stmt-&gt;fetch();
    if($row){
        $goturl_ok = true;
    }

    if($goturl_ok){
        # redirect to the url
        header("Location: " . $row[url]);
        die("Redirecting to: " . $row[url]);
    } else{
        print("Redirect Failed. No such link.");
    }
</code></pre>

<p>}
```</p>

<p>If it&rsquo;s not a short URL, then I look for <code>POST</code> variables to see if the user is trying to shorten their own URL. If so, and if it&rsquo;s a valid URL, I generate a random string of 6 characters and store them in the database with the URL they should point to.</p>

<p>```php
if(!empty($_POST[&lsquo;urltoshorten&rsquo;])){</p>

<pre><code>if (filter_var($_POST['urltoshorten'], FILTER_VALIDATE_URL) === FALSE) {
    echo "&lt;p&gt;URL '" . $_POST['urltoshorten'] . "' is not valid.&lt;/p&gt;";
} else {

    function random_string($length = 6, $chars = '1234567890qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM')
    {
        $chars_length = (strlen($chars) - 1);
        $string = $chars{rand(0, $chars_length)};

        for ($i = 1; $i &lt; $length; $i = strlen($string))
        {
            $r = $chars{rand(0, $chars_length)};
            $string .=  $r;
        }
        return $string;
    }

    $shortstring = random_string();

    $query = "
    INSERT INTO urllinks (short, url)
    VALUES (:shortstring, :urltoshorten)
    ";
    $query_params = array(
                          ':shortstring' =&gt; $shortstring,
                          ':urltoshorten' =&gt; $_POST['urltoshorten']
                          );

    try{
        $stmt = $db-&gt;prepare($query);
        $result = $stmt-&gt;execute($query_params);
    }
    catch(PDOException $ex){ die("Failed to run query: " . $ex-&gt;getMessage()); }
    $goturl_ok = false;
    $row = $stmt-&gt;rowCount();
    # share the new short url
    echo '&lt;p&gt;Shortened URL to &lt;a href="http://prty.us/' . $shortstring . '"&gt;' . 'http://prty.us/' . $shortstring . '&lt;/a&gt;&lt;/p&gt;';
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Otherwise, I return a pretty form for URL shortening that posts to this same page.</p>

<p>```php
<form method="post" action="http://prty.us/shorten" id="shortenurlform"></p>

<pre><code>&lt;div&gt;
    &lt;label for="urltoshorten"&gt;Enter your URL to shorten:&lt;/label&gt;
    &lt;input type="text" class="input-field" id="urltoshorten" name="urltoshorten" value=""&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;input type="submit" class="btn btn-default"&gt;
&lt;/div&gt;
</code></pre>

<p></form>
```</p>

<p><a href="http://prty.us/shorten">Check it out!</a> It was cool how simple this was to implement (the PHP part at least). I used <a href="http://getbootstrap.com">Twitter Bootstrap</a> along with a template I&rsquo;ve used previously to get something nice-looking up very quickly. It&rsquo;s also responsive (everything rearranges nicely if the screen size is smaller, like on your phone) without putting really any extra work into it, since that&rsquo;s part of Bootstrap.</p>

<p>This made me miss doing web stuff and I&rsquo;m thinking of doing more web development while I&rsquo;m here. I find that every project I make needs a good website even just for marketing, and responsive mobile-friendly websites can be a great way to extend an iOS app&rsquo;s functionality to other device platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 13: Mesh Messaging App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13/"/>
    <updated>2014-06-26T20:26:50-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>I couldn&rsquo;t get my SecretHandshake app to work properly today after the OAuth changes I&rsquo;d made, so I got to go on a bug-finding detective mission. I couldn&rsquo;t find any code I changed that would make the app suddenly never have its bluetooth delegate methods called, and a lot of error-finding logs that were never called and indicated that nothing was wrong.</p>

<p>I used Git to create a branch of the project from the last version I know for sure works, which I have on TestFlight. I built that and ran it on the device, and it still didn&rsquo;t work! At first I was frustrated, but then I realized that it meant it wasn&rsquo;t anything in the code that was the problem after all. If I built it in the XCode6 beta, it wouldn&rsquo;t ever detect other iBeacons, but if I built it in XCode5, it worked perfectly. Because I can&rsquo;t build for iOS8 from XCode5, that means that I can&rsquo;t get it to run on my iPod anymore at all. Hoping it&rsquo;s a bug in the XCode beta and not some mysterious unannounced change in the OS that breaks iBeacons.</p>

<p>In the afternoon, I got to work laying out the framework for a Bluetooth LE based mobile ad-hoc mesh network using iPhones and CoreBluetooth (a lower level framework than iBeacons that allows me to send longer messages between phones). I built a simple app that lets you input a message and broadcast it to any other phones in range. It was very exciting that it works! I couldn&rsquo;t get out of range of the phones while in the Hacker School space, so I&rsquo;m looking forward to testing out whether the hopping is working (the phone that receives the message broadcasts it on to other phones).</p>

<p><img class="center" src="/images/posts/13mobileadhoc.jpg" title="&lsquo;Mobile Ad Hoc Network&rsquo;" ></p>

<p>I&rsquo;m interested in pairing with some friends to figure out a network protocol that would work for sending messages between phones and for building the network. To send directed messages instead of broadcast, should there be a &ldquo;message received&rdquo; response sent by the phone when it gets there? Perhaps the &ldquo;message&rdquo; is modified in some way by each phone with headers indicating the path it successfully took to get to the intended recipient the fastest, which we could store as a way to map the network. I&rsquo;m also interested in what we had discussed earlier in linking the mesh network to a trusted friend group to allow secure messages to be sent to the people they&rsquo;re intended for.</p>

<p><img class="center" src="/images/posts/13weboftrust.jpg" title="&lsquo;Web of Trust&rsquo;" ></p>

<p>The TorCoin model for route signing by each node is inspiring me with ideas for how each node in a mobile ad hoc mesh network might sign a message such that the network could perhaps get smarter about routing messages without having to broadcast everything to each node. Maybe we could incorporate a little bit of machine learning into the Mesh Messaging app (&hellip;meshaging?) to figure out the best routes to try for reaching particular nodes.</p>
]]></content>
  </entry>
  
</feed>
