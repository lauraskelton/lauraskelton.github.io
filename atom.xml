<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Hacker School Daily Log]]></title>
  <link href="http://lauraskelton.github.io/atom.xml" rel="self"/>
  <link href="http://lauraskelton.github.io/"/>
  <updated>2014-07-02T11:29:32-04:00</updated>
  <id>http://lauraskelton.github.io/</id>
  <author>
    <name><![CDATA[Laura Skelton]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 16: ASCII Photo Booth and Unit Testing]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/07/01/hacker-school-day-16/"/>
    <updated>2014-07-01T20:55:33-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/07/01/hacker-school-day-16</id>
    <content type="html"><![CDATA[<p>I added a filter to my photo booth that turns each photo into an ASCII art image, then deployed the <a href="http://bprty.com/BGkvq3/">GIF Photo Booth mode</a> I wrote to the live <a href="http://blockpartyapp.com">Block Party</a> server.</p>

<p>It was amazing how easy it was to extend the Photo Booth filter set to add this new filter. I&rsquo;m using the Mosaic filter from <a href="https://github.com/BradLarson/GPUImage">GPUImage</a>, an open-source Objective-C framework that runs filtering calculations in Open-GL for fast image processing. I used an image containing 64 tiles ranging from lightest to darkest, and the calculations in the Open-GL mosaic filter took a stepped luminosity and selected which tile to display.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span>
</span><span class='line'> <span class="n">precision</span> <span class="n">highp</span> <span class="kt">float</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">varying</span> <span class="n">vec2</span> <span class="n">textureCoordinate</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">uniform</span> <span class="n">sampler2D</span> <span class="n">inputImageTexture</span><span class="p">;</span>
</span><span class='line'> <span class="n">uniform</span> <span class="n">sampler2D</span> <span class="n">inputImageTexture2</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">inputTileSize</span><span class="p">;</span>
</span><span class='line'> <span class="n">uniform</span> <span class="n">vec2</span> <span class="n">displayTileSize</span><span class="p">;</span>
</span><span class='line'> <span class="n">uniform</span> <span class="kt">float</span> <span class="n">numTiles</span><span class="p">;</span>
</span><span class='line'> <span class="n">uniform</span> <span class="kt">int</span> <span class="n">colorOn</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kt">void</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="n">vec2</span> <span class="n">xy</span> <span class="o">=</span> <span class="n">textureCoordinate</span><span class="p">;</span>
</span><span class='line'>     <span class="n">xy</span> <span class="o">=</span> <span class="n">xy</span> <span class="o">-</span> <span class="n">mod</span><span class="p">(</span><span class="n">xy</span><span class="p">,</span> <span class="n">displayTileSize</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">vec4</span> <span class="n">lumcoeff</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.299</span><span class="p">,</span><span class="mf">0.587</span><span class="p">,</span><span class="mf">0.114</span><span class="p">,</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">vec4</span> <span class="n">inputColor</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">inputImageTexture2</span><span class="p">,</span> <span class="n">xy</span><span class="p">);</span>
</span><span class='line'>     <span class="kt">float</span> <span class="n">lum</span> <span class="o">=</span> <span class="n">dot</span><span class="p">(</span><span class="n">inputColor</span><span class="p">,</span><span class="n">lumcoeff</span><span class="p">);</span>
</span><span class='line'>     <span class="n">lum</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">-</span> <span class="n">lum</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">float</span> <span class="n">stepsize</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">numTiles</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">float</span> <span class="n">lumStep</span> <span class="o">=</span> <span class="p">(</span><span class="n">lum</span> <span class="o">-</span> <span class="n">mod</span><span class="p">(</span><span class="n">lum</span><span class="p">,</span> <span class="n">stepsize</span><span class="p">))</span> <span class="o">/</span> <span class="n">stepsize</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="kt">float</span> <span class="n">rowStep</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="n">inputTileSize</span><span class="p">.</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>     <span class="kt">float</span> <span class="n">x</span> <span class="o">=</span> <span class="n">mod</span><span class="p">(</span><span class="n">lumStep</span><span class="p">,</span> <span class="n">rowStep</span><span class="p">);</span>
</span><span class='line'>     <span class="kt">float</span> <span class="n">y</span> <span class="o">=</span> <span class="n">floor</span><span class="p">(</span><span class="n">lumStep</span> <span class="o">/</span> <span class="n">rowStep</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">vec2</span> <span class="n">startCoord</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="kt">float</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="o">*</span>  <span class="n">inputTileSize</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="kt">float</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="o">*</span> <span class="n">inputTileSize</span><span class="p">.</span><span class="n">y</span><span class="p">);</span>
</span><span class='line'>     <span class="n">vec2</span> <span class="n">finalCoord</span> <span class="o">=</span> <span class="n">startCoord</span> <span class="o">+</span> <span class="p">((</span><span class="n">textureCoordinate</span> <span class="o">-</span> <span class="n">xy</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">inputTileSize</span> <span class="o">/</span> <span class="n">displayTileSize</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">vec4</span> <span class="n">color</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">inputImageTexture</span><span class="p">,</span> <span class="n">finalCoord</span><span class="p">);</span>
</span><span class='line'>     <span class="k">if</span> <span class="p">(</span><span class="n">colorOn</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>         <span class="n">color</span> <span class="o">=</span> <span class="n">color</span> <span class="o">*</span> <span class="n">inputColor</span><span class="p">;</span>
</span><span class='line'>     <span class="p">}</span>
</span><span class='line'>     <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">color</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="p">}</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://lauraskelton.github.io/images/posts/16hackercamtiles.png" title="'ASCII Tiles'" ></p>

<p>I grouped the ASCII filter with a filter I already had that tends to increase facial feature definition, and that seemed to make the ASCII images a bit clearer.</p>

<p>It so quite fast to implement the ASCII filter that I had time to do both a light and a dark version, and I was happy to see that I had set up the Block Party app intelligently enough that the filtering menu extended automatically once the new filters were added, and everything just worked!</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/16asciiboothgif.gif" title="'ASCII Booth GIF'" ></p>

<p>The GIF mode of the photo booth takes 4 photos in rapid succession, saves them to the camera roll, combines them into a GIF animation, and combines them into a movie file playable on the iPhone (as GIF animations are not supported outside of the browser), then it uploads everything to the server with metadata indicating to the app that it is an animated GIF instead of a JPG so it can be displayed accordingly.</p>

<p>In the process of working with GPUImage&rsquo;s Mosaic filter, I discovered a small bug in the project, and with Allison&rsquo;s help I submitted <a href="https://github.com/BradLarson/GPUImage/pulls">my first Pull request</a>! It was good to get some practice working with a large existing code base and working to improve a small part of it.</p>

<p>In the evening, I learned how to use <a href="https://developer.apple.com/library/ios/documentation/ToolsLanguages/Conceptual/Xcode_Overview/UnitTestYourApp/UnitTestYourApp.html">XCode&rsquo;s built-in Testing framework</a>.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/16xcodetesting.png" title="'XCode Testing Framework'" ></p>

<p>In the process of rewriting my code so that it was easier to test, everything was just better. The classes and methods naturally became more modular and reusable, it was easy and quickly repeatable to test all of the edge cases, and my code seemed much clearer. I learned that testing can be seen as a sort of specification set for the code and its features. If the class has some expected properties, or a function is expected to behave in a particular way, I can in a way &ldquo;define&rdquo; that class&rsquo;s features by the way that I write the expected outputs of the test functions, sort of like an outline for how I expect my program to behave. I actually think it would help me to be clearer and more organized in the way I develop my code if I start writing these feature-specification tests before I even write the methods and classes they are testing, and build the method code to match the spec, instead of the other way around. This may not always be feasible if something needs to be mocked up very quickly, but I think in general this is how I will try to work moving forward.</p>

<p>This work with testing feels like great progress towards the goal of becoming a better programmer. I&rsquo;m going to work on rewriting several of my existing projects in this way as it seems to add stability and clarity without having to spend so much time manually checking that everything works.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 15: Mesh Messaging and ASCII Photo Booths]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15/"/>
    <updated>2014-06-30T20:30:06-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/30/hacker-school-day-15</id>
    <content type="html"><![CDATA[<p>I completely reworked my <a href="https://github.com/lauraskelton/imesh">ad-hoc mobile networking app</a>. It had been set up so that each time a phone had a message to send, it would advertise itself over Bluetooth LE, connect to other phones as a peripheral, send the message, then close the connection.</p>

<p>I reworked the entire process. Now, the phones are still listening most of the time for other devices, but each periodically broadcasts itself (and becomes discoverable) at random intervals every few minutes. When phones discover each other, they connect and subscribe to push notifications from each other. That way, when there is a message to send, it transmits to all connected devices in a split second.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/14adhocnetwork.gif" title="'Split Ad-Hoc Network'" ></p>

<p>There&rsquo;s still some debugging to do with connection stability and perfecting the advertising interval so that devices become connected quickly, but so far it is working quite well! I&rsquo;m excited to finish getting the base network established so that I can play around with different network setups that could be built with the technology. I was intrigued by some <a href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/">earlier conversations about secure communications and web-of-trust networks</a>, as well as <a href="http://ghost.lesiuk.org/AdHoc/network_simulator/">different optimizations for routing the packets beyond simple broadcasting</a>, and it would be cool to use Bluetooth LE to build this.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/14adhocrouting.gif" title="'Ad-Hoc Specific Route'" ></p>

<p>We were talking about what type of photo booth would be appropriate for a Hacker School party, and I had the idea for a fun modification to the booth that would take 4 photos, turn each into ASCII art (green on a black background), and then make an animated GIF image from them that could be projected continuously during a party, inspired by <a href="https://github.com/oxling/iphone-ascii">Amy&rsquo;s ASCII Cam project</a>.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/14asciiphoto.gif" title="'ASCII Photo'" ></p>

<p>Totally coincidentally, when checking out <a href="https://hackmanhattan.com/2014/06/facetron6000-at-figment-2014/">Hack Manhattan</a>, I came across their recent ASCII photo booth project, which takes a photo, converts it to ASCII art, then actually has an Arduino-controlled vintage typewriter type it out onto a sheet of paper for the user to take with them. So cool!</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/14asciitypewriter.jpg" title="'ASCII Typewriter Booth'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 14: URL Shortener]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14/"/>
    <updated>2014-06-28T20:58:14-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/28/hacker-school-day-14</id>
    <content type="html"><![CDATA[<p>I went to the Jobs Practice session on Friday and worked on the assigned project of making a quick URL shortener in 2 hours, which is practice for interview projects. I&rsquo;d never done a URL shortener before, and hadn&rsquo;t worked on web/PHP type stuff in awhile since I switched to iOS apps, so I was excited for the change of pace and the well-defined project.</p>

<p>I was confident that I could write a PHP script very quickly to do the URL shortening and routing, but as I put this up under a subdomain of an existing server I had running for another site, I had to make some tricky changes to the <code>.htaccess</code> file so that Apache would reroute all of the URLs for my shortener to the <code>index.php</code> file with all of my routing scripts. This proved trickier than I expected, since I&rsquo;m not super familiar with the syntax of the <code>.htaccess</code> file and had some trouble getting it to route things properly.</p>

<p>Finally I got the <code>.htaccess</code> file to send things to my script so I could actually write the shortener, but I&rsquo;d like to revisit it this week and learn enough that I can write that part more confidently in the future, and so that I can implement this version better than it currently is written.</p>

<p>I catch short URLs by grabbing the URL with PHP, then look up the short link in the MySQL database, and then redirect the page to the long URL.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">((</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$shorturl</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="nv">$shorturl</span> <span class="o">!=</span> <span class="s2">&quot;shorten&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1"># should redirect to this url</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        SELECT</span>
</span><span class='line'><span class="s2">        id,</span>
</span><span class='line'><span class="s2">        short,</span>
</span><span class='line'><span class="s2">        url</span>
</span><span class='line'><span class="s2">        FROM urllinks</span>
</span><span class='line'><span class="s2">        WHERE</span>
</span><span class='line'><span class="s2">        short = :shortlink</span>
</span><span class='line'><span class="s2">        &quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$query_params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                              <span class="s1">&#39;:shortlink&#39;</span> <span class="o">=&gt;</span> <span class="nv">$shorturl</span>
</span><span class='line'>                              <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span><span class="p">{</span>
</span><span class='line'>            <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$query_params</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$ex</span><span class="p">){</span> <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Failed to run query: &quot;</span> <span class="o">.</span> <span class="nv">$ex</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span> <span class="p">}</span>
</span><span class='line'>        <span class="nv">$goturl_ok</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">fetch</span><span class="p">();</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nv">$row</span><span class="p">){</span>
</span><span class='line'>            <span class="nv">$goturl_ok</span> <span class="o">=</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="nv">$goturl_ok</span><span class="p">){</span>
</span><span class='line'>            <span class="c1"># redirect to the url</span>
</span><span class='line'>            <span class="nx">header</span><span class="p">(</span><span class="s2">&quot;Location: &quot;</span> <span class="o">.</span> <span class="nv">$row</span><span class="p">[</span><span class="nx">url</span><span class="p">]);</span>
</span><span class='line'>            <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Redirecting to: &quot;</span> <span class="o">.</span> <span class="nv">$row</span><span class="p">[</span><span class="nx">url</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s2">&quot;Redirect Failed. No such link.&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If it&rsquo;s not a short URL, then I look for <code>POST</code> variables to see if the user is trying to shorten their own URL. If so, and if it&rsquo;s a valid URL, I generate a random string of 6 characters and store them in the database with the URL they should point to.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;urltoshorten&#39;</span><span class="p">])){</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nb">filter_var</span><span class="p">(</span><span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;urltoshorten&#39;</span><span class="p">],</span> <span class="nx">FILTER_VALIDATE_URL</span><span class="p">)</span> <span class="o">===</span> <span class="k">FALSE</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s2">&quot;&lt;p&gt;URL &#39;&quot;</span> <span class="o">.</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;urltoshorten&#39;</span><span class="p">]</span> <span class="o">.</span> <span class="s2">&quot;&#39; is not valid.&lt;/p&gt;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">function</span> <span class="nf">random_string</span><span class="p">(</span><span class="nv">$length</span> <span class="o">=</span> <span class="mi">6</span><span class="p">,</span> <span class="nv">$chars</span> <span class="o">=</span> <span class="s1">&#39;1234567890qwrtypsdfghjklzxcvbnmQWRTYPSDFGHJKLZXCVBNM&#39;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="nv">$chars_length</span> <span class="o">=</span> <span class="p">(</span><span class="nb">strlen</span><span class="p">(</span><span class="nv">$chars</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$string</span> <span class="o">=</span> <span class="nv">$chars</span><span class="p">{</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$chars_length</span><span class="p">)};</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">for</span> <span class="p">(</span><span class="nv">$i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">&lt;</span> <span class="nv">$length</span><span class="p">;</span> <span class="nv">$i</span> <span class="o">=</span> <span class="nb">strlen</span><span class="p">(</span><span class="nv">$string</span><span class="p">))</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="nv">$r</span> <span class="o">=</span> <span class="nv">$chars</span><span class="p">{</span><span class="nx">rand</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nv">$chars_length</span><span class="p">)};</span>
</span><span class='line'>                <span class="nv">$string</span> <span class="o">.=</span>  <span class="nv">$r</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">return</span> <span class="nv">$string</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$shortstring</span> <span class="o">=</span> <span class="nx">random_string</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$query</span> <span class="o">=</span> <span class="s2">&quot;</span>
</span><span class='line'><span class="s2">        INSERT INTO urllinks (short, url)</span>
</span><span class='line'><span class="s2">        VALUES (:shortstring, :urltoshorten)</span>
</span><span class='line'><span class="s2">        &quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$query_params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                              <span class="s1">&#39;:shortstring&#39;</span> <span class="o">=&gt;</span> <span class="nv">$shortstring</span><span class="p">,</span>
</span><span class='line'>                              <span class="s1">&#39;:urltoshorten&#39;</span> <span class="o">=&gt;</span> <span class="nv">$_POST</span><span class="p">[</span><span class="s1">&#39;urltoshorten&#39;</span><span class="p">]</span>
</span><span class='line'>                              <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span><span class="p">{</span>
</span><span class='line'>            <span class="nv">$stmt</span> <span class="o">=</span> <span class="nv">$db</span><span class="o">-&gt;</span><span class="na">prepare</span><span class="p">(</span><span class="nv">$query</span><span class="p">);</span>
</span><span class='line'>            <span class="nv">$result</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">(</span><span class="nv">$query_params</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">catch</span><span class="p">(</span><span class="nx">PDOException</span> <span class="nv">$ex</span><span class="p">){</span> <span class="k">die</span><span class="p">(</span><span class="s2">&quot;Failed to run query: &quot;</span> <span class="o">.</span> <span class="nv">$ex</span><span class="o">-&gt;</span><span class="na">getMessage</span><span class="p">());</span> <span class="p">}</span>
</span><span class='line'>        <span class="nv">$goturl_ok</span> <span class="o">=</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$row</span> <span class="o">=</span> <span class="nv">$stmt</span><span class="o">-&gt;</span><span class="na">rowCount</span><span class="p">();</span>
</span><span class='line'>        <span class="c1"># share the new short url</span>
</span><span class='line'>        <span class="k">echo</span> <span class="s1">&#39;&lt;p&gt;Shortened URL to &lt;a href=&quot;http://prty.us/&#39;</span> <span class="o">.</span> <span class="nv">$shortstring</span> <span class="o">.</span> <span class="s1">&#39;&quot;&gt;&#39;</span> <span class="o">.</span> <span class="s1">&#39;http://prty.us/&#39;</span> <span class="o">.</span> <span class="nv">$shortstring</span> <span class="o">.</span> <span class="s1">&#39;&lt;/a&gt;&lt;/p&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Otherwise, I return a pretty form for URL shortening that posts to this same page.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;</span><span class="nx">form</span> <span class="nx">method</span><span class="o">=</span><span class="s2">&quot;post&quot;</span> <span class="nx">action</span><span class="o">=</span><span class="s2">&quot;http://prty.us/shorten&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;shortenurlform&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">label</span> <span class="k">for</span><span class="o">=</span><span class="s2">&quot;urltoshorten&quot;</span><span class="o">&gt;</span><span class="nx">Enter</span> <span class="nx">your</span> <span class="nx">URL</span> <span class="nx">to</span> <span class="nx">shorten</span><span class="o">:&lt;/</span><span class="nx">label</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text&quot;</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;input-field&quot;</span> <span class="nx">id</span><span class="o">=</span><span class="s2">&quot;urltoshorten&quot;</span> <span class="nx">name</span><span class="o">=</span><span class="s2">&quot;urltoshorten&quot;</span> <span class="nx">value</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'>      <span class="o">&lt;</span><span class="nx">input</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;submit&quot;</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;btn btn-default&quot;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;/</span><span class="nx">div</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="nx">form</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://prty.us/shorten">Check it out!</a> It was cool how simple this was to implement (the PHP part at least). I used <a href="http://getbootstrap.com">Twitter Bootstrap</a> along with a template I&rsquo;ve used previously to get something nice-looking up very quickly. It&rsquo;s also responsive (everything rearranges nicely if the screen size is smaller, like on your phone) without putting really any extra work into it, since that&rsquo;s part of Bootstrap.</p>

<p>This made me miss doing web stuff and I&rsquo;m thinking of doing more web development while I&rsquo;m here. I find that every project I make needs a good website even just for marketing, and responsive mobile-friendly websites can be a great way to extend an iOS app&rsquo;s functionality to other device platforms.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 13: Mesh Messaging App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13/"/>
    <updated>2014-06-26T20:26:50-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/26/hacker-school-day-13</id>
    <content type="html"><![CDATA[<p>I couldn&rsquo;t get my SecretHandshake app to work properly today after the OAuth changes I&rsquo;d made, so I got to go on a bug-finding detective mission. I couldn&rsquo;t find any code I changed that would make the app suddenly never have its bluetooth delegate methods called, and a lot of error-finding logs that were never called and indicated that nothing was wrong.</p>

<p>I used Git to create a branch of the project from the last version I know for sure works, which I have on TestFlight. I built that and ran it on the device, and it still didn&rsquo;t work! At first I was frustrated, but then I realized that it meant it wasn&rsquo;t anything in the code that was the problem after all. If I built it in the XCode6 beta, it wouldn&rsquo;t ever detect other iBeacons, but if I built it in XCode5, it worked perfectly. Because I can&rsquo;t build for iOS8 from XCode5, that means that I can&rsquo;t get it to run on my iPod anymore at all. Hoping it&rsquo;s a bug in the XCode beta and not some mysterious unannounced change in the OS that breaks iBeacons.</p>

<p>In the afternoon, I got to work laying out the framework for a Bluetooth LE based mobile ad-hoc mesh network using iPhones and CoreBluetooth (a lower level framework than iBeacons that allows me to send longer messages between phones). I built a simple app that lets you input a message and broadcast it to any other phones in range. It was very exciting that it works! I couldn&rsquo;t get out of range of the phones while in the Hacker School space, so I&rsquo;m looking forward to testing out whether the hopping is working (the phone that receives the message broadcasts it on to other phones).</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/13mobileadhoc.jpg" title="'Mobile Ad Hoc Network'" ></p>

<p>I&rsquo;m interested in pairing with some friends to figure out a network protocol that would work for sending messages between phones and for building the network. To send directed messages instead of broadcast, should there be a &ldquo;message received&rdquo; response sent by the phone when it gets there? Perhaps the &ldquo;message&rdquo; is modified in some way by each phone with headers indicating the path it successfully took to get to the intended recipient the fastest, which we could store as a way to map the network. I&rsquo;m also interested in what we had discussed earlier in linking the mesh network to a trusted friend group to allow secure messages to be sent to the people they&rsquo;re intended for.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/13weboftrust.jpg" title="'Web of Trust'" ></p>

<p>The TorCoin model for route signing by each node is inspiring me with ideas for how each node in a mobile ad hoc mesh network might sign a message such that the network could perhaps get smarter about routing messages without having to broadcast everything to each node. Maybe we could incorporate a little bit of machine learning into the Mesh Messaging app (&hellip;meshaging?) to figure out the best routes to try for reaching particular nodes.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 12: OAuth Success and Focusing on Goals]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/25/hacker-school-day-12/"/>
    <updated>2014-06-25T19:37:54-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/25/hacker-school-day-12</id>
    <content type="html"><![CDATA[<p>I grabbed coffee in the morning with <a href="https://github.com/oxling">Amy</a> who does iOS development at Etsy, and she gave me some incredibly helpful advice on things to be sure to focus on while I&rsquo;m at Hacker School. I left feeling excited about an idea from earlier in the batch of setting up an ad-hoc mobile network using iPhones over Bluetooth LE, and am hoping to get to work on implementing version one of that project. She also recommended contributing to a larger open-source project as a good way for someone like me who&rsquo;s always worked independently on my own apps to get used to working within someone else&rsquo;s larger code framework, which would be very relevant to doing iOS at a company where many developers are contributing to one project.</p>

<p>After talking through my OAuth handling in the Secret Handshake app with a couple of other Hacker Schoolers, and walking through each step in the OAuth process, I realized that I could handle the entire OAuth verification from within my iOS app, without relying on the external PHP file to request an access token from the server. I rewrote the OAuth handling in the app to use a custom URL scheme that redirects to my app as the Hacker School API redirect, and successfully got everything working. I wrote up an overview of the OAuth process on <a href="https://github.com/lauraskelton/secrethandshake">the app&rsquo;s GitHub readme page</a>, along with the exact query parameters that are required by the API at each step.</p>

<p>Later I finished up with getting a handle on iOS&rsquo;s SpriteKit by implementing a Space Invaders game in Swift. I learned how to attach sound effects to actions in the game such as firing a bullet or a collision between two sprites on the screen (like an enemy and a bullet), how to keep score, and how to transition between different scenes in the game.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/12spaceinvadersprite.jpg" title="'Space Invaders in Swift'" ></p>

<p>Following the repeated advice of Hacker School alumni, I decided to move on from the Space Invaders game as soon as I felt like I was no longer learning from it. I got a general sense of setting up the game play, but I stopped before making a perfect implementation of every feature in the original game. This is a big change from how I usually work&mdash; I feel a huge push to finish and perfect the work that I start, and it feels very strange and pretty luxurious to stop a project when it&rsquo;s stopped being educational for me, but after refocusing on my goals a bit yesterday I&rsquo;m impatient to learn new things.</p>

<p>I&rsquo;ve been having trouble balancing two different ways of taking full advantage of my time at Hacker School. One is that I love being around so many smart, energetic peers who I can learn from and work with, and I have such a short period of time here to have access to that. I love the energy I get from talking to other Hacker Schoolers about code and projects, and there is so much that I&rsquo;ve learned so quickly from other people here both through casual conversation over coffee and in a more formal study-group setting. I feel a lot of pressure to break out of my slightly more comfortable/habitual zone of coding alone to pair with and talk with other people at Hacker School, and to be involved in group projects that are happening around me.</p>

<p>This, combined with an impulse to grab hold of any kind of formalized workshop-style learning that&rsquo;s happening around me due to the reassurance it gives that I&rsquo;m for sure learning/accomplishing something if I participate in those, keeps leading me to participate in more formal talks/workshops that are happening in the space. It seems to reinforce my fear of missing out on learning whenever I see a group of Hacker Schoolers working through something in Hopper (the large group-work room) and I&rsquo;m not participating. It feels like skipping class.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/12hopper.jpg" title="'Hopper'" ></p>

<p>Then I go to a bunch of workshops, and sometimes they&rsquo;re amazingly helpful and right in line with what my learning goals are here. And I think, I should go to more of these! But, other times, I realize a few minutes in that the workshop&rsquo;s focus is not furthering my goals, and I get frustrated at missing out on what could have been coding time, which feels so limited already as my time at Hacker School is flying by.</p>

<p>So, I think I need to just be more aware of the pitfalls of participating in something just because I feel like I &ldquo;should&rdquo;, and do a check with myself before I sign up for things during Hacker School hours to make sure they line up well with what I&rsquo;m already working on and interested in here.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 11: Sprites and Space Invaders]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/24/hacker-school-day-11/"/>
    <updated>2014-06-24T20:54:18-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/24/hacker-school-day-11</id>
    <content type="html"><![CDATA[<p>I decided Hacker School would be a great opportunity to learn some iOS frameworks I&rsquo;ve never worked with before, since I have time for something with a bit of a steeper learning curve right now than I do when I need to finish a product quickly.</p>

<p>I had an idea for a game/drawing app that would be a simple way to learn some of the animations and custom touch controls that are possible in iOS, so after learning about the different game frameworks available in iOS 8, I decided to start working through <a href="http://www.raywenderlich.com/42699/spritekit-tutorial-for-beginners">a SpriteKit tutorial</a> to get the hang of how to write games.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/11spritekittutorial.png" title="'Sprite Kit Tutorial'" ></p>

<p>Since I&rsquo;m working in Swift, it was much trickier to get the tutorial code up and running as everything needed to be shifted over to the Swift way of thinking before I could test it out. I got a basic app up and running, but was running into some nightmarish problems with a CGPoint init method when I was doing some vector math. The problem had to do with numerical types, and I finally realized that I was mixing CGFloats with Floats, which in Swift are completely different types.</p>

<p>This is what I finally got to compile:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">rwNormalize</span><span class="p">(</span><span class="nl">a:</span> <span class="n">CGPoint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGPoint</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="n">length</span> <span class="o">=</span> <span class="n">CGFloat</span><span class="p">(</span><span class="n">rwLength</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">CGPoint</span><span class="p">(</span><span class="nl">x:</span> <span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="o">/</span><span class="n">length</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="o">/</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because I was sending Floats to CGPoint&rsquo;s init instead of CGFloats, the following caused the compiler error &ldquo;Could not find an overload for &lsquo;init&rsquo; that accepts the supplied arguments&rdquo;.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">rwNormalize</span><span class="p">(</span><span class="nl">a:</span> <span class="n">CGPoint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGPoint</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="nl">length:</span> <span class="n">Float</span> <span class="o">=</span> <span class="n">rwLength</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">CGPoint</span><span class="p">(</span><span class="nl">x:</span> <span class="n">Float</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="o">/</span><span class="n">length</span><span class="p">),</span> <span class="nl">y:</span> <span class="n">Float</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="o">/</span><span class="n">length</span><span class="p">))</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The following function resulted in the compiler error &ldquo;Could not find an overload for &lsquo;/&rsquo; that accepts the supplied arguments&rdquo;, because I was dividing a CGFloat by a Float, which is not allowed in Swift without first converting one of the arguments to be the same type as the other, since otherwise Swift doesn&rsquo;t know what type the output should be.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">func</span> <span class="n">rwNormalize</span><span class="p">(</span><span class="nl">a:</span> <span class="n">CGPoint</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">CGPoint</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">let</span> <span class="nl">length:</span> <span class="n">Float</span> <span class="o">=</span> <span class="n">rwLength</span><span class="p">(</span><span class="n">a</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">CGPoint</span><span class="p">(</span><span class="nl">x:</span> <span class="n">a</span><span class="p">.</span><span class="n">x</span><span class="o">/</span><span class="n">length</span><span class="p">,</span> <span class="nl">y:</span> <span class="n">a</span><span class="p">.</span><span class="n">y</span><span class="o">/</span><span class="n">length</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>The debugging process was pretty frustrating, but after finally figuring out what the problem was with the types I had learned a lot about how Swift works and had a stronger sense of being explicit about the types I was inputting and expecting for each function.</p>

<p>I learned about creating a game scene and adding &ldquo;nodes&rdquo; to the scene that can be anything from a label, a player, an enemy, or a projectile, and manipulating them with simple actions like move or rotate. Once I had a sense of the structure of the game, it was a lot clearer how to set up something simple. I&rsquo;m looking forward to learning more about physics and reacting to different events tomorrow.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/11spritekitorganization.png" title="'Sprite Kit Organization'" ></p>

<p>In the afternoon, Mary <a href="https://github.com/maryrosecook/spaceinvaders">live-coded a Space Invaders game in Javascript</a> in under an hour. That was pretty cool to watch, and it amazes me how simple she makes the code seem. Watching her quickly create a minimum functional mock-up of the game was very helpful for me as a reminder not to get bogged down in, for example, how the Space Invaders look in version one of a game where your focus is on the functionality of the game and getting that to work. She kept this version simple by using rectangles for the player, bullets, and invaders, and that meant that she could get a basic game laid out very quickly. I like her process of development because all of the functions were laid out in a simple way, and it would be straightforward to move forward and edit some of them to add more complex game play and graphics since the basic functionality is already there.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/11spaceinvaders.png" title="'Simple Space Invaders'" ></p>

<p>Moving forward, once I finish with the SpriteKit tutorial game, I&rsquo;m going to try making a similarly simple version of Space Invaders for iOS using SpriteKit and Swift.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/11spaceinvaderscomplex.png" title="'Complex Space Invaders'" ></p>

<p>In other news, this is the coolest thing about the Q train!</p>

<iframe src="//player.vimeo.com/video/99153550" width="640" height="360" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>It&rsquo;s a series of lit, painted panels on the wall of the subway tunnel between DeKalb and Canal, that&rsquo;s visible through a series of narrow slits in the tunnel wall. When the train is stopped, it just looks like bright slits, but as soon as the train starts moving, it starts animating flipbook-style. It&rsquo;s <a href="https://signalvnoise.com/posts/2508-bill-brands-masstransiscope-subway-art">an installation that was put there in the 80s called Masstransiscope</a>, inspired by the Zoetrope of the 1800s. Bill Brand, the artist, had the idea that &ldquo;Instead of having the film go through the projector, you could move the audience past the film.&rdquo;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 10: OAuth Challenges and Setting Goals]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10/"/>
    <updated>2014-06-23T20:56:24-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/23/hacker-school-day-10</id>
    <content type="html"><![CDATA[<p>I put a ton of time in on the <a href="https://github.com/lauraskelton/secrethandshake">Secret Handshake iOS app</a> in perfecting the OAuth login procedure. Originally, I was using an OAuth library from Google to open the Hacker School login page in a webview within the app. The problem with this was that it couldn&rsquo;t take advantage of Safari&rsquo;s auto fill password functionality, or if you were already logged in on the browser.</p>

<p>I first tried to use the iOS library to post the authentication code request to the Hacker School website on Safari. Unfortunately, an iOS app is unable to do a <code>POST</code> request to another app. I ended up writing a simple PHP file on my server that I redirect the user to from the Secret Handshake app. The PHP file handles sending the user to the Hacker School login page and then sending a <code>POST</code> request to get an access token from Hacker School. It then sends the returned token back to the Secret Handshake app via a custom URL scheme <code>secrethandshake://oauth</code> and an attached query string containing the token.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/10oauthflow.png" title="'OAuth 2.0 Process'" ></p>

<p>In the end, after struggling to find any examples of what a successful OAuth request should look like, and to find a working library I could use to get things up and running, I am not using any 3rd party libraries at all with my OAuth implementation, the code handling the OAuth requests is relatively brief, and I even managed to get token refreshing up and running to avoid repeated logins.</p>

<p>This is the PHP OAuth manager file in its entirety.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Server OAuth Handler for iOS App</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * iOS App launches Safari to this page on SecretHandshake server</span>
</span><span class='line'><span class="sd">     * This page sends the user to the Hacker School login page to get authorization code</span>
</span><span class='line'><span class="sd">     * It takes the auth code and sends it back to the server to get an access token</span>
</span><span class='line'><span class="sd">     * It redirects the user back to the app via a custom URL scheme</span>
</span><span class='line'><span class="sd">     * and sends the access and refresh tokens as query parameters to the app</span>
</span><span class='line'><span class="sd">     * which stores them for future use.</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">getAuthenticationUrl</span><span class="p">(</span><span class="nv">$auth_endpoint</span><span class="p">,</span> <span class="nv">$client_id</span><span class="p">,</span> <span class="nv">$redirect_uri</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                                        <span class="s1">&#39;response_type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;code&#39;</span><span class="p">,</span>
</span><span class='line'>                                        <span class="s1">&#39;client_id&#39;</span>     <span class="o">=&gt;</span> <span class="nv">$client_id</span><span class="p">,</span>
</span><span class='line'>                                        <span class="s1">&#39;redirect_uri&#39;</span>  <span class="o">=&gt;</span> <span class="nv">$redirect_uri</span>
</span><span class='line'>                                        <span class="p">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$auth_endpoint</span> <span class="o">.</span> <span class="s1">&#39;?&#39;</span> <span class="o">.</span> <span class="nb">http_build_query</span><span class="p">(</span><span class="nv">$parameters</span><span class="p">,</span> <span class="k">null</span><span class="p">,</span> <span class="s1">&#39;&amp;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">getAccessToken</span><span class="p">(</span><span class="nv">$token_endpoint</span><span class="p">,</span> <span class="nv">$grant_type</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$parameters</span><span class="p">,</span> <span class="nv">$client_id</span><span class="p">,</span> <span class="nv">$client_secret</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$parameters</span><span class="p">[</span><span class="s1">&#39;grant_type&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$grant_type</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$parameters</span><span class="p">[</span><span class="s1">&#39;client_id&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$client_id</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$parameters</span><span class="p">[</span><span class="s1">&#39;client_secret&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$client_secret</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$http_headers</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">executeRequest</span><span class="p">(</span><span class="nv">$token_endpoint</span><span class="p">,</span> <span class="nv">$parameters</span><span class="p">,</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="nv">$http_headers</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">function</span> <span class="nf">executeRequest</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="nv">$parameters</span> <span class="o">=</span> <span class="k">array</span><span class="p">(),</span> <span class="nv">$http_method</span> <span class="o">=</span> <span class="s1">&#39;POST&#39;</span><span class="p">,</span> <span class="k">array</span> <span class="nv">$http_headers</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$form_content_type</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$postBody</span> <span class="o">=</span> <span class="nb">http_build_query</span><span class="p">(</span><span class="nv">$parameters</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$requestHttpContext</span><span class="p">[</span><span class="s2">&quot;content&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$postBody</span><span class="p">;</span>
</span><span class='line'>        <span class="nv">$requestHttpContext</span><span class="p">[</span><span class="s2">&quot;method&quot;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;POST&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$options</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span> <span class="s1">&#39;http&#39;</span> <span class="o">=&gt;</span> <span class="nv">$requestHttpContext</span> <span class="p">);</span>
</span><span class='line'>        <span class="nv">$context</span> <span class="o">=</span> <span class="nb">stream_context_create</span><span class="p">(</span> <span class="nv">$options</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$response</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$url</span><span class="p">,</span> <span class="k">false</span><span class="p">,</span> <span class="nv">$context</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$client_id</span> <span class="o">=</span> <span class="s1">&#39;my-client-id&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$client_secret</span> <span class="o">=</span> <span class="s1">&#39;my-client-secret&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$authorization_endpoint</span> <span class="o">=</span> <span class="s1">&#39;my-authorization-endpoint&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$redirect_uri</span> <span class="o">=</span> <span class="s1">&#39;my-redirect-uri&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="nv">$token_endpoint</span> <span class="o">=</span> <span class="s1">&#39;my-token-endpoint&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">]))</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$auth_url</span> <span class="o">=</span> <span class="nx">getAuthenticationUrl</span><span class="p">(</span><span class="nv">$authorization_endpoint</span><span class="p">,</span> <span class="nv">$client_id</span><span class="p">,</span> <span class="nv">$redirect_uri</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: &#39;</span> <span class="o">.</span> <span class="nv">$auth_url</span><span class="p">);</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Redirect&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$params</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                        <span class="s1">&#39;code&#39;</span> <span class="o">=&gt;</span> <span class="nv">$_GET</span><span class="p">[</span><span class="s1">&#39;code&#39;</span><span class="p">],</span>
</span><span class='line'>                        <span class="s1">&#39;redirect_uri&#39;</span> <span class="o">=&gt;</span> <span class="nv">$redirect_uri</span>
</span><span class='line'>                        <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$response</span> <span class="o">=</span> <span class="nx">getAccessToken</span><span class="p">(</span><span class="nv">$token_endpoint</span><span class="p">,</span> <span class="s1">&#39;authorization_code&#39;</span><span class="p">,</span> <span class="nv">$params</span><span class="p">,</span> <span class="nv">$client_id</span><span class="p">,</span> <span class="nv">$client_secret</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$info</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$response</span><span class="p">,</span> <span class="k">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$querystring</span> <span class="o">=</span> <span class="nb">http_build_query</span><span class="p">(</span><span class="nv">$info</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$appurl</span> <span class="o">=</span> <span class="s1">&#39;secrethandshake://oauth&#39;</span> <span class="o">.</span> <span class="s1">&#39;?&#39;</span> <span class="o">.</span> <span class="nv">$querystring</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">header</span><span class="p">(</span><span class="s1">&#39;Location: &#39;</span> <span class="o">.</span> <span class="nv">$appurl</span><span class="p">);</span>
</span><span class='line'>        <span class="k">die</span><span class="p">(</span><span class="s1">&#39;Redirect&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>On the iPhone, I capture the custom URL query string in the App Delegate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">application:</span><span class="p">(</span><span class="n">UIApplication</span> <span class="o">*</span><span class="p">)</span><span class="nv">application</span> <span class="nf">openURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span> <span class="nf">sourceApplication:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">sourceApplication</span> <span class="nf">annotation:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">annotation</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// secrethandshake://oauth?access_token=324235253442</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([[</span><span class="n">url</span> <span class="n">host</span><span class="p">]</span> <span class="nl">isEqualToString:</span><span class="s">@&quot;oauth&quot;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// parse the authentication code query</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span> <span class="nl">authorizeFromExternalURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">authorizeFromExternalURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="p">[[</span><span class="n">OAuthHandler</span> <span class="n">sharedHandler</span><span class="p">]</span> <span class="nl">handleAuthTokenURL:</span><span class="n">url</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then I parse the query string in my OAuth Handler and store the access token and the refresh token in my user defaults.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">handleAuthTokenURL:</span><span class="p">(</span><span class="n">NSURL</span> <span class="o">*</span><span class="p">)</span><span class="nv">url</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="c1">// handle query here</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">dict</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span> <span class="nl">parseQueryString:</span><span class="p">[</span><span class="n">url</span> <span class="n">query</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">([</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;error&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">oauthHandlerDidFailWithError:</span><span class="p">[</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;error&quot;</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;access_token&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span> <span class="o">&amp;&amp;</span> <span class="p">[</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;refresh_token&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Save the access token and refresh token</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;access_token&quot;</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">kSHAccessTokenKey</span><span class="p">];</span>
</span><span class='line'>        <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">dict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;refresh_token&quot;</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">kSHRefreshTokenKey</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="n">oauthHandlerDidAuthorize</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="nl">oauthHandlerDidFailWithError:</span><span class="s">@&quot;Access token not found. Failed to log in to Hacker School.&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nf">parseQueryString:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">query</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSMutableDictionary</span> <span class="o">*</span><span class="n">dict</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSMutableDictionary</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithCapacity:</span><span class="mi">6</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSArray</span> <span class="o">*</span><span class="n">pairs</span> <span class="o">=</span> <span class="p">[</span><span class="n">query</span> <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;&amp;&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="n">pair</span> <span class="k">in</span> <span class="n">pairs</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSArray</span> <span class="o">*</span><span class="n">elements</span> <span class="o">=</span> <span class="p">[</span><span class="n">pair</span> <span class="nl">componentsSeparatedByString:</span><span class="s">@&quot;=&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">key</span> <span class="o">=</span> <span class="p">[[</span><span class="n">elements</span> <span class="nl">objectAtIndex:</span><span class="mi">0</span><span class="p">]</span> <span class="nl">stringByReplacingPercentEscapesUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">val</span> <span class="o">=</span> <span class="p">[[</span><span class="n">elements</span> <span class="nl">objectAtIndex:</span><span class="mi">1</span><span class="p">]</span> <span class="nl">stringByReplacingPercentEscapesUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">dict</span> <span class="nl">setObject:</span><span class="n">val</span> <span class="nl">forKey:</span><span class="n">key</span><span class="p">];</span>
</span><span class='line'>        <span class="n">elements</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="n">key</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>        <span class="n">val</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">pairs</span> <span class="o">=</span> <span class="nb">nil</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">dict</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To refresh the token, I just post to Hacker School&rsquo;s <code>/oauth/token</code> page with the query string <code>grant_type=refresh_token&amp;refresh_token=my_refresh_token</code> along with my client id and client secret, and store the new access token to sign my queries.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">refreshToken:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">NSURL</span> <span class="o">*</span><span class="n">tokenURL</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSURL</span> <span class="nl">URLWithString:</span><span class="s">@&quot;https://www.hackerschool.com/oauth/token&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSMutableURLRequest</span> <span class="o">*</span><span class="n">request</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSMutableURLRequest</span> <span class="nl">requestWithURL:</span><span class="n">tokenURL</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPMethod:</span><span class="s">@&quot;POST&quot;</span><span class="p">];</span>
</span><span class='line'>    <span class="n">NSString</span> <span class="o">*</span><span class="n">postString</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSString</span> <span class="nl">stringWithFormat:</span><span class="s">@&quot;grant_type=refresh_token&amp;client_id=%@&amp;client_secret=%@&amp;refresh_token=%@&quot;</span><span class="p">,</span> <span class="n">kMyClientID</span><span class="p">,</span> <span class="n">kMyClientSecret</span><span class="p">,</span> <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">objectForKey:</span><span class="n">kSHRefreshTokenKey</span><span class="p">]];</span>
</span><span class='line'>    <span class="p">[</span><span class="n">request</span> <span class="nl">setHTTPBody:</span><span class="p">[</span><span class="n">postString</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">]];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">NSURLConnection</span> <span class="nl">sendAsynchronousRequest:</span><span class="n">request</span>
</span><span class='line'>                                       <span class="nl">queue:</span><span class="p">[</span><span class="n">NSOperationQueue</span> <span class="n">mainQueue</span><span class="p">]</span>
</span><span class='line'>                           <span class="nl">completionHandler:</span><span class="o">^</span><span class="p">(</span><span class="n">NSURLResponse</span> <span class="o">*</span><span class="n">response</span><span class="p">,</span> <span class="n">NSData</span> <span class="o">*</span><span class="n">data</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="n">error</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>                               <span class="n">NSString</span> <span class="o">*</span><span class="n">responseBody</span> <span class="o">=</span> <span class="p">[</span> <span class="p">[</span><span class="n">NSString</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithData:</span><span class="n">data</span> <span class="nl">encoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                               <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;response: %@&quot;</span><span class="p">,</span> <span class="n">responseBody</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>                               <span class="n">NSData</span> <span class="o">*</span><span class="n">jsonData</span> <span class="o">=</span> <span class="p">[</span><span class="n">responseBody</span> <span class="nl">dataUsingEncoding:</span><span class="n">NSUTF8StringEncoding</span><span class="p">];</span>
</span><span class='line'>                               <span class="n">NSError</span> <span class="o">*</span><span class="n">e</span><span class="p">;</span>
</span><span class='line'>                               <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">jsonDict</span> <span class="o">=</span> <span class="p">[</span><span class="n">NSJSONSerialization</span> <span class="nl">JSONObjectWithData:</span><span class="n">jsonData</span> <span class="nl">options:</span><span class="n">NSJSONReadingAllowFragments</span> <span class="nl">error:</span><span class="o">&amp;</span><span class="n">e</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>                               <span class="k">if</span> <span class="p">(</span><span class="n">e</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                                   <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error: %@&quot;</span><span class="p">,</span> <span class="n">e</span><span class="p">);</span>
</span><span class='line'>                                   <span class="p">[</span><span class="n">self</span> <span class="nl">launchExternalSignIn:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>                               <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">([</span><span class="n">jsonDict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;error&quot;</span><span class="p">]</span> <span class="o">!=</span> <span class="nb">nil</span><span class="p">){</span>
</span><span class='line'>                                   <span class="n">NSLog</span><span class="p">(</span><span class="s">@&quot;error refreshing token: %@&quot;</span><span class="p">,</span> <span class="p">[</span><span class="n">jsonDict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;error&quot;</span><span class="p">]);</span>
</span><span class='line'>                                   <span class="p">[</span><span class="n">self</span> <span class="nl">launchExternalSignIn:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>                               <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                                   <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">jsonDict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;access_token&quot;</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">kSHAccessTokenKey</span><span class="p">];</span>
</span><span class='line'>                                   <span class="p">[[</span><span class="n">NSUserDefaults</span> <span class="n">standardUserDefaults</span><span class="p">]</span> <span class="nl">setObject:</span><span class="p">[</span><span class="n">jsonDict</span> <span class="nl">objectForKey:</span><span class="s">@&quot;refresh_token&quot;</span><span class="p">]</span> <span class="nl">forKey:</span><span class="n">kSHRefreshTokenKey</span><span class="p">];</span>
</span><span class='line'>                                   <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">delegate</span> <span class="n">oauthHandlerDidAuthorize</span><span class="p">];</span>
</span><span class='line'>                               <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>                           <span class="p">}];</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It took a lot of time to get this up and running due to the lack of clear documentation on OAuth 2.0 requests, but I&rsquo;m happy with how it turned out and very happy to have gotten rid of all of the external libraries. Rewriting the entire thing in a concise way let me fully understand everything that was happening, which makes the debugging process so much simpler. Hopefully this will help someone else struggling with OAuth login from an app. The source code is available <a href="https://github.com/lauraskelton/secrethandshake">on GitHub</a>.</p>

<p>Testing the app was exciting. Several people loaded the app onto their phones and logged in, and we were all getting alerts with each others&#8217; photos, which was pretty cool. The background notifications of nearby users were working perfectly. I&rsquo;m looking into setting up <a href="https://github.com/Instrument/Vicinity">a custom implementation of iBeacon using Bluetooth LE in background mode</a> that will allow the phones to broadcast periodically in the background as well, so that no one needs to have the app open to be notified that someone is nearby.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/10notifications.jpg" title="'SecretHandshake Notifications'" ></p>

<p>I had a great conversation with <a href="https://github.com/thomasballinger">Tom</a> in the morning about what I&rsquo;ve been working on at Hacker School and what I should focus on for the coming weeks to get the most out of it. I left feeling pretty good about the various directions I&rsquo;ve taken and how much/what/how fast I&rsquo;ve been learning. I&rsquo;m happy with the balance I&rsquo;ve had between <a href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/">iOS projects</a>, totally new projects (<a href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/">Arduino</a> and cool <a href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/">machine learning</a>/<a href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/">neural network</a> stuff), learning new languages (<a href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/">Swift!</a>), and programming basics (getting familiar with the <a href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/">data structures and algorithms</a> basics that would have been covered in CS courses had I taken that path).</p>

<p>I came away with some great new ideas for things that would be good and/or fun to focus on in the coming weeks and clearer goals for the rest of Hacker School. A side effect of being around so much creative energy and cool projects is that you can get overwhelmed with fear of missing out on what everyone else is doing, even if that&rsquo;s not what you came here to work on. Part of that is a fun and enriching distraction, like Arduino, and part of it just ends up being noise that confuses your focus. If a bunch of people are excited about writing compilers and learning Rust, should I be doing those things too?</p>

<p>I have a few ideas for some quick iOS apps that I&rsquo;d like to try to implement in Swift, that are more of a game/drawing style of app that use more math, graphics, and touch interface than the social utility apps I&rsquo;ve written in the past, which tended to take advantage of Apple&rsquo;s great built in user interface elements more than custom graphics and animations. Looking forward to the coming weeks!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 9: Data Structures in Swift]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9/"/>
    <updated>2014-06-20T23:54:01-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/20/hacker-school-day-9</id>
    <content type="html"><![CDATA[<p>After chatting with some alums who were visiting, I decided it would be a good idea to spend some time studying Data Structures and Algorithms while I&rsquo;m at Hacker School. The great thing about being involved in a program with other people instead of learning on your own is that you become aware of some of your unknown unknowns. I can certainly teach myself things I know that I need to learn, but it&rsquo;s more challenging to know if there&rsquo;s something I need to learn that I&rsquo;ve never even heard of.</p>

<p>As I was getting ready to post a question about any books or online courses for Data Structures that folks recommended, a couple of friends walked over and started coincidentally talking about the exact same thing. We picked out <a href="http://www.amazon.com/Algorithm-Design-Manual-Steven-Skiena/dp/1848000693">The Algorithm Design Manual</a> as the book we&rsquo;d work through, and put together a study group to read through it and work on the exercises together.</p>

<p>We ended up working late into the evening reading through the Data Structures section and implementing our own versions of some data structures in Apple&rsquo;s new Swift programming language. This worked wonderfully, as Swift works with XCode&rsquo;s new Playgrounds, which auto-compile code to show you right away if your code is working the way you expect it to.</p>

<p>We implemented a Swift version of a Linked List, and had some great conversations about the advantages and drawbacks of structuring some of the necessary methods in different ways, ending up with a neat implementation that took advantage of recursion to keep the code simple.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/9linkedlist.gif" title="'linked list'" ></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="n">LinkedList</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="n">head</span> <span class="o">:</span> <span class="n">LinkedListNode</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">search</span><span class="p">(</span><span class="nl">item:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">LinkedListNode</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">head</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">head</span><span class="o">!</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">add</span><span class="p">(</span><span class="nl">item:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">head</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">head</span><span class="o">!</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">head</span> <span class="o">=</span> <span class="n">LinkedListNode</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">size</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">head</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">head</span><span class="o">!</span><span class="p">.</span><span class="n">size</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">0</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="n">LinkedListNode</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">item:</span> <span class="n">String</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">next:</span> <span class="n">LinkedListNode</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="n">_</span> <span class="nl">contents:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">item</span> <span class="o">=</span> <span class="n">contents</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">add</span><span class="p">(</span><span class="nl">itemToAdd:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">nextNode</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">next</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">nextNode</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">itemToAdd</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">LinkedListNode</span><span class="p">(</span><span class="n">itemToAdd</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">cons</span><span class="p">(</span><span class="nl">itemToAdd:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">LinkedListNode</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">var</span> <span class="n">oldHead</span> <span class="o">=</span> <span class="n">LinkedListNode</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">item</span> <span class="o">=</span> <span class="n">itemToAdd</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">next</span> <span class="o">=</span> <span class="n">oldHead</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">self</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">search</span><span class="p">(</span><span class="nl">itemToFind:</span> <span class="n">String</span><span class="p">)</span> <span class="o">-&gt;</span> <span class="n">LinkedListNode</span><span class="o">?</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">item</span> <span class="o">==</span> <span class="n">itemToFind</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">self</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="n">let</span> <span class="n">nextNode</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">next</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">nextNode</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">itemToFind</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">nil</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">func</span> <span class="n">size</span><span class="p">()</span> <span class="o">-&gt;</span> <span class="n">Int</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">let</span> <span class="n">nextNode</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">next</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">nextNode</span><span class="p">.</span><span class="n">size</span><span class="p">()</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="mi">1</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I learned a lot that I didn&rsquo;t know before about what an Array represents on a machine level (same-type items stored in consecutive memory locations), and how it differs from a Linked List or a Dictionary (same-type items stored in different memory locations with pointers to the next item), which explained some things about Objective-C that I hadn&rsquo;t known the reasoning behind before we started, like why empty Arrays are initialized with a capacity.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/9arraycapacity.jpg" title="'array capacity'" ></p>

<p>We also learned a much more generalized definition of a Dictionary which was interesting. It was also helpful to go through worst-case algorithm processing times, called Big O notation or Asymptotic notation. We figured out the Big O notation for various functions on an unsorted and a sorted array, and then learned that deletes on an unsorted array can be done more cleverly than we had originally thought.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/9bigo.png" title="'big o notation'" ></p>

<p>I learned about Binary Searches on sorted arrays, where instead of having to iterate through every item to find a specific value, you keep splitting the array down the middle and figuring out which half the value would be in, reducing the number of steps to find an item dramatically.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/9binarysearch.png" title="'binary search'" ></p>

<p>Later that evening, we learned about Binary Trees and the special Binary Search Trees. The Binary Search Trees work just like Binary Searches on sorted arrays, and the search is cleverly designed in the structure of the data itself. Each larger value is put into a branch node to the right, and each smaller value goes to the right. That way, to find a specific value, you have built in short-cuts as compared to an array.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/9binarysearchtree.png" title="'binary search tree'" ></p>

<p>Binary Trees might be unbalanced- if you added the values in numerical order, you would end up with just a line from the lowest value at the top to the highest value at the bottom right. The tree would be very tall, and thus it would take just as long to traverse as a regular array. The &ldquo;balancing&rdquo; of the tree, which is the distribution of values so that the right and left branches of the tree and its nodes are approximately equal, makes it possible to find values much more quickly, because each node is linked to not one but two different values, and you still know which of the links to follow simply by knowing if you are looking for a larger or smaller value. A cool trick is that if the values you are putting in can be expected to have a large degree of randomness, the tree has a high probability of being well-balanced (since subsequently-added values are equally likely to go to the left or the right of existing values, and not just all in one direction), and therefore not too tall, which will make it quickly searchable.</p>

<p>We implemented a Binary Tree structure in Swift, which was exciting because of its simplicity in code once we understood how the structure worked.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="n">BinaryTree</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">data:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">left:</span> <span class="n">BinaryTree</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">right:</span> <span class="n">BinaryTree</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">insert</span><span class="p">(</span><span class="nl">d:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">!</span><span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="n">d</span> <span class="o">&lt;</span> <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">let</span> <span class="n">l</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">l</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">var</span> <span class="n">tree</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">tree</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>                    <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">tree</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="n">let</span> <span class="n">r</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">r</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">d</span><span class="p">)</span>
</span><span class='line'>                <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">var</span> <span class="n">tree</span> <span class="o">=</span> <span class="n">BinaryTree</span><span class="p">()</span>
</span><span class='line'>                    <span class="n">tree</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">d</span>
</span><span class='line'>                    <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">tree</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because we are simultaneously trying to learn the new tools available in Swift, we implemented a second version of the Binary Tree using a switch statement with a tuple and Swift&rsquo;s new pattern matching rules instead of if/else statements.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="n">BinaryTree2</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">data:</span> <span class="n">Int</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">left:</span> <span class="n">BinaryTree2</span><span class="o">?</span>
</span><span class='line'>    <span class="n">var</span> <span class="nl">right:</span> <span class="n">BinaryTree2</span><span class="o">?</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">init</span> <span class="p">(</span><span class="nl">n:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">func</span> <span class="n">insert</span> <span class="p">(</span><span class="nl">n:</span> <span class="n">Int</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">switch</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">data</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">left</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">right</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">(.</span><span class="n">None</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span><span class="o">:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">data</span> <span class="o">=</span> <span class="n">n</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">.</span><span class="n">Some</span><span class="p">(</span><span class="n">l</span><span class="p">),</span> <span class="n">_</span><span class="p">)</span> <span class="n">where</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="nl">n:</span>
</span><span class='line'>            <span class="n">l</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="p">.</span><span class="n">None</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="n">where</span> <span class="n">data</span> <span class="o">&lt;</span> <span class="nl">n:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">left</span> <span class="o">=</span> <span class="n">BinaryTree2</span><span class="p">(</span><span class="nl">n:</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="p">.</span><span class="n">Some</span><span class="p">(</span><span class="n">r</span><span class="p">))</span> <span class="n">where</span> <span class="n">data</span> <span class="o">&gt;=</span> <span class="nl">n:</span>
</span><span class='line'>            <span class="n">r</span><span class="p">.</span><span class="n">insert</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="k">case</span> <span class="n">let</span> <span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">_</span><span class="p">,</span> <span class="p">.</span><span class="n">None</span><span class="p">)</span> <span class="n">where</span> <span class="n">data</span> <span class="o">&gt;=</span> <span class="nl">n:</span>
</span><span class='line'>            <span class="n">self</span><span class="p">.</span><span class="n">right</span> <span class="o">=</span> <span class="n">BinaryTree2</span><span class="p">(</span><span class="nl">n:</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We kept getting an error with this version that we hadn&rsquo;t covered every possible case, and every time we added a default case or a universal pattern match, XCode would crash. After many attempts, we learned that this is actually due to a known bug in Swift that will hopefully be fixed soon.</p>

<p>I&rsquo;m looking forward to learning a lot more about data structures with this group. It&rsquo;s amazing how accelerated my gaining of knowledge is in a co-learning environment like this- it&rsquo;s like the worlds&#8217; best study group that I get to work with every day. We were getting excited about putting a group together to go through some <a href="https://archive.org/details/Non-euclideanGeometry">advanced math textbooks I found online</a>, and I feel sad that Hacker School is only 3 months and I won&rsquo;t be here learning all of these things for at least the next year!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 8: Secret Handshake App]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8/"/>
    <updated>2014-06-19T20:53:29-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/19/hacker-school-day-8</id>
    <content type="html"><![CDATA[<p>I finished a <a href="https://github.com/lauraskelton/secrethandshake">new iPhone app</a> today!! It was inspired by someone at the Swift meetup saying that Hacker School was like the new Freemasons &ndash; some kind of secret society that instantly connected you with other people. I had such a good time talking to some Hacker School alums I hadn&rsquo;t met before, that I thought it would be good to have an app that would let me know at future meetups whether there were any other Hacker Schoolers in the room.</p>

<p>In iOS 7, Apple introduce iBeacons, a proximity beacon built on top of Bluetooth LE. IPhones can scan for iBeacon signals, and display special hyperlocal information when they come within range of one, such as at a store display or at a particular museum exhibit. The iBeacon signal can even wake up an iPhone that is inactive with an alert and a notification banner.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/8ibeacon.jpg" title="'ibeacon'" ></p>

<p>The really exciting thing is that iPhones can also act as iBeacon emitters as well as receivers. You can send out an iBeacon signal from your phone while also scanning for similar signals from other people&rsquo;s phones.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">initBeacon</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CLBeaconRegion</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithProximityUUID:</span><span class="n">uuid</span>
</span><span class='line'>                                                                <span class="nl">major:</span><span class="mi">1</span>
</span><span class='line'>                                                                <span class="nl">minor:</span><span class="n">userID</span>
</span><span class='line'>                                                           <span class="nl">identifier:</span><span class="s">@&quot;someregion&quot;</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">transmitBeacon</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">beaconPeripheralData</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">beaconRegion</span> <span class="nl">peripheralDataWithMeasuredPower:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">peripheralManager</span> <span class="o">=</span> <span class="p">[[</span><span class="n">CBPeripheralManager</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithDelegate:</span><span class="n">self</span>
</span><span class='line'>                                                                         <span class="nl">queue:</span><span class="nb">nil</span>
</span><span class='line'>                                                                       <span class="nl">options:</span><span class="nb">nil</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I set up my app so that each user&rsquo;s phone emits an iBeacon signal that includes their userID. Each phone also scans for other signals, and if it finds that of another Hacker Schooler&rsquo;s phone, it sends an alert to the scanner&rsquo;s phone and downloads a profile photo, name, and batch of the nearby person. That way, you could make sure to stop by and chat with that person at a conference or meetup.</p>

<p>So far it seems to be working well, but I definitely need beta testing help from some other Hacker School folks who wouldn&rsquo;t mind giving some feedback. I have it up on TestFlight if you have an iPhone and time to test it out! <a href="http://tflig.ht/1stcVLG">http://tflig.ht/1stcVLG</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 7: Mesh Networking, Cryptocurrencies, and iBeacons]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7/"/>
    <updated>2014-06-18T08:15:31-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/18/hacker-school-day-7</id>
    <content type="html"><![CDATA[<p>I started off working on my beer neural network a bit more. I figured out part of the problem that was giving me data that didn&rsquo;t feel right, which had to do with changing the inputs to give an incomplete picture of the outputs to force the neural network to draw more meaningful connections between the missing beer ratings and the existing beer ratings. Basically, I erased half of the beer ratings from each user from the &ldquo;input&rdquo; dataset, and left the &ldquo;output&rdquo; dataset the same, so the network would have to actually predict and couldn&rsquo;t cheat by just figuring out how to compress the ratings down to 10 nodes and then decompress them back to 900 nodes using tricky math.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/7neuralnetwork.png" title="'neural network'" ></p>

<p>Now that the neural network is actually learning, I can&rsquo;t seem to get my error rate down to a level I&rsquo;m happy with. I&rsquo;m going to keep working on tweaking the parameters of the neural network to see if I can get it to output something cool that I can share.</p>

<p>While my computer was crunching away at reducing the neural network&rsquo;s error, I took a coffee break down the street with a few friends, which led to a fascinating conversation that lasted a couple of hours, mainly about Mesh Networking and Cryptocurrencies. I learned a lot about how different cryptocurrencies work, including Namecoin, which is linked to your domain name and can validate you, and another cryptocurrency that includes its own programming language that can have actually have contracts embedded in code within a transaction.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/7dogecoin.png" title="'dogecoin'" ></p>

<p>We went down a pretty complicated rabbit hole of trying to figure out if there was a way to solve some problems in Mesh Networking by linking it with a cryptocurrency, either to validate the identity of nodes to allow secure communication without a centralized server (replacing SSL), or to pay central nodes for traffic they routed in order to reward mesh network users to be good citizens and stay connected to the mesh routing messages between other nodes even when they weren&rsquo;t personally using it.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/7torcoin.jpg" title="'torcoin'" ></p>

<p>We ended up talking about an idea to combine a social network with mesh network routing or  secure direct connections by using an app with Bluetooth LE to confirm in person that each person in my inner circle is who they say they are. Each of those people could do the same thing for their trusted friends, and then we would have a network of nodes each with a certain degree of social separation and therefore degree of trustedness which we could use to priorities routing of messages.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/7weboftrust.png" title="'web of trust'" ></p>

<p>We left with some interesting ideas and a bunch of reading to do on Mesh Networking. It turns out that the idea of compensating for node bandwidth was discussed in <a href="http://dedis.cs.yale.edu/dissent/papers/hotpets14-torpath.pdf">a recent paper about TorCoin</a>, which would be &ldquo;mined&rdquo; by routing traffic over the Tor network, and then could be sold in altcoin exchanges, encouraging good behavior on the network. We also decided to read through <a href="https://en.wikipedia.org/wiki/Wireless_mesh_network#Routing_protocols">an overview of the many previously attempted mesh network routing protocols</a> to get a clearer picture of benefits and pitfalls of different approaches. There is also <a href="http://www.amazon.com/Linked-The-New-Science-Networks/dp/0738206679">a book that discusses the inherent properties of many types of networks</a> that sounds like an interesting read.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/7meshnetwork.jpg" title="'mesh network'" ></p>

<p>I was totally re-energized by this discussion, and decided to figure out iBeacons so I can make a fun Objective-C app for Hacker School. When I went to the Swift meetup at Etsy, almost everyone I met was excited about Hacker School, and I instantly had something to talk about with the new people I was meeting. On top of that, a few Hacker School alumni came out to the bar in Dumbo after the meetup, which was very cool. The app idea was inspired by a comment someone made that night that Hacker School was like the new Freemasons.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/7ibeacon.jpg" title="'ibeacons'" ></p>

<p>I finished up the nitty gritty late into the evening, and should have a fully working app ready for testing tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 6: Beer Neural Network and Testing Code]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/17/hacker-school-day-6/"/>
    <updated>2014-06-17T20:48:27-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/17/hacker-school-day-6</id>
    <content type="html"><![CDATA[<p>I worked on getting a visualization up of the beer neural network (with 100 beers as both inputs and outputs of the network and 10 hidden nodes) that I trained yesterday. Theoretically it should be able to take as input all of a user&rsquo;s beer ratings, and output their predicted ratings for every beer in the system.</p>

<p>I was most interested in classifying the beers and seeing what happened with the inputs to the hidden nodes- would it group certain beers together as sort of tastemakers of that node? I mapped out the top 5 positive and top 5 negative inputs to each node after it was trained onto my beer clustering map, and the results were interesting and a bit confusing. Some of the nodes made more intuitive sense than others, such as this node of someone whose defining taste predictor is that they love pale watery beers and hate Guinness and bitter IPAs.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/6node3.jpg" title="'first beernet node 3'" ></p>

<p>Some of the nodes seemed confusing and a bit random to me intuitively, although the error rate seemed pretty low which seems to indicate that there must be some meaning there. I&rsquo;m going to work tomorrow on training a new network using 900 beers instead of just the top 100 to fill in some of the gaps and nuance of the taste profiles. I actually wonder if 10 nodes was too many for only 100 beers, which would make the groupings more idiosyncratic when broader groups might be more informative. I&rsquo;m also planning to read up on Restricted Boltzmann Machines to delve into some deep learning networks.</p>

<p>I spent a few hours in the afternoon learning about testing in Javascript. This was by far the most formally directed thing I&rsquo;ve worked on at Hacker School so far. Mary gave a presentation showing a simple program in various stages along with the tests she wrote for it, so we could really see how the tests became easier to write as she refactored the code into many smaller functions. We got a chance to pair program afterwards to refactor her Javascript server code and write some tests for it. This was very helpful, and I feel much more directed now in terms of knowing some best practices for writing code.</p>

<p>I spent much of the afternoon rewriting some of my own Python code to break out some of the giant run-on functions into small pieces that I can reuse. It&rsquo;s much cleaner so far, and seems easier to follow since I can get right to a particular piece of code I need to tweak.</p>

<p>I&rsquo;m looking forward to cleaning up my code a LOT more. It&rsquo;s helpful to be around so many other programmers I can learn and improve from to write much cleaner, more efficient code, instead of just being happy that the program runs well with no bugs. Planning to focus a lot during Hacker School on improving in that area!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 5: Neural Network Handwritten Digit Classifier]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/16/hacker-school-day-5/"/>
    <updated>2014-06-16T21:04:29-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/16/hacker-school-day-5</id>
    <content type="html"><![CDATA[<p>I continued working through the <a href="http://neuralnetworksanddeeplearning.com">Neural Networks book</a>. A lot of the rusty math started finally coming back to me in sudden bursts of insight, and the book broke the main formulas down enough that I was able to really follow what was going on and how the pieces were working together on a conceptual and mathematical level.</p>

<p>I got some Python code running in the terminal to create and backpropagate a neural network for classifying handwritten digits, using the MNIST dataset, following along with the exercises in the book. It&rsquo;s pretty exciting how quickly the error decreases with the stochastic gradient descent optimization on the weights and biases of the neural network nodes. It seems to learn very quickly!</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5digits.png" title="'handwritten digits'" ></p>

<p>I was bummed to learn that deep neural networks, which have multiple hidden layers between the input and output nodes, are apparently much harder to train than these &ldquo;shallow&rdquo; neural networks with just one hidden layer. Deeper networks are awesome because they can make much smarter decisions and much more complicated distinctions and abstractions between things by looking at patterns in a more complicated way. There is apparently some very recent math (from 2006!) that enables more efficient learning in deeper neural nets, that can train networks with 5 to 10 hidden layers. I&rsquo;m looking forward to learning how to implement these deeper networks, but will have to find a new source of learning materials as this book is currently unfinished and stops after explaining the mathematical proof and conceptual model behind back propagation.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5deepnetworklayer.png" title="'Deep Neural Network'" ></p>

<p>What is cool about the limitations of training deep neural networks is that one of my early ideas for a Hacker School project now seems like it would actually be useful, more than when I mistakenly believed that many-layered neural networks were easy to set up and train. I wanted to make a modular neural network for image classification, with input layers that took particular sets of images and output them into different categories. For example, networks that detect lines, or shapes, or an eye, or sort by color, etc. The neural networks could be set up in such a way that they are trained individually, but they could be linked to feed information from one to the next in order to do more complicated classifications. Training neural networks takes some processing power, but once they are well-trained, they can process and classify new data very quickly, even running in the browser. I think it would be a really cool open-source project if I could set up a modular framework so that people could add different types of pre-trained visual image processing neural networks that could then be linked up in a custom way for anyone who needed to do image classification quickly.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5deepnetwork.png" title="'Deep Neural Network Image Classification'" ></p>

<p>I discovered <a href="http://evolvingstuff.blogspot.com/2012/12/learning-mnist-with-shallow-neural.html">another article about shallow neural networks and handwritten digit classification</a> that was very exciting! I hadn&rsquo;t realized until I read it that once the neural network is trained, you could display the relative weights of the inputs to each hidden neuron as a representation of what that hidden neuron was looking for. This is a very similar concept to the discovery of independent features in Non-Negative Matrix Factorization that I learned about last week. The &ldquo;features&rdquo;, or the features the hidden nodes represent, can be represented and described purely by the relative weights of the data inputs they represent. For the articles and topic themes in the Non-Negative Matrix Factorization exercise, that would be the words that describe the theme. For handwritten digit classification, that turns out to be the intensity of the weight of each pixel input for that node, which can be represented visually.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5input1.jpg" title="'handwritten digit feature'" ></p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5input2.jpg" title="'handwritten digit feature'" ></p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5input3.jpg" title="'handwritten digit feature'" ></p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5input4.jpg" title="'handwritten digit feature'" ></p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/5input5.jpg" title="'handwritten digit feature'" ></p>

<p>You can actually see what visual features of the image a particular hidden node of the digit classifier neural network is looking for, and it&rsquo;s easy to imagine that if two hidden nodes were highly active, it could represent for example a top curve and a bottom curve that would indicate the number zero. This visualization of the input weights helped a lot with my conceptual understanding of what the hidden nodes represent and how they might be working together.</p>

<p>This got me very excited about the idea of applying a neural network classifier to my beer ratings dataset of 200,000 beer ratings from a few thousand users of a couple thousand beers. I realized that not only can I use a neural network to recommend beers to users very quickly once the network is trained, but I realized that for beers, the hidden nodes would represent groupings of beers into a sort of taste profile. I&rsquo;m imagining a node each for hoppy-bitter beers, boozy belgians, roasty stouts, and sweeter lighter beers, with each individual user&rsquo;s preferences being some combination of those flavor types, represented in the program by different activations of those hidden nodes. This is very exciting!</p>

<p>I got my beer data into an appropriate format and trained a neural network with 10 hidden nodes (which to my understanding represents 10 beer-taste-profiles), and tomorrow I&rsquo;m going to work on a representation showing which of the top 100 beers activate each node, representing independent features (meaningful beer groupings) of the dataset.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 4: Neural Networks]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4/"/>
    <updated>2014-06-13T18:18:21-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/13/hacker-school-day-4</id>
    <content type="html"><![CDATA[<p>I continued on the Machine Learning path by starting work on <a href="http://neuralnetworksanddeeplearning.com">Neural Networks and Deep Learning</a> to deepen my understanding of Neural Nets.</p>

<p>I started working on Neural Networks in the <a href="http://shop.oreilly.com/product/9780596529321.do">Programming Collective Intelligence</a> book a few months ago as a way to train a search engine to learn to return better results for a query. The explanation of how Neural Networks were really operating, and why the algorithms were laid out the way they were, was an extremely brief page or two. I got the basic idea of a layer of inputs that fed through a network to return outputs, and then backpropagated based on training data to correct mistakes and improve over time. I didn&rsquo;t understand what was going on with the Hidden Layer, the nodes between the input and output layers, or what was really happening with the weights and where the complicated formula for calculating the new weight of each node was coming from.</p>

<p>The new Neural Networks and Deep Learning book fills in that deeper understanding so well! The pace is perfect, and the author takes the time to pause to explain each step and each formula used in detail. He starts by explaining the Perceptron, the simplest node component of a Neural Network which has been around for a while, and how it could be used to create a similar logical path as a NAND gate, which meant that it can be used for any type of logical calculation since any type of computation can be built up from NAND gates.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/4neuralnet_perceptron.png" title="'perceptron acting as NAND gate'" ></p>

<p>The trouble with Perceptrons is that the inputs and outputs are all binary, and so when it comes to training the network to improve results, the changes are sudden instead of gradual when the weights and biases of a node are adjusted (eg. the output suddenly flips from 1 to 0 instead of decreasing gradually). So, in order to learn, Neural Networks need to use a variation of the Perceptron called a Sigmoid Neuron, which is able to take inputs that range from 0 to 1, and outputs a number ranging from 0 to 1. Instead of a jump from 0 to 1 when the inputs * weights are greater than the bias, the sigmoid function takes the weights of all the inputs and the bias and outputs a number scaled smoothly between 0 and 1, so that incremental changes to the network&rsquo;s weights and biases will make small improvements to the results that can then be optimized.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/4neuralnet_sigmoid.png" title="'sigmoid neuron reflects small changes'" ></p>

<p>I was so excited by this section, because the sigmoid function that was unclearly derived in my earlier Neural Network explorations made perfect sense after this explanation. I got excited and actually graphed out the sigmoid function before I saw his graph a little further down because I saw that it would output larger values scaled to a max of 1 and smaller values scaled to a min of 0 for the inputs. The tone of this book is wonderful in the way that a good professor can explain conversationally a complicated topic and make everything suddenly make perfect sense.</p>

<p>I&rsquo;m embarrassed to admit that I got a bit lost with the math in the next section. I took Multivariable Calculus, Linear Algebra, and Partial Differential Equations when I was still in high school, and since I haven&rsquo;t used most of that math since then it&rsquo;s a bit rusty. (Though, side note, I was pleasantly surprised to make use of MV Calc for an architecture project that involved making calculations for projecting a flat print around a spherical globe.) I tracked down my high school textbooks to review some of the concepts I couldn&rsquo;t remember clearly, and learned that most of the textbooks are now available in full online! I&rsquo;m looking forward to reviewing my <a href="https://archive.org/stream/Calculus_643/Spivak-Calculus">Calculus book</a> and <a href="https://archive.org/stream/LinearAlgebra/Hadley-LinearAlgebra">Linear Algebra textbook</a> to quickly relearn a few things, as well as browsing through some other math topics that have always interested me, such as Non-Euclidean Geometry. It&rsquo;s a challenge to stay focused when there are so many amazing things to learn.</p>

<p>The book has a fantastic explanation of what is happening with the hidden layers of a Neural Network, and some overview of what features the hidden nodes might represent.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/4neuralnet_digits.png" title="'neural network digit classifier'" ></p>

<p>After setting up a certain number of layers and specifying the number of hidden nodes, you assign random weights and biases to each node in the network to begin. You then run the inputs through the network and check the outputs against the known correct answers. Using an optimization method similar to those used in other Machine Learning algorithms, you then attempt to find a local minimum of the error calculation for the output vs. the known answers. In order to avoid doing zillions of calculations for a large data set, you can use an optimization called Stochastic Gradient Descent to pick a random subset of inputs and optimize only on those, which with a large enough subset should approximate the values of the full dataset with a fraction of the processing time.</p>

<p>Super excited to continue working through this book and to learn to implement custom neural network classifiers in code!</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/4neuralnet_decider.png" title="'neural network decision maker'" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 3: Non-Negative Matrix Factorization and Beer Clustering]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3/"/>
    <updated>2014-06-12T20:55:09-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/12/hacker-school-day-3</id>
    <content type="html"><![CDATA[<p>I started working on fixing some of the bugginess of the Multipeer Connectivity framework in ObjC in the morning. I tried to hack it so that Multipeer would continue working when the app was in background mode (not currently possible due to Apple&rsquo;s imposed limitations), so that we could have a count of how many people were connected to the network.</p>

<p>I also spent some time working on a problem that seems to be coming from issues with lower-level Bluetooth LE frameworks, where there are errors when trying to reconnect to the same peer multiple times after disconnecting. The issues are linked, because there can be problems rejoining the network after the backgrounded app is opened again and tries to reconnect. I suspect it has to do with sessions not fully closing from the first session when the device attempts to start a new session.</p>

<p>I got a much deeper understanding of the capabilities of Multipeer while I was walking through the code handling the sessions and peers within the network, but in the end I concluded that Multipeer is still pretty buggy. I&rsquo;m reconsidering starting with our own implementation of a mesh network in Bluetooth LE instead of using Multipeer, since it seems like Multipeer doesn&rsquo;t really allow us to avoid some of the tricky issues we were handling in CoreBluetooth, and possibly the higher-level framework gives us less power to debug and work around some of the problems. CoreBluetooth also possibly avoids some of the issues with Multipeer not working in background mode, since we can set a Bluetooth LE message to broadcast in the background, and detecting a nearby iBeacon should be able to &ldquo;wake up&rdquo; an app even if it has been closed by the user. Plus I&rsquo;ve already played around with CoreBluetooth with my <a href="https://github.com/lauraskelton/simple-share">SimpleShare</a> Bluetooth LE Local Sharing project.</p>

<p>I switched tasks to continue working through <a href="http://shop.oreilly.com/product/9780596529321.do">Programming Collective Intelligence</a>, an amazing book on Machine Learning algorithms. It was wonderful to get into working on Machine Learning again, since it&rsquo;s what I had originally intended to focus on at Hacker School before I was swept up with Swift.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/pci.jpg" title="programming collective intelligence" alt="programming collective intelligence"></p>

<p>I worked through the chapter on Non-Negative Matrix Factorization today, which was actually way more awesome than it sounds. You can scan through a bunch of articles and get word counts, just like in an earlier chapter on document classification using a naive Bayesian classifier. The Bayesian classifier used a weighted probability based on the word counts to predict which category a document belonged to out of a set of predetermined category options, and based on initial training data.</p>

<p>Non-Negative Matrix Factorization is WAY cooler! It starts with the same word-count information for each article set up in a matrix, then factors the matrix into two matrices that, multiplied together, would be approximately equal to the original matrix (articles vs. words). The two factor matrices give you some really neat information about the data set, and they actually extract what the features (categories/themes) are automatically given a set number of desired features. The features can be described by which words are most likely to appear in them. So the first factor matrix has a column for each word and a row for each feature/theme/category, with each number in the matrix being the likelihood that a particular word belongs to that theme, and the second factor matrix has a row for each article and a column for each feature, and the numbers in the matrix correspond to the weight of each theme in that article.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/nmf1.jpg" title="'non-negative matrix factorization'" ></p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/nmf2.jpg" title="'non-negative matrix factorization'" ></p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/nmf.jpg" title="'non-negative matrix factorization'" ></p>

<p>It&rsquo;s very cool to see how some clever math and optimization can actually allow the algorithm to come up with its own categories/classes of articles (or anything else you&rsquo;re studying), without having any training data or input from the user about what is expected.</p>

<p>I have one more chapter in the book I&rsquo;ve been working through that I&rsquo;m excited to get through tomorrow, on Genetic Programming, which is all about writing programs that can actually modify themselves and evolve the code itself. Super cool!</p>

<p>I&rsquo;m also looking forward to getting started on learning about Neural Networks more in-depth. I&rsquo;d really like to understand on a deep conceptual level what neural nets are really doing, and this online book looks like a great way to get started. <a href="http://neuralnetworksanddeeplearning.com">http://neuralnetworksanddeeplearning.com</a></p>

<p>I ended the day by doing a short presentation about a beer clustering project I did a couple of months ago in Python. My beer recommendations iOS app generated over 200,000 beer ratings, which has been a pretty cool data set to play around with. I started by scattering beers randomly in a 2 dimensional grid, then moved the points to try to get the distances between each beer to approximate the Pearson distance I calculated by comparing user ratings of all of the beers to find which were most similar (and so should be closer together on the beer map), and which beers were most different, and so should be far apart. I figured out some tricks to break out of the local minimums I kept running into, and ended up with a <a href="http://beerchooser.com/beermap/beergmap.html">pretty cool map</a> of many different beers and how they are related by user preference to each other. (The green color represents IBU &ndash; International Bittering Units, a measure of bitterness/hoppiness in beer, and the blue color represents ABV, or alcohol content, of each beer.)</p>

<p>It was my first time ever presenting a coding project I&rsquo;d done in front of a group of people, and it was a cool experience to share something I&rsquo;d been working on with a group that could follow what I&rsquo;d done and understand what was neat about it. It was great practice for me in talking about my coding work to a larger group, which I have done much more with my design work than with my programming projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 2: Arduino and Mesh Networking]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2/"/>
    <updated>2014-06-11T20:44:53-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/11/hacker-school-day-2</id>
    <content type="html"><![CDATA[<p>I had such a fun day! In the morning I learned how to use Arduino to control Neopixel RGB LED lights from Adafruit. It was so fast to get going with this, and the code was easy to tweak to change the patterns the lights would display.</p>

<p><img class="center" src="http://lauraskelton.github.io/images/posts/adapixels.jpg" title="adafruit neopixels" alt="adafruit neopixels"></p>

<p>We wrote some code a little later that cycled through a rainbow with alternating pixels flashing opposite colors off and on.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">void</span> <span class="nf">rainbow</span><span class="o">(</span><span class="n">uint8_t</span> <span class="n">wait</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">uint16_t</span> <span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="o">(</span><span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">j</span><span class="o">&lt;</span><span class="mi">256</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">for</span><span class="o">(</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">strip</span><span class="o">.</span><span class="na">numPixels</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="o">((</span><span class="n">j</span><span class="o">/</span><span class="mi">10</span><span class="o">)</span> <span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strip</span><span class="o">.</span><span class="na">setPixelColor</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">Wheel</span><span class="o">((</span><span class="mi">255</span><span class="o">-</span><span class="n">i</span><span class="o">-</span><span class="n">j</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="o">));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strip</span><span class="o">.</span><span class="na">setPixelColor</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">j</span><span class="o">/</span><span class="mi">10</span><span class="o">)</span> <span class="o">%</span><span class="mi">2</span><span class="o">!=</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">strip</span><span class="o">.</span><span class="na">setPixelColor</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">Wheel</span><span class="o">((</span><span class="n">i</span><span class="o">+</span><span class="n">j</span><span class="o">)</span> <span class="o">&amp;</span> <span class="mi">255</span><span class="o">));</span>
</span><span class='line'>          <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">strip</span><span class="o">.</span><span class="na">setPixelColor</span><span class="o">(</span><span class="n">i</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>          <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">strip</span><span class="o">.</span><span class="na">show</span><span class="o">();</span>
</span><span class='line'>    <span class="n">delay</span><span class="o">(</span><span class="n">wait</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Wheel</code> is a neat little function in the Adafruit Neopixel code that converts a value from 0 to 255 to an RGB color value.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// Input a value 0 to 255 to get a color value.</span>
</span><span class='line'><span class="c1">// The colours are a transition r - g - b - back to r.</span>
</span><span class='line'><span class="n">uint32_t</span> <span class="nf">Wheel</span><span class="o">(</span><span class="kt">byte</span> <span class="n">WheelPos</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>  <span class="k">if</span><span class="o">(</span><span class="n">WheelPos</span> <span class="o">&lt;</span> <span class="mi">85</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">strip</span><span class="o">.</span><span class="na">Color</span><span class="o">(</span><span class="n">WheelPos</span> <span class="o">*</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">255</span> <span class="o">-</span> <span class="n">WheelPos</span> <span class="o">*</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">WheelPos</span> <span class="o">&lt;</span> <span class="mi">170</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">WheelPos</span> <span class="o">-=</span> <span class="mi">85</span><span class="o">;</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">strip</span><span class="o">.</span><span class="na">Color</span><span class="o">(</span><span class="mi">255</span> <span class="o">-</span> <span class="n">WheelPos</span> <span class="o">*</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">WheelPos</span> <span class="o">*</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>   <span class="n">WheelPos</span> <span class="o">-=</span> <span class="mi">170</span><span class="o">;</span>
</span><span class='line'>   <span class="k">return</span> <span class="n">strip</span><span class="o">.</span><span class="na">Color</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">WheelPos</span> <span class="o">*</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">255</span> <span class="o">-</span> <span class="n">WheelPos</span> <span class="o">*</span> <span class="mi">3</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>I&rsquo;m so excited to learn more about hardware and connecting apps to display patterns with the lights.</p>

<p>I spent some time brainstorming about Mesh Networking with a group. We want to create our own implementation of ICMP (Internet Control Message Protocol) over Bluetooth LE, using iBeacons as a sort of push notification to alert nearby devices that messages are available, and broadcasting messages through the nodes of the network to get to the intended user.</p>

<p>We&rsquo;re planning to link the mesh network up with a hardware project using the programmable RGB LED lights from Adafruit to represent the users of the network. I thought it would be cool to make a sort of giant firefly jar with light-dots flying around inside, with one dot representing each user-node of the mesh network. The ObjC iOS app would allow users to join the network and then set their dot&rsquo;s color, which would be reflected in the physical firefly jar.</p>

<p>We found a source for an affordable Bluetooth LE adapter for the Arduino and mapped out a plan for how to design the network on the whiteboard. Excited to give it a go tomorrow!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 1: Swift Tricks]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1/"/>
    <updated>2014-06-10T14:25:15-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/10/hacker-school-day-1</id>
    <content type="html"><![CDATA[<p>Things got much more tricky when I started trying to implement <a href="https://github.com/lauraskelton/simple-share">SimpleShare</a>, my Bluetooth LE (CoreBluetooth) mesh network sharing app, in Swift, using the new Multipeer Connectivity framework instead of Bluetooth. There were much more complicated things I needed to do in Obj-C, and the app couldn&rsquo;t be &ldquo;translated&rdquo; in the same way as the simpler apps just by changing to the new syntax, since Swift actually works differently in key ways than Obj-C does.</p>

<p>Things I learned about Swift:</p>

<ul>
<li>Optional variables: You can no longer have variables that aren&rsquo;t set or that are nil like you could in Obj-C. If you don&rsquo;t know what a variable is when the class is created, you have to make it an optional variable by putting a <code>?</code> after the type declaration.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="n">MyClass</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">var</span> <span class="nl">mystring:</span> <span class="n">String</span><span class="o">?</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>Global variables: It seems that any variables you set within a class but outside of a function act like public parameters for that class and are accessible to read or set from other classes</p></li>
<li><p>Calling functions from another class: You call a function from another class by writing the class name followed by a dot then the function name with its arguments, eg: <code>MyClass.someFunction(arg1,arg2)</code></p></li>
<li><p>Init functions are a special case: Instead of calling <code>MyClass.init(arg1,arg2)</code> like you would for any other function, just calling <code>MyClass(arg1,arg2)</code>
is how you can init an instance of a class.</p></li>
<li><p>Convenience init: If your init function requires arguments to create a class instance, you can create a second init method for convenience that creates an instance with default values.</p></li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">class</span> <span class="n">SimpleMesh</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">init</span><span class="p">(</span><span class="nl">simpleMeshAppID:</span> <span class="n">String</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">simpleMeshAppID</span> <span class="o">=</span> <span class="n">simpleMeshAppID</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">myItemIDs</span> <span class="o">=</span> <span class="p">[</span><span class="s">&quot;first&quot;</span><span class="p">,</span> <span class="s">&quot;second&quot;</span><span class="p">,</span> <span class="s">&quot;third&quot;</span><span class="p">,</span> <span class="s">&quot;fourth&quot;</span><span class="p">,</span> <span class="s">&quot;fifth&quot;</span><span class="p">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">convenience</span> <span class="n">init</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">self</span><span class="p">.</span><span class="n">init</span><span class="p">(</span><span class="nl">simpleMeshAppID:</span> <span class="s">&quot;[NO ID]&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the afternoon, I made a plan with Jorge and Kyle to work on a mesh networking inspector to figure out the limitations of Multipeer Connectivity so that we can build a stable mesh networking messaging app. We decided to move forward on the project in Objective-C while continuing to learn Swift on the side so we can finish more quickly.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hacker School Day 0: Swift Playgrounds]]></title>
    <link href="http://lauraskelton.github.io/blog/2014/06/09/hacker-school-day-0/"/>
    <updated>2014-06-09T13:37:53-04:00</updated>
    <id>http://lauraskelton.github.io/blog/2014/06/09/hacker-school-day-0</id>
    <content type="html"><![CDATA[<p>First day of Hacker School! It was amazing to meet so many people who shared interests and had new ideas about programming.</p>

<p>I had planned to get to work on Machine Learning and getting comfortable with neural networks, but since the announcement of the new Swift language for iOS, there was a lot of interest in diving into learning that.</p>

<p>I learned about algebraic data structures from some other Hacker Schoolers over lunch, which was cool. I could see the recursive tree structure being a useful way to set up a decision tree in another language and will have to learn more about whether the data structures available in some other programming languages would make the machine learning algorithms possible to be coded in a more obvious, intuitive way than they are generally set up in Python.</p>

<p>I got together with a group in the afternoon to learn about Swift and the new Playgrounds Apple introduced in XCode 6. Playgrounds are cool because you can copy a snippet of code you&rsquo;re working on and see how the variables are being set and the values are changing over time as it runs through a loop.</p>

<p>I paired with Denise on getting some Swift code working. We figured out the brand-new syntax for hooking up variables to Storyboard outlets so we could generate a simple app with a button and some labels that changed text. We learned that every variable in Swift is public, as opposed to Obj-C which lets you set only certain parameters to be accessible from other classes. Once we got things going, the syntax seems much simpler and faster than all of the boilerplate code you have to write to do the same things in Obj-C.</p>

<p>Later in the afternoon I worked on copying some simple demo apps I&rsquo;d written previously in Obj-C into Swift so I could get more comfortable with the new syntax. Translating the very basic apps was relatively straightforward.</p>

<p>Coolest thing from Day 0:
Emoji as variable and function names in Swift! Cutest language ever?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">import</span> <span class="n">UIKit</span>
</span><span class='line'>
</span><span class='line'><span class="n">class</span> <span class="nl">MyViewController:</span> <span class="n">UIViewController</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="err">🐶</span><span class="o">:</span> <span class="n">UILabel</span>
</span><span class='line'>    <span class="n">var</span> <span class="err">😻</span> <span class="o">=</span> <span class="s">&quot;🐶🐷🐹🐰🐱&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBOutlet</span> <span class="n">var</span> <span class="err">🐹</span><span class="o">:</span> <span class="n">UIButton</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">override</span> <span class="n">func</span> <span class="n">viewDidLoad</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">super</span><span class="p">.</span><span class="n">viewDidLoad</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="err">🐶</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="err">😻</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="err">@</span><span class="kt">IBAction</span> <span class="n">func</span> <span class="err">🐭</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>        <span class="err">🐶</span><span class="p">.</span><span class="n">text</span> <span class="o">=</span> <span class="s">&quot;🐰🐯🐵🐮🐨&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
